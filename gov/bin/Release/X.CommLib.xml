<?xml version="1.0"?>
<doc>
    <assembly>
        <name>X.CommLib</name>
    </assembly>
    <members>
        <member name="T:X.CommLib.AccountStorages.AccountStorage">
            <summary>
                通用密码保存器
            </summary>
        </member>
        <member name="F:X.CommLib.AccountStorages.AccountStorage._configPath">
            <summary>
                当前使用的配置文件路径
            </summary>
        </member>
        <member name="M:X.CommLib.AccountStorages.AccountStorage.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.AccountStorages.AccountStorage" /> class.
            </summary>
        </member>
        <member name="P:X.CommLib.AccountStorages.AccountStorage.Account">
            <summary>
                账号
            </summary>
            <value>
                The account.
            </value>
        </member>
        <member name="P:X.CommLib.AccountStorages.AccountStorage.Pass">
            <summary>
                密码
            </summary>
            <value>
                The pass.
            </value>
        </member>
        <member name="P:X.CommLib.AccountStorages.AccountStorage.SavePass">
            <summary>
                保存密码
            </summary>
            <value>
                <c>true</c> if [save pass]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:X.CommLib.AccountStorages.AccountStorage.SaveAccount">
            <summary>
                保存账号
            </summary>
            <value>
                <c>true</c> if [save account]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:X.CommLib.AccountStorages.AccountStorage.Save">
            <summary>
                进行保存
            </summary>
        </member>
        <member name="M:X.CommLib.AccountStorages.AccountStorage.Test">
            <summary>
                进行测试
            </summary>
        </member>
        <member name="M:X.CommLib.AccountStorages.AccountStorage.SetDefault">
            <summary>
                将参数设置为默认值
            </summary>
        </member>
        <member name="M:X.CommLib.AccountStorages.AccountStorage.GetDefaultConfigPath">
            <summary>
                载入默认配置路径
            </summary>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AccountStorages.AccountStorage.GetDefaultConfigFolder">
            <summary>
                载入默认的配置文件的路径
            </summary>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AccountStorages.AccountStorage.GetDefaultConfigName">
            <summary>
                载入默认的配置文件名称
            </summary>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AccountStorages.AccountStorage.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:X.CommLib.AccountStorages.AccountStorage.Save(System.String)">
            <summary>
            保存配置至指定的路径
            </summary>
            <param name="filePath">
            The file path.
            </param>
        </member>
        <member name="M:X.CommLib.AccountStorages.AccountStorage.Load">
            <summary>
                载入默认设置
            </summary>
        </member>
        <member name="M:X.CommLib.AccountStorages.AccountStorage.Load(System.String)">
            <summary>
            从指定的配置中读取设置
            </summary>
            <param name="configPath">
            The config path.
            </param>
        </member>
        <member name="T:X.CommLib.AccountStorages.IAccountStorage">
            <summary>
                密码保存接口
            </summary>
        </member>
        <member name="P:X.CommLib.AccountStorages.IAccountStorage.Account">
            <summary>
                账号
            </summary>
            <value>
                The account.
            </value>
        </member>
        <member name="P:X.CommLib.AccountStorages.IAccountStorage.Pass">
            <summary>
                密码
            </summary>
            <value>
                The pass.
            </value>
        </member>
        <member name="P:X.CommLib.AccountStorages.IAccountStorage.SavePass">
            <summary>
                保存密码
            </summary>
            <value>
                <c>true</c> if [save pass]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:X.CommLib.AccountStorages.IAccountStorage.SaveAccount">
            <summary>
                保存账号
            </summary>
            <value>
                <c>true</c> if [save account]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:X.CommLib.AccountStorages.IAccountStorage.Save">
            <summary>
                进行保存
            </summary>
        </member>
        <member name="T:X.CommLib.AccountStorages.VirtualAccountStorage">
            <summary>
                一个虚拟的账号密码存储器
            </summary>
        </member>
        <member name="M:X.CommLib.AccountStorages.VirtualAccountStorage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.AccountStorages.VirtualAccountStorage"/> class.
            </summary>
            <param name="account">
            The account.
            </param>
            <param name="pass">
            The pass.
            </param>
        </member>
        <member name="P:X.CommLib.AccountStorages.VirtualAccountStorage.Account">
            <summary>
                账号
            </summary>
            <value>
                The account.
            </value>
        </member>
        <member name="P:X.CommLib.AccountStorages.VirtualAccountStorage.Pass">
            <summary>
                密码
            </summary>
            <value>
                The pass.
            </value>
        </member>
        <member name="P:X.CommLib.AccountStorages.VirtualAccountStorage.SavePass">
            <summary>
                保存密码
            </summary>
            <value>
                <c>true</c> if [save pass]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:X.CommLib.AccountStorages.VirtualAccountStorage.SaveAccount">
            <summary>
                保存账号
            </summary>
            <value>
                <c>true</c> if [save account]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:X.CommLib.AccountStorages.VirtualAccountStorage.Save">
            <summary>
                进行保存
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:X.CommLib.AdvInstTools.AdvInstBuilder">
            <summary>
                advanced installer 构建工具
                注意，所有节点值一设置就会进行保存，以拿设置生效
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstBuilder.advCmdPath">
            <summary>
                advanced installer 程序路径
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstBuilder.configFilePath">
            <summary>
                配置文件路径
            </summary>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.AdvInstTools.AdvInstBuilder" /> class.
            </summary>
            <param name="configPath">
                配置文件路径.
            </param>
        </member>
        <member name="P:X.CommLib.AdvInstTools.AdvInstBuilder.Version">
            <summary>
                安装程序的版本
            </summary>
            <value>
                The version.
            </value>
        </member>
        <member name="P:X.CommLib.AdvInstTools.AdvInstBuilder.WorkingDirectory">
            <summary>
                程序的运行路径
            </summary>
            <value>
                The working directory.
            </value>
        </member>
        <member name="P:X.CommLib.AdvInstTools.AdvInstBuilder.LanguageId">
            <summary>
                项目默认的语言编号
            </summary>
            <value>
                The language identifier.
            </value>
        </member>
        <member name="P:X.CommLib.AdvInstTools.AdvInstBuilder.UpgradeCode">
            <summary>
                返回产品升级编码
            </summary>
            <value>
                The upgrade code.
            </value>
        </member>
        <member name="P:X.CommLib.AdvInstTools.AdvInstBuilder.ProductName">
            <summary>
                设置产品名称
            </summary>
            <value>
                The name of the product.
            </value>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetShortName(System.String)">
            <summary>
                返回文件短名，暂时不处理文件后缀名
            </summary>
            <param name="fileName">
                Name of the valueKey long file.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.AddFiles(System.String,System.String[])">
            <summary>
                添加文件至安装包
            </summary>
            <param name="appDir">
                目标目录，如果为空，则为安装目录.
            </param>
            <param name="filePaths">
                需要添加的文件.
            </param>
            <exception cref="T:System.IO.FileNotFoundException">
                待添加文件不存在
            </exception>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.AddIconResource(System.String,System.String,System.Int32)">
            <summary>
                添加图标资源
            </summary>
            <param name="iconName">
                The nodeName.
            </param>
            <param name="iconFile">
                The oem res file path.
            </param>
            <param name="index">
                The index.
            </param>
            <exception cref="T:System.ApplicationException">
                节点已经存在： + iconName
            </exception>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.Build(System.String[])">
            <summary>
                构建
            </summary>
            <param name="buildNames">
                构建名称，如果未设置则为全部.
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.ChangeApplicationFolder(System.String,System.String[])">
            <summary>
                更新程序安装目录
            </summary>
            <param name="folder">
                The folder.
            </param>
            <param name="buildNames">
                The build names.
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.ChangeApplicationShortcutFolder(System.String,System.String[])">
            <summary>
                更新程序快捷方式所在目录
            </summary>
            <param name="folder">
                The folder.
            </param>
            <param name="buildNames">
                The build names.
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.ChangeBinaryResourceFile(System.String,System.String)">
            <summary>
                修改二进制资源文件路径
            </summary>
            <param name="name">
                在组件中的名称.
            </param>
            <param name="filePath">
                替换后的文件路径
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.ChangeEulaFile(System.String)">
            <summary>
                更新协议文件
            </summary>
            <param name="filePath">
                The file path.
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.ChangeOutDirctory(System.String,System.String[])">
            <summary>
                更改编译程序输出目录
            </summary>
            <param name="directory">
                The directory.
            </param>
            <param name="buildNames">
                构建名称，如果未设置，则为全部.
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.ChangeOutFile(System.String,System.String[])">
            <summary>
                设置输出文件名
                文件名可以无后缀，可使用msi, exe, cab等后缀
                如果文件名为完整路径，则全相应修改输出目录名（类似调用ChangeOutDirctory）
            </summary>
            <param name="packageName">
                输出的文件名称.
            </param>
            <param name="buildNames">
                构建名称，如果未设置，则为全部
                注意：如果是相同文件名，并且还是在同一目录下的话，会出现覆盖的情况，这时需要逐一设置.
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.ChangeShortcut(System.String,System.String,X.CommLib.AdvInstTools.ShortcutInfo)">
            <summary>
                修改快捷方式名称
            </summary>
            <param name="orgName">
                Name of the org.
            </param>
            <param name="newName">
                The new name.
            </param>
            <param name="info">
                快捷方式的附加属性.
            </param>
            <exception cref="T:System.IO.FileNotFoundException">
                无法找到对应快捷方式
            </exception>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.ChangeUrlShortcut(System.String,System.String,System.String)">
            <summary>
                修改internet url快捷方式
            </summary>
            <param name="orgName">
                Name of the org.
            </param>
            <param name="newName">
                The new name.
            </param>
            <param name="url">
                The URL.
            </param>
            <exception cref="T:System.NotSupportedException">
                指定节点没有设置url
            </exception>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.CreateConfigFile(X.CommLib.AdvInstTools.AdvInstProjectType)">
            <summary>
                创建配置文件
            </summary>
            <param name="projectType">
                项目类型
            </param>
            <exception cref="T:System.NotSupportedException">
                如果配置文件已经存在
            </exception>
            <exception cref="T:System.ApplicationException">
                配置文件未创建
            </exception>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.DeleteCacheDirectory">
            <summary>
                删除缓存目录
            </summary>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetBuildNames">
            <summary>
                返回所有构建名称
            </summary>
            <returns>
                The
                <see>
                    <cref>string[]</cref>
                </see>
                .
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetBuildExePackageNames">
            <summary>
                返回当前打包到单个Exe的安装包的路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetBuildComponentXmlNode(System.String)">
            <summary>
                指定构建名，返回对应的xml配置节点
            </summary>
            <param name="buildName">Name of the build.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetBuildExePackageName(System.String)">
            <summary>
                根据 build 查找对应的 生成包的路径，如果不存在返回null
                生成的安装包必须是打包到单个exe文件
            </summary>
            <param name="buildName">
                Name of the build.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetCurrentBuildName">
            <summary>
                返回当前的构建名称，如果不存在返回 null
            </summary>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetCurrentBuildPackageName">
            <summary>
                返回默认的构建程序包的生成路径
                如果不存在，返回null
            </summary>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetDefaultBuildName">
            <summary>
                返回默认的构建名称，如果不存在返回 null
                第一个生成的为 DefaultBuild
            </summary>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetFilePath(System.String,System.StringComparison)">
            <summary>
                返回编译入的文件名的源路径，如果没有找到在返回null
            </summary>
            <param name="fileName">
                Name of the file.
            </param>
            <param name="comparison">
                The comparison.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetPackageFileName(System.String)">
            <summary>
                返回指定构建名对应的安装包名称，可能会是未定义
            </summary>
            <param name="buildName">
                Name of the build.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.SetBuildPackageExeMetadata(System.String,System.String,System.String)">
            <summary>
                设置指定打包程序的扩展属性
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="buildName">对应的编译包名，如果未设置则为全部.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetBuildPackageExeMetadataValues(System.String)">
            <summary>
                返回某个节点
            </summary>
            <param name="buildName">Name of the build.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetBuildPackageExeMetadataValue(System.String,System.String)">
            <summary>
                返回指定打包程序的扩展属性
            </summary>
            <param name="property">The property.</param>
            <param name="buildName">Name of the build.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.IncreaseVersion">
            <summary>
                增加当前的版本号，并返回新的版本号
            </summary>
            <returns>
                The <see cref="P:X.CommLib.AdvInstTools.AdvInstBuilder.Version" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.Rebuild(System.String[])">
            <summary>
                不使用缓存进行构建
            </summary>
            <param name="buildNames">
                The build Names.
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.Save">
            <summary>
                保存项目
            </summary>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.UpdateProductProperty(X.CommLib.AdvInstTools.ProductPropertyType,System.String)">
            <summary>
                更新产品信息
            </summary>
            <param name="propertyType">
                Type of the detail.
            </param>
            <param name="value">
                The value.
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetProductProperty(X.CommLib.AdvInstTools.ProductPropertyType)">
            <summary>
                返回指定的属性值
            </summary>
            <param name="propertyType">Type of the property.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.TestOld">
            <summary>
                进行测试
            </summary>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.AppendChildXmlNode(System.Xml.XmlNode,System.String,System.Object)">
            <summary>
                为指定的节点添加一个子节点，并返回该子节点
            </summary>
            <param name="node">
                The node.
            </param>
            <param name="nodeName">
                Name of the node.
            </param>
            <param name="value">
                The value.
            </param>
            <returns>
                The <see cref="T:System.Xml.XmlNode" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.AppendXmlNodeAttribute(System.Xml.XmlNode,System.String,System.Object)">
            <summary>
                为节点创建一个属性
            </summary>
            <param name="xmlNode">
                The XML node.
            </param>
            <param name="attrName">
                Name of the attr.
            </param>
            <param name="attrValue">
                The attr value.
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.BuildCommand(System.String,X.CommLib.Miscellaneous.CommandLineArgParser)">
            <summary>
                创建一个命令
            </summary>
            <param name="commad">
                The commad.
            </param>
            <param name="parser">
                The parser.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                parser
            </exception>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.BuildCommand(System.String,System.Object)">
            <summary>
                创建一个命令
            </summary>
            <param name="commad">
                The commad.
            </param>
            <param name="commandArgs">
                创建的参数，如果为null则为配置文件的路径.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.BuildCommand(System.String)">
            <summary>
                创建一个命令, 会在命令后添加配置文件路径
            </summary>
            <param name="commad">
                The commad.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.BuildCore(System.String,System.String[])">
            <summary>
                构建核心函数
            </summary>
            <param name="buildCommand">
                The build command.
            </param>
            <param name="buildNames">
                The build names.
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.BuildShortcutName(System.String)">
            <summary>
                创建快捷方式名称
            </summary>
            <param name="shortcutName">
                Name of the shortcut.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.ChangeApplicationFolder(System.String,System.String)">
            <summary>
                更新程序安装目录
            </summary>
            <param name="folder">
                The folder.
            </param>
            <param name="buildName">
                Name of the build.
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetApplicationFolder">
            <summary>
                返回所有创建名
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetAppDir(System.String)">
            <summary>
                返回对应构造名的安装目录
            </summary>
            <param name="buildName">Name of the build.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetApplicationShortcutFolder">
            <summary>
                返回所有快捷方式目录
                buildName:Path
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetShortCutDir(System.String)">
            <summary>
                返回对应构造名的快捷方式目录
            </summary>
            <param name="buildName">Name of the build.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetActAppPathValue(System.String,System.String)">
            <summary>
                返回与安装路径或程序目录对应的属性
            </summary>
            <param name="action">The action.</param>
            <param name="buildName">Name of the build.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.ChangeApplicationFolder(System.String,System.String,System.String,System.String)">
            <summary>
                进行修改目录操作
            </summary>
            <param name="oper">
                操作的类型.
            </param>
            <param name="folder">
                The folder.
            </param>
            <param name="buildName">
                Name of the build.
            </param>
            <param name="operName">
                操作的名称.
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.ChangeApplicationShortcutFolder(System.String,System.String)">
            <summary>
                更新程序快捷方式所在目录
            </summary>
            <param name="folder">
                The folder.
            </param>
            <param name="buildName">
                Name of the build.
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.ChangeOutFile(System.String,System.String)">
            <summary>
                设置输出文件名
            </summary>
            <param name="packageName">
                Name of the package.
            </param>
            <param name="buildName">
                Name of the build.
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.CreateArguments">
            <summary>
                创建参数构造器
            </summary>
            <returns>
                The <see cref="T:X.CommLib.Miscellaneous.CommandLineArgParser" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.CreateNavigator">
            <summary>
                创建配置文件节点查找器
            </summary>
            <returns>
                The <see cref="T:System.Xml.XPath.XPathNavigator" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.CreateXmlDocument">
            <summary>
                载入xmlDocument
            </summary>
            <returns>
                The <see cref="T:System.Xml.XmlDocument" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.FindAdvInstCommandPath">
            <summary>
                返回advanced install 的命令路径
            </summary>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.FindNodeByProperty(System.String,System.String)">
            <summary>
                查找节点并返回，如果节点不存在返回null
            </summary>
            <param name="cid">
                cid值或是cid的最后一位值.
            </param>
            <param name="property">
                The property.
            </param>
            <returns>
                The <see cref="T:System.Xml.XPath.XPathNavigator" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.FindNodeValueByProperty(System.String,System.String,System.String)">
            <summary>
                查找节点并返回节点值,如果不存在返回 null
            </summary>
            <param name="cid">The cid.</param>
            <param name="property">The property.</param>
            <param name="valueKey">The value key.</param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetBuildNameByBuildKey(System.String)">
            <summary>
                根据buildkey查找指定的构建节点
            </summary>
            <param name="buildKey">
                The build name.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetComponentXmlNode(System.String)">
            <summary>
                返回组件节点
            </summary>
            <param name="component">
                The component.
            </param>
            <returns>
                The <see cref="T:System.Xml.XmlNode" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetFullCidValue(System.String)">
            <summary>
                返回完整的cid值
            </summary>
            <param name="cid">
                The cid.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetResourceNode(System.String,System.String)">
            <summary>
                返回某个资源节点
            </summary>
            <param name="component">
                The component.
            </param>
            <param name="name">
                The name.
            </param>
            <returns>
                The <see cref="T:System.Xml.XmlNode" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.HasXmlNodeAttribut(System.Xml.XmlNode,System.String,System.String)">
            <summary>
                节点是否拥有指定的属性
            </summary>
            <param name="xmlNode">
                The XML node.
            </param>
            <param name="attrName">
                Name of the attr.
            </param>
            <param name="attrValue">
                The attr value.
            </param>
            <returns>
                <c>true</c> if [has XML node attribut] [the specified XML node]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.RumAdvInstallCommand(System.String[],X.CommLib.Miscellaneous.CommandLineArgParser)">
            <summary>
                运行命令
            </summary>
            <param name="commands">
                The commands.
            </param>
            <param name="parser">
                The parser.
            </param>
            <returns>
                The <see cref="T:X.CommLib.AdvInstTools.BuildResult" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.RumAdvInstallCommand(System.String,X.CommLib.Miscellaneous.CommandLineArgParser)">
            <summary>
                运行命令
            </summary>
            <param name="command">
                命令类型.
            </param>
            <param name="parser">
                命令参数.
            </param>
            <returns>
                The <see cref="T:X.CommLib.AdvInstTools.BuildResult" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.SaveNode(System.Xml.XmlNode)">
            <summary>
                保存节点
            </summary>
            <param name="node">
                The node.
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.SaveNodes(System.Xml.XmlNode[])">
            <summary>
                保存节点
            </summary>
            <param name="nodes">
                The nodes.
            </param>
            <exception cref="T:System.ArgumentException">
                @有节点未设置有效文档;nodes
            </exception>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.SelectNodes(System.String)">
            <summary>
                查询节点
            </summary>
            <param name="xpath">
                The x path.
            </param>
            <returns>
                The
                <see>
                    <cref>XPathNavigator[]</cref>
                </see>
                .
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.SelectSingleNode(System.String)">
            <summary>
                返回查询的节点
            </summary>
            <param name="xpath">
                The x path.
            </param>
            <returns>
                The <see cref="T:System.Xml.XPath.XPathNavigator" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.SelectSingleXmlNode(System.String)">
            <summary>
                返回可读写的xmlnode
            </summary>
            <param name="xpath">
                The x path.
            </param>
            <returns>
                The <see cref="T:System.Xml.XmlNode" />.
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.SelectXmlNodes(System.String)">
            <summary>
                返回指定的节点
            </summary>
            <param name="xpath">
                The x path.
            </param>
            <returns>
                The
                <see>
                    <cref>XmlNode[]</cref>
                </see>
                .
            </returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.SetXmlNodeAttribute(System.Xml.XmlNode,System.String,System.Object)">
            <summary>
                设置节点的属性
            </summary>
            <param name="xmlNode">
                The XML node.
            </param>
            <param name="attrName">
                Name of the attr.
            </param>
            <param name="attrValue">
                The attr value.
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.VerifyBuildingResult(X.CommLib.AdvInstTools.BuildResult)">
            <summary>
                验证编译结果
            </summary>
            <param name="result">
                The result.
            </param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.VerifyRunningResult(System.String,X.CommLib.AdvInstTools.BuildResult)">
            <summary>
                检验构建返回结果，如果有结果就抛出异常
            </summary>
            <param name="activeName">
                Name of the active.
            </param>
            <param name="result">
                The result.
            </param>
            <exception cref="T:X.CommLib.AdvInstTools.BuildFaildException">
                创建发生错误
            </exception>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.SetPackageFolder(System.String,System.String)">
            <summary>
                设置安装包的输出目录
            </summary>
            <param name="folder">新的输出名称.</param>
            <param name="buildName">构建包名称，如果为 null，则为全部.</param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.ChangeApplicationOutputFolder(System.String,System.String)">
            <summary>
                设置程序安装包的输出目录
            </summary>
            <param name="folder">The folder.</param>
            <param name="buildName">Name of the build.</param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.GetProductCodes">
            <summary>
                返回产品编号（一个语言对应一个产品编码）
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.SetProductCodes(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                批量设置产品的编号
                key 为语言id， value 为 guid 值
            </summary>
            <param name="productCodes">The product codes.</param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.SetProductCode(System.String,System.String)">
            <summary>
                设置对应语言的 guid 值
            </summary>
            <param name="langid">The langid.</param>
            <param name="guid">The unique identifier.</param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.SetNodeValueByProperty(System.String,System.String,System.String,System.String)">
            <summary>
                设置一个节点值
            </summary>
            <param name="cid">The cid.</param>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="valueKey">The valueKey.</param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstBuilder.SetBuildPackageExeInternalNameMetadata(System.String)">
            <summary>
                设置编译后的安装中的 internalName 属性
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="T:X.CommLib.AdvInstTools.AdvInstProjectType">
            <summary>
            项目类型
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstProjectType.Simple">
            <summary>
            简单项目
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstProjectType.Professional">
            <summary>
            专业项目
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstProjectType.Enterprise">
            <summary>
            企业项目
            </summary>
        </member>
        <member name="T:X.CommLib.AdvInstTools.AdvInstUpdater">
            <summary>
            程序工具更新器 
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater._updaterPath">
            <summary>
            更新路径
            </summary>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstUpdater.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.AdvInstTools.AdvInstUpdater"/> class.
            </summary>
            <param name="updaterPath">更新器的路径</param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstUpdater.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.AdvInstTools.AdvInstUpdater"/> class.
            使用默认更新器路径进行初始化
            </summary>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstUpdater.RunUpdater(System.String[])">
            <summary>
            运行更新程序，并返回程序退出代码
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstUpdater.Configure(System.Nullable{System.IntPtr})">
            <summary>
            配置更新服务
            </summary>
            <param name="hWnd">The h WND.</param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstUpdater.Update">
            <summary>
            使用配置参数，进行无界面方式更新
            </summary>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstUpdater.GetStateDescription(System.Int32)">
            <summary>
            根据状态码返回对应的文字描述 
            </summary>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstUpdater.Update(X.CommLib.AdvInstTools.AdvInstUpdater.UpdateType,System.String)">
            <summary>
            进行数据更新
            </summary>
            <param name="type">更新方式</param>
            <param name="url">更新服务地址</param>
        </member>
        <member name="T:X.CommLib.AdvInstTools.AdvInstUpdater.UpdateType">
            <summary>
            更新类型
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater.UpdateType.Normal">
            <summary>
            有界面更新
            根据配置界面中中是否进行自动更新及更新频率进行更新
            如果未设置自动检测及更新，则不进行更新
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater.UpdateType.Silent">
            <summary>
            无界面安静更新，根据配置界面中中是否进行自动更新及更新频率进行更新
            如果未设置自动检测及更新，则不进行更新
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater.UpdateType.SilentAll">
            <summary>
            无界面进行所有更新，如果有更新即进行更新
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater.UpdateType.SilentCritical">
            <summary>
            无界面进行重要更新，如果有重要即进行更新
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater.HasUpdate">
            <summary>
            有更新
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater.UpdateStateBase">
            <summary>
            状态码基值
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater.NoUpdates">
            <summary>
             没有更新
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater.PathExpandError">
            <summary>
             Unable to expand a dynamic path.
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater.ConfigFileNotFound">
            <summary>
             Unable to find the updater configuration file. It should be located near the updater.exe.
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater.UndefinedConfigFileFormat">
            <summary>
             The updates configuration file format is invalid.
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater.UndefinedFileVersion">
            <summary>
             The updater is unable to extract a file version.
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater.UnableToSaveFile">
            <summary>
             The updater is unable to save a file.
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater.InvalidCommandLine">
            <summary>
             The command line is not recognized.
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater.InvalidClientConfig">
            <summary>
             The updater configuration file is invalid. It is required that certain entries must not be empty.
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater.InvalidServerConfig">
            <summary>
             The signature of the updates configuration file is missing or is invalid.
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater.ErrorInvalidUpdateEntry">
            <summary>
             The updates configuration file is invalid. It is required that certain entries must not be empty
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.AdvInstUpdater.ErrorUrlNotFound">
            <summary>
             The updates configuration file or an update file may be missing from web server.
            </summary>
        </member>
        <member name="M:X.CommLib.AdvInstTools.AdvInstUpdater.CheckUpdate(System.String)">
            <summary>
            进行更新检测
            </summary>
            <param name="url">The URL.</param>
            <returns>是否有更新</returns>
        </member>
        <member name="T:X.CommLib.AdvInstTools.BuildFaildException">
            <summary>
            构造失败错误
            </summary>
        </member>
        <member name="M:X.CommLib.AdvInstTools.BuildFaildException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.AdvInstTools.BuildFaildException" /> class.
            </summary>
        </member>
        <member name="M:X.CommLib.AdvInstTools.BuildFaildException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.AdvInstTools.BuildFaildException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.BuildFaildException.#ctor(System.String,X.CommLib.AdvInstTools.BuildResult)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.AdvInstTools.BuildFaildException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.BuildFaildException.#ctor(System.String,X.CommLib.AdvInstTools.BuildResult,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.AdvInstTools.BuildFaildException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="result">The result.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.BuildFaildException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.AdvInstTools.BuildFaildException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:X.CommLib.AdvInstTools.BuildFaildException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.AdvInstTools.BuildFaildException" /> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:X.CommLib.AdvInstTools.BuildFaildException.BuildResult">
            <summary>
            构造结果
            </summary>
            <value>
            The build result.
            </value>
        </member>
        <member name="M:X.CommLib.AdvInstTools.BuildFaildException.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
              </PermissionSet>
        </member>
        <member name="T:X.CommLib.AdvInstTools.BuildResult">
            <summary>
            命令运行结果
            </summary>
        </member>
        <member name="P:X.CommLib.AdvInstTools.BuildResult.FileName">
            <summary>
            命令行路径
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:X.CommLib.AdvInstTools.BuildResult.Arguments">
            <summary>
            命令参数
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:X.CommLib.AdvInstTools.BuildResult.Description">
            <summary>
            运行结果描述 
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:X.CommLib.AdvInstTools.BuildResult.Config">
            <summary>
            配置文件路径 
            </summary>
            <value>
            The config.
            </value>
        </member>
        <member name="P:X.CommLib.AdvInstTools.BuildResult.HasDescription">
            <summary>
            是否有描述信息
            </summary>
            <value>
            <c>true</c> if this instance has description; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:X.CommLib.AdvInstTools.BuildResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
              </PermissionSet>
        </member>
        <member name="T:X.CommLib.AdvInstTools.ProductPropertyType">
            <summary>
                产品信息属性
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.ProductPropertyType.ProductName">
            <summary>
                产品名称
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.ProductPropertyType.Manufacturer">
            <summary>
                制造商
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.ProductPropertyType.ARPURLINFOABOUT">
            <summary>
                关于产品链接
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.ProductPropertyType.ARPURLUPDATEINFO">
            <summary>
                产品更新链接
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.ProductPropertyType.ARPHELPLINK">
            <summary>
                产品帮助链接
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.ProductPropertyType.ARPHELPTELEPHONE">
            <summary>
                产品连接电话
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.ProductPropertyType.ARPCONTACT">
            <summary>
                产品联系信息
            </summary>
        </member>
        <member name="F:X.CommLib.AdvInstTools.ProductPropertyType.ARPCOMMENTS">
            <summary>
                产品备注
            </summary>
        </member>
        <member name="T:X.CommLib.AdvInstTools.ShortcutInfo">
            <summary>
            快捷方式属性
            </summary>
        </member>
        <member name="P:X.CommLib.AdvInstTools.ShortcutInfo.IconFile">
            <summary>
            图标的路径
            </summary>
            <value>
            The icon file.
            </value>
        </member>
        <member name="P:X.CommLib.AdvInstTools.ShortcutInfo.IconIndex">
            <summary>
            图标的索引
            </summary>
            <value>
            The index of the icon.
            </value>
        </member>
        <member name="T:X.CommLib.AppPathBase">
            <summary>
                路径管理的基类
            </summary>
        </member>
        <member name="M:X.CommLib.AppPathBase.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.AppPathBase"/> class. 使用指定的基础目录进行初始化</summary>
            <param name="basePath"></param>
        </member>
        <member name="M:X.CommLib.AppPathBase.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.AppPathBase" /> class.
                使用当前目录进行初始化
            </summary>
        </member>
        <member name="M:X.CommLib.AppPathBase.#ctor(X.CommLib.AppPathBase.InitPathType)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.AppPathBase"/> class. 指定初始化的类型</summary>
            <param name="pathType">Type of the path.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:X.CommLib.AppPathBase.InitPathType">
            <summary>
                初始化路径的类型
            </summary>
        </member>
        <member name="F:X.CommLib.AppPathBase.InitPathType.AppDir">
            <summary>
                使用程序所在目录进行初始化
            </summary>
        </member>
        <member name="F:X.CommLib.AppPathBase.InitPathType.CurrentDir">
            <summary>
                使用当前路径进行初始化 使用Application.StartupPath路径
            </summary>
        </member>
        <member name="P:X.CommLib.AppPathBase.RunPath">
            <summary>
                程序文件所在路径
            </summary>
        </member>
        <member name="P:X.CommLib.AppPathBase.BasePath">
            <summary>
                基本路径
            </summary>
        </member>
        <member name="P:X.CommLib.AppPathBase.LogPath">
            <summary>
                日志路径
            </summary>
        </member>
        <member name="M:X.CommLib.AppPathBase.IsSameFile(System.String,System.String)">
            <summary>检测两个文件是否是相同的。（以md5格式进行检测）</summary>
            <param name="file1">The file1.</param>
            <param name="file2">The file2.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AppPathBase.IsSamePath(System.String,System.String)">
            <summary>判断两个路径是否指向同一个路径</summary>
            <param name="oldPath">The old path.</param>
            <param name="newPath">The new path.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:X.CommLib.AppPathBase.MakeRelativePath(System.String,System.String,System.Boolean)">
            <summary>返回path相对于basePath的相对路径
                目录请以Path.DirectorySeparatorChar结尾</summary>
            <param name="basePath">The base path.</param>
            <param name="path">The path.</param>
            <param name="basePathIsDirectory">basePath是否是一個目錄 </param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AppPathBase.MakeRelativePath(System.String)">
            <summary>返回path相对于BasePath的相对路径</summary>
            <param name="path">进行比较的文件路径或是目录，如果是目录请以Path.DirectorySeparatorChar结尾</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AppPathBase.GetfileMd5(System.String)">
            <summary>返回一个文件的md5值</summary>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AppPathBase.RemoveLastDirectorySeparatorChar(System.String)">
            <summary>移除路径最后的目录分隔符</summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AppPathBase.Test">
            <summary>The test.</summary>
        </member>
        <member name="T:X.CommLib.AssemblyLoaders.AppDomainShower">
            <summary>
            显示当前appDomain的信息，为了测试使用
            </summary>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AppDomainShower.GetAppDomainName">
            <summary>
            返回当前程序集的名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.AssemblyLoaders.AssemblyDynamicLoader">
            <summary>
                动态载入程序集封装
            </summary>
        </member>
        <member name="F:X.CommLib.AssemblyLoaders.AssemblyDynamicLoader._appDomain">
            <summary>
                当前载入的appdomain
            </summary>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AssemblyDynamicLoader.InnerTest">
            <summary>
                内部测试
            </summary>
        </member>
        <member name="P:X.CommLib.AssemblyLoaders.AssemblyDynamicLoader.AppDomain">
            <summary>
                内置的应用域
            </summary>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AssemblyDynamicLoader.CreateDomain(System.String,System.String[])">
            <summary>创建appDomain</summary>
            <param name="baseDir">程序集基础路径，如果为空，则为当前路径- </param>
            <param name="privateBinpaths">载入子目录.</param>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AssemblyDynamicLoader.CreateInstance``1(System.Reflection.Assembly,System.Type)">
            <summary>在appdomain中创建指定的实例，并返回</summary>
            <typeparam name="T"></typeparam>
            <param name="assembly">The assembly.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AssemblyDynamicLoader.CreateInstance(System.Reflection.Assembly,System.Type)">
            <summary>在appdomain中创建指定的实例，并返回</summary>
            <param name="assembly">The assembly.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AssemblyDynamicLoader.CreateInstance(System.String,System.String)">
            <summary>在appdomain中创建指定的实例，并返回</summary>
            <param name="assemblyName">The assembly.</param>
            <param name="typeName">The type.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AssemblyDynamicLoader.CreateRemoteLoader">
            <summary>
                在内部的domain中创建一个RemoteLoader实例
                以后可以使用该 RemoteLoader 方便的载入其它对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AssemblyDynamicLoader.DoCallBack``1(System.Func{``0})">
            <summary>在appdomain中执行一段代码，并返回值</summary>
            <typeparam name="T"></typeparam>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AssemblyDynamicLoader.DoCallBack(System.CrossAppDomainDelegate)">
            <summary>在appdomain中调用 DoCallBack</summary>
            <param name="crossAppDomainDelegate">The cross application domain delegate.</param>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AssemblyDynamicLoader.LoadAssembly(System.Reflection.AssemblyName)">
            <summary>在appdomain中载入assembly</summary>
            <param name="assemblyName">Name of the assembly.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AssemblyDynamicLoader.LoadAssembly(System.String)">
            <summary>在appdomain中载入assembly</summary>
            <param name="assemblyString">The assembly string.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AssemblyDynamicLoader.Unload">
            <summary>
                卸载appDomain
            </summary>
        </member>
        <member name="T:X.CommLib.AssemblyLoaders.AssemblyEnumer">
            <summary>
            程序集枚举器
            </summary>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AssemblyEnumer.LoadGetReferencedAssemblies(System.Reflection.Assembly)">
            <summary>
            载入指定程序集中所有引用的程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AssemblyEnumer.LoadGetReferencedAssemblyNames(System.Reflection.Assembly,System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            载入某一程序集所引用的所有程序集
            </summary>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.AssemblyLoaders.AssemblyResource">
            <summary>
                程序集资源管理器
            </summary>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AssemblyResource.LoadAssemblyStream(System.String,System.UriKind,System.Reflection.Assembly)">
            <summary>从程序集中载入资源</summary>
            <param name="path">资源的全路径，一般为嵌入资源.‘程序集名称.文件路径.文件名组成’</param>
            <param name="uriKind">路径为相对路径还是绝对路径
                如果是相对路径，则在路径前加入assembly的命名空间
                如果使用都是，则会两者都进行尝试</param>
            <param name="assembly">资源所在的程序集，一般使用GetExecutingAssembly获取.
                如果该参数为null则使用调用LoadAssemblyStream者(GetCallingAssembly())所在的程序集</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AssemblyResource.LoadAssemblyStream(System.Type,System.String)">
            <summary>传入资源所在程序集中的一个对象类型及资源文件相对于该对象的路径来返回资源流
                路径使用.来分隔</summary>
            <param name="type">The type.</param>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AssemblyResource.LoadString(System.Type,System.String,System.Text.Encoding)">
            <summary>
            从载入的资源中载入字符内容
            如果资源不存在返回null
            </summary>
            <param name="type">The type.</param>
            <param name="fileName">Name of the file.</param>
            <param name="encoding">文件的编码，默认为utf8.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.AssemblyResource.Test">
            <summary>
                内部测试
            </summary>
        </member>
        <member name="T:X.CommLib.AssemblyLoaders.PluginLoader">
            <summary>
            插件载入器
            使用配置文件进行控件，dll与config文件必须在一些
            config文件中使用<add key="keyname" value="typename;typename;typename" />进行配置
            </summary>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.PluginLoader.LoadPluginFromDirectory``1(System.String,System.String)">
            <summary>
            从指定的目录中载入插件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pluginDir">插件所在目录</param>
            <param name="pluginKey">config文件中指定需要初始化的插件key</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.PluginLoader.LoadPluginsFromFile(System.String,System.String)">
            <summary>
            根据指定的配置文件载入插件
            </summary>
            <param name="pluginKey">插件键定义.</param>
            <param name="configPath">配置文件路径</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.PluginLoader.LoadPluginsFromFile``1(System.String,System.String)">
            <summary>
            根据指定的配置文件载入插件
            </summary>
            <typeparam name="T">返回的类型</typeparam>
            <param name="pluginKey">插件键定义.</param>
            <param name="configPath">配置文件路径</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.AssemblyLoaders.RemoteLoader">
            <summary>
            主要用来操作appdomaon的远程载入的辅助对象
            </summary>
        </member>
        <member name="P:X.CommLib.AssemblyLoaders.RemoteLoader.AppDirs">
            <summary>
            程序集的搜索路径
            </summary>
        </member>
        <member name="P:X.CommLib.AssemblyLoaders.RemoteLoader.AppDomain">
            <summary>
            返回对象对应的appdomain
            </summary>
        </member>
        <member name="T:X.CommLib.AssemblyLoaders.RemoteLoader.MethodInvokerHandle`1">
            <summary>
            远程调用回调函数
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.RemoteLoader.Invoker``1(X.CommLib.AssemblyLoaders.RemoteLoader.MethodInvokerHandle{``0})">
            <summary>
            在远程对象的空间中运行一段代码，可以返回值
            </summary>
            <param name="invoker">The invoker.</param>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.RemoteLoader.Invoker(System.Windows.Forms.MethodInvoker)">
            <summary>
            在远程对象的空间中运行一段代码，没有返回值 
            </summary>
            <param name="invoker">The invoker.</param>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.RemoteLoader.GetInstance(System.Reflection.Assembly,System.String)">
            <summary>
            在远程对象中载入对象实例
            </summary>
            <param name="assembly"> </param>
            <param name="typeName">Name of the type.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.RemoteLoader.GetInstance``1(System.Reflection.Assembly,System.Type)">
            <summary>
            返回指定类型的实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.RemoteLoader.LoadAssembly(System.String)">
            <summary>
            载入指定的程序集
            </summary>
            <param name="assemblyPath">需要载入的程序集路径</param>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.RemoteLoader.LoadInterfaceTypes(System.Reflection.Assembly,System.Type)">
            <summary>
            从指定的程序集中返回继承自parentType的类型
            </summary>
            <param name="assembly"> </param>
            <param name="parentType">指定的接口类型或是普通类</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AssemblyLoaders.RemoteLoader.GetInstance(System.Reflection.Assembly,System.Type)">
            <summary>
            返回指定类型的实例
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.ChmBuilders.ChmDecompiler">
            <summary>
            chm 反编译
            </summary>
        </member>
        <member name="M:X.CommLib.ChmBuilders.ChmDecompiler.Decompile(System.String,System.String)">
            <summary>
            反编译chm至一个指定的目录 
            </summary>
            <param name="chmPath">The CHM path.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:X.CommLib.ChmBuilders.ChmDecompiler.Decompile(System.String)">
            <summary>
            反编译chm至一个默认的目录（chm文件成的目录与文件同名目录）
            </summary>
            <param name="chmPath">The CHM path.</param>
        </member>
        <member name="M:X.CommLib.ChmBuilders.ChmDecompiler.GetShortPathName(System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>
                将长文件名转为短文件名
            </summary>
            <param name="lpszLongPath">The LPSZ long path.</param>
            <param name="lpszShortPath">The LPSZ short path.</param>
            <param name="cchBuffer">The CCH buffer.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.ChmDecompiler.ToShortPathName(System.String)">
            <summary>
                将长文件名转为短文件名
            </summary>
            <param name="longName">The long name.</param>
            <returns></returns>
            <exception cref="T:System.ComponentModel.Win32Exception"></exception>
        </member>
        <member name="T:X.CommLib.ChmBuilders.ContentNode">
            <summary>
                内容节点
            </summary>
        </member>
        <member name="F:X.CommLib.ChmBuilders.ContentNode._childNodes">
            <summary>
                子节点
            </summary>
        </member>
        <member name="M:X.CommLib.ChmBuilders.ContentNode.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.ChmBuilders.ContentNode" /> class.
            </summary>
        </member>
        <member name="M:X.CommLib.ChmBuilders.ContentNode.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.ChmBuilders.ContentNode" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="path">The path.</param>
        </member>
        <member name="P:X.CommLib.ChmBuilders.ContentNode.Name">
            <summary>
                节点的名称
            </summary>
            <value>
                The name.
            </value>
            ab
        </member>
        <member name="P:X.CommLib.ChmBuilders.ContentNode.Path">
            <summary>
                对应的路径
            </summary>
            <value>
                The path.
            </value>
        </member>
        <member name="P:X.CommLib.ChmBuilders.ContentNode.Nods">
            <summary>
                返回子节点
            </summary>
            <value>
                The child nods.
            </value>
        </member>
        <member name="M:X.CommLib.ChmBuilders.ContentNode.LoadFromDirectory(System.String,System.String,System.String[])">
            <summary>
                从目录载入节点
            </summary>
            <param name="directory">The directory.</param>
            <param name="basePath">The base path.</param>
            <param name="searchPatterns">The search patterns.</param>
        </member>
        <member name="M:X.CommLib.ChmBuilders.ContentNode.LoadNodesFromDirectory(System.String,System.String,System.String[])">
            <summary>
                从目录载入节点
            </summary>
            <param name="directory">The directory.</param>
            <param name="basePath">找出的文件会加上该相应路径.</param>
            <param name="searchPatterns">The search patterns.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.ContentNode.AddNodes(X.CommLib.ChmBuilders.ContentNode[])">
            <summary>
                增加子节点
            </summary>
            <param name="nodes">The nodes.</param>
        </member>
        <member name="M:X.CommLib.ChmBuilders.ContentNode.CleanNodes">
            <summary>
                清空子节点
            </summary>
        </member>
        <member name="T:X.CommLib.ChmBuilders.SimpleChmBuilder">
            <summary>
                简单的chm编译器，直接指定一个目录进行编译为chm
            </summary>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.Test">
            <summary>
                进行测试
            </summary>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.Dispose">
            <summary>
                可以被客户直接调用
            </summary>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.Finalize">
            <summary>
                析构函数自动生成 Finalize 方法和对基类的 Finalize 方法的调用.默认情况下,一个类是没有析构函数的,也就是说,对象被垃圾回收时不会被调用Finalize方法
            </summary>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.Dispose(System.Boolean)">
            <summary>
                无法被客户直接调用
                如果 disposing 是 true, 那么这个方法是被客户直接调用的,那么托管的,和非托管的资源都可以释放
                如果 disposing 是 false, 那么函数是从垃圾回收器在调用Finalize时调用的,此时不应当引用其他托管对象所以,只能释放非托管资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:X.CommLib.ChmBuilders.SimpleChmBuilder._cleanFiles">
            <summary>
                需要清理的文件保存在这里
            </summary>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.AddCleanFiles(System.String[])">
            <summary>
                添加一批需要的清理的文件
            </summary>
            <param name="files">The files.</param>
        </member>
        <member name="F:X.CommLib.ChmBuilders.SimpleChmBuilder._projectParams">
            <summary>
                工程参数
            </summary>
        </member>
        <member name="P:X.CommLib.ChmBuilders.SimpleChmBuilder.WorkDirectory">
            <summary>
                工作目录，所有临时文件将会存在在该目录下
            </summary>
            <value>
                The work directory.
            </value>
        </member>
        <member name="P:X.CommLib.ChmBuilders.SimpleChmBuilder.Title">
            <summary>
                标题
            </summary>
            <value>
                The title.
            </value>
        </member>
        <member name="P:X.CommLib.ChmBuilders.SimpleChmBuilder.HomePage">
            <summary>
                首页
            </summary>
            <value>
                The home page.
            </value>
        </member>
        <member name="P:X.CommLib.ChmBuilders.SimpleChmBuilder.DefaultPage">
            <summary>
                起始页
            </summary>
            <value>
                The default page.
            </value>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.Build(System.String)">
            <summary>
                获取
            </summary>
            <param name="chmFile">The CHM file.</param>
            <exception cref="T:System.ArgumentException">@没有定义工作目录;workingDirectory</exception>
            <exception cref="T:System.IO.FileNotFoundException">工作目录不存在</exception>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.InitChmFileInfo(System.String)">
            <summary>
                初始化chm信息
            </summary>
            <param name="workingDirectory">The working directory.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.CleanFiles">
            <summary>
                清理所有临时文件
            </summary>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.TryDeleteFile(System.String)">
            <summary>
                尝试删除文件
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.CreateIndexFile(System.String,System.String[])">
            <summary>
                创建索引文件
            </summary>
            <param name="workingDirectory">The working directory.</param>
            <param name="files">The files.</param>
            <returns></returns>
        </member>
        <member name="P:X.CommLib.ChmBuilders.SimpleChmBuilder.ContentFont">
            <summary>
             内容节点字体，格式如下：微软雅黑,10,0
            字体名,大小,0
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:X.CommLib.ChmBuilders.SimpleChmBuilder.ContentNodes">
            <summary>
                内容节点
            </summary>
            <value>
                The content nodes.
            </value>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.CreateContentFile(System.String)">
            <summary>
                创建内容文件
            </summary>
            <param name="workingDirectory">The working directory.</param>
            <exception cref="T:System.NotImplementedException">没有完成内容页内容</exception>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.ChangeContentFont(HtmlAgilityPack.HtmlDocument,HtmlAgilityPack.HtmlNode,System.String)">
            <summary>
            修改内容页的字体部分
            </summary>
            <param name="document">The document.</param>
            <param name="rootNode">The root node.</param>
            <param name="contentFont">The content font.</param>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.AppendContentChildren(HtmlAgilityPack.HtmlDocument,HtmlAgilityPack.HtmlNode,X.CommLib.ChmBuilders.ContentNode[])">
            <summary>
                添加子节点
            </summary>
            <param name="document">The document.</param>
            <param name="rootNode">The root node.</param>
            <param name="contentNodes">The content nodes.</param>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.AppendChild(HtmlAgilityPack.HtmlDocument,HtmlAgilityPack.HtmlNode,X.CommLib.ChmBuilders.ContentNode)">
            <summary>
                添加一个子节点
            </summary>
            <param name="document">The document.</param>
            <param name="rootNode">The root node.</param>
            <param name="contentNode">The content node.</param>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.BuildProject(System.String,System.String[])">
            <summary>
                编译
            </summary>
            <param name="workingDirectory">The working directory.</param>
            <param name="allFiles">All files.</param>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.CreateProjectFile(System.String,System.String[])">
            <summary>
                创建工程文件
            </summary>
            <param name="projectFilePath">The project file path.</param>
            <param name="allFiles">All files.</param>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.AppendSecition(System.Text.StringBuilder,System.String,System.String[])">
            <summary>
                将一个配置节点加入文件缓存中
            </summary>
            <param name="fileBuffer">The file buffer.</param>
            <param name="sectionName">Name of the section.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.GetProjectParam(System.String)">
            <summary>
                返回一个工程属性值
            </summary>
            <param name="keyName">Name of the key.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.GetWindowInfoString(System.String)">
            <summary>
                返回窗口属性的文字部分
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.CreateOptions(System.String)">
            <summary>
                创建工程属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.UpdateProjectParamWithValue(System.String,System.String)">
            <summary>
                设置属性值
            </summary>
            <param name="keyName">The default topic.</param>
            <param name="value">The default page.</param>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.InitProjectParams">
            <summary>
                初始化参数
            </summary>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.UpdateProjectParam(System.String,System.String)">
            <summary>
                更新工程文件参数
            </summary>
            <param name="keyName">Name of the key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:X.CommLib.ChmBuilders.SimpleChmBuilder.Jump2Text">
            <summary>
                扩展按钮2的文字
            </summary>
            <value>
                The jump2 text.
            </value>
        </member>
        <member name="P:X.CommLib.ChmBuilders.SimpleChmBuilder.Jump2Url">
            <summary>
                扩展按钮2的链接
            </summary>
            <value>
                The jump2 URL.
            </value>
        </member>
        <member name="P:X.CommLib.ChmBuilders.SimpleChmBuilder.Jump1Text">
            <summary>
                扩展按钮1的文字
            </summary>
            <value>
                The jump1 text.
            </value>
        </member>
        <member name="P:X.CommLib.ChmBuilders.SimpleChmBuilder.Jump1Url">
            <summary>
                扩展按钮1的链接
            </summary>
            <value>
                The jump1 URL.
            </value>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.CreateWindowInfo(System.String)">
            <summary>
                设置windows 章节
            </summary>
            <param name="windowName">Name of the window.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.GetWindowExtStyles">
            <summary>
                扩展样式
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.GetWindowStyles">
            <summary>
                返回窗口样式
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.GetWindowShowState">
            <summary>
                返回窗口初始状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.GetNavigationSide">
            <summary>
                返回导航栏的位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.GetDefaultNavigationPanel">
            <summary>
                默认显示哪一个导航面板
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.GetNavigationBarVisible(System.Boolean)">
            <summary>
                导航栏默认是否可见
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.GetWidnowsRectang">
            <summary>
                返回窗口的大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.GetButtonSytles">
            <summary>
                返回按钮风格
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.GetNavigationBarWidth">
            <summary>
                返回导航栏的宽度
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.GetNavigationBarStyles">
            <summary>
                返回导航栏的样式
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.BuildWithHha(System.String)">
            <summary>
                使用hha.dll导出函数进行编译，但是会造成目录无法被删除的问题
            </summary>
            <param name="projectFilePath">The project file path.</param>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.ProcessFunc(System.String)">
            <summary>
                生成进度
            </summary>
            <param name="process">The process.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.LoggingFunc(System.String)">
            <summary>
                生成日志
            </summary>
            <param name="log">The log.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.HHA_CompileHHP(System.String,X.CommLib.ChmBuilders.SimpleChmBuilder.LoggingEventFunc,X.CommLib.ChmBuilders.SimpleChmBuilder.ProcessEventFunc,System.Int32)">
            <summary>
                编译函数
            </summary>
            <param name="hhpFile">The HHP file.</param>
            <param name="loggingFunc">The logging func.</param>
            <param name="processFunc">The process func.</param>
            <param name="stack">The stack.</param>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.GetHhcAppPath">
            <summary>
                返回hhc.exe的路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.BuildWithHhc(System.String)">
            <summary>
                使用hhc.exe 进行编译
            </summary>
            <param name="projectFilePath">The project file path.</param>
        </member>
        <member name="T:X.CommLib.ChmBuilders.SimpleChmBuilder.LoggingEventFunc">
            <summary>
                生成日志
            </summary>
            <param name="log">The log.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.ChmBuilders.SimpleChmBuilder.ProcessEventFunc">
            <summary>
                生成进度
            </summary>
            <param name="process">The process.</param>
            <returns></returns>
        </member>
        <member name="P:X.CommLib.ChmBuilders.SimpleChmBuilder.BuildFiles">
            <summary>
                需要编译的文件列表
            </summary>
            <value>
                The build files.
            </value>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.GetBuildFiles(System.String)">
            <summary>
                载入需要编译的文件 ，如果已经定义，则使用定义，如果没有定义，则从指定的目录中获取
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.ChmBuilders.SimpleChmBuilder.GetBuildFilesFromDirectory(System.String)">
            <summary>
                从一个目录返回所有需要编译的文件，文件相对于目录路径
            </summary>
            <param name="directory">The HTML directory.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Consoles.ConsoleCommand">
            <summary>
                控制台命令的基类
            </summary>
            <summary>
                命令操作的基类
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.ConsoleCommand.WriteMessageLocker">
            <summary>
                字符输出同步锁
            </summary>
        </member>
        <member name="T:X.CommLib.Consoles.ConsoleCommand.WriteCustomerMessageFunc">
            <summary>
                自定义输出回调函数
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:X.CommLib.Consoles.ConsoleCommand.MenuName">
            <summary>
            命令名称
            </summary>
            <value>
            The name of the menu.
            </value>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.CreateConsoleAppStartInfo(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>创建一个控制台运行程序的启动信息</summary>
            <param name="fileName">需要运行的文件路径.</param>
            <param name="arguments">运行的参数.</param>
            <param name="workingDirectory">工作运行路径.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.FormatString(System.String,System.Int32,System.Drawing.StringAlignment)">
            <summary>格式化字符串</summary>
            <param name="title">The title.</param>
            <param name="maxLenght">Width of the window.</param>
            <param name="alignment">The alignment.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.RedirectConsoleApp(System.String,System.String,System.String)">
            <summary>调用一个控制台程序，并等待其返回</summary>
            <param name="fileName">Name of the file.</param>
            <param name="arguments">The arguments.</param>
            <param name="workingDirectory">The working directory.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.RunCommand(X.CommLib.Consoles.ConsoleCommand)">
            <summary>运行一个命令</summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.RunCommands(System.String,System.Int32,System.Int32,X.CommLib.Consoles.ConsoleCommand[],System.Boolean)">
            <summary>运行控制台命令窗口</summary>
            <param name="title">标题 </param>
            <param name="width">指定高，输入0使用最大值的1/2 </param>
            <param name="height">指定宽，输入0使用最大值的1/2 </param>
            <param name="commands">可以运行的命令 </param>
            <param name="showVer">是否显示版本号 </param>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.RunSingleCommand(X.CommLib.Consoles.ConsoleCommand)">
            <summary>运行一个单一命令</summary>
            <param name="command">The command. </param>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.SafeWriteMessage(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>使用指定的颜色输出文字，输出文字后将当前位置恢复至原位置</summary>
            <param name="message">The message.</param>
            <param name="color">The color.</param>
            <param name="backgroundColor">Color of the background.</param>
            <param name="top">The top.</param>
            <param name="left">The left.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.SetConsole(System.String,System.Int32,System.Int32,System.Boolean,System.Drawing.Icon)">
            <summary>设置控制台的标题，宽度等</summary>
            <param name="title">标题，如果为null则使用程序集标题</param>
            <param name="width">宽度，如果小于等于0则设置为最大值的一半</param>
            <param name="height">高度，如果小于等于0则设置为最大值的一半</param>
            <param name="showVer">是否显示版本号</param>
            <param name="icon">左上角的图标，如为0则显示程序图标.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.ShowErrorMessage(System.String,System.Exception)">
            <summary>显示出错信息</summary>
            <param name="title">The title.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.WaiteAnyKey(System.String,System.String)">
            <summary>等待输入任意键</summary>
            <param name="title">The title.</param>
            <param name="entryKeyMessage">The entry key message.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.WriteCustomerMessage(X.CommLib.Consoles.ConsoleCommand.WriteCustomerMessageFunc,System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>使用指定的颜色及位置输出文字</summary>
            <param name="func">The function.</param>
            <param name="message">The message.</param>
            <param name="color">null</param>
            <param name="backgroundColor">Color of the background.</param>
            <param name="top">The top.</param>
            <param name="left">The left.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.WriteLines(System.Int32)">
            <summary>输出n个回车换行</summary>
            <param name="len">The length.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.WriteMessage(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>使用指定的颜色输出文字</summary>
            <param name="message">The message.</param>
            <param name="color">The color.</param>
            <param name="backgroundColor">Color of the background.</param>
            <param name="top">The top.</param>
            <param name="left">The left.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.WriteMessageLine(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>使用指定的颜色输出文字,输出完成后加入回车换行符</summary>
            <param name="message">The message.</param>
            <param name="color">The color.</param>
            <param name="top">The top.</param>
            <param name="left">The left.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.WriteMessageLine(X.CommLib.Threader.LoggingEventArgs)">
            <summary>写入一个日志信息</summary>
            <param name="eventArgs">The <see cref="T:X.CommLib.Threader.LoggingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.Helper">
            <summary>
                显示一段帮助信息
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.Run">
            <summary>
                开始运行
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.ShowHelper">
            <summary>显示帮助</summary>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.WriteErrorMessage(System.String,System.ConsoleColor,System.Nullable{System.ConsoleColor},System.Int32,System.Int32)">
            <summary>使用指定的颜色输出文字</summary>
            <param name="message">The message.</param>
            <param name="color">The color.</param>
            <param name="backgroundColor">Color of the background.</param>
            <param name="top">The top.</param>
            <param name="left">The left.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.GetEntryString(System.String,System.String)">
            <summary>返回输入的路径，如果直接回车，返回默认路径</summary>
            <param name="title">The title.</param>
            <param name="defaultValue">默认路径，如果为null，则从剪贴板中获取</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.GetQuestionAnswer(System.String,System.Boolean,System.Boolean)">
            <summary>对一个问题进行yes/no的回答</summary>
            <param name="question">需要回复的内容</param>
            <param name="warn">是否使用红色警告</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.ShowErrorMessageString(System.String)">
            <summary>用红色字体显示错误信息</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.WaitSelectOption``1(System.String,``0[],System.Boolean,System.Int32)">
            <summary>从一组中返回选择的序号，如果没有选择返回-1</summary>
            <typeparam name="T">选择的参数类型</typeparam>
            <param name="title">The title.</param>
            <param name="options">The options.</param>
            <param name="attachQuit">if set to <c>true</c> [attach quit].</param>
            <param name="space">The space.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.WaitSelectOption(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Char,System.String}},System.Boolean,System.Int32)">
            <summary>从一级选择中选择一个</summary>
            <param name="title">The title.</param>
            <param name="options">The options.</param>
            <param name="attachQuit">if set to <c>true</c> [attach quit].</param>
            <param name="space">The space.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.WaitSelectOption(System.String,System.Collections.Generic.Dictionary{System.Char,System.String},System.Boolean,System.Int32)">
            <summary>输出一组选项，等待用户输入一个选项</summary>
            <param name="title">The title.</param>
            <param name="options">The options.</param>
            <param name="attachQuit">是否附加退出命令</param>
            <param name="space">在显示前面加入多少间隔</param>
            <returns>返回选择的内容，选择字符将被转为大写</returns>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.WaitSelectOptionEx``1(System.String,``0[],System.Boolean,System.Int32)">
            <summary>Waits the select option ex.</summary>
            <typeparam name="T">选择参数</typeparam>
            <param name="title">The title.</param>
            <param name="options">The options.</param>
            <param name="attachQuit">if set to <c>true</c> [attach quit].</param>
            <param name="space">The space.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.WaitTimeLeave(System.String,System.Int32,System.Boolean)">
            <summary>等待n秒后离开</summary>
            <param name="title">标题 </param>
            <param name="time">等待时间，秒 </param>
            <param name="desc">是否显示等待时间的备注 </param>
            <returns>true:等待结束，false:人工停止 </returns>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.ProcessMethodInvoker(System.String,System.Windows.Forms.MethodInvoker[])">
            <summary>对一级回调函数进行处理，并给出进度</summary>
            <param name="title">The title.</param>
            <param name="methodInvokers">The method invokers.</param>
            <exception cref="T:System.NotSupportedException">没有指定需要处理的回调函数</exception>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.RunCommand">
            <summary>
                运行命令
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.RunConsole">
            <summary>
                使用控制台运行该命令对象
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.ShowMenuHead">
            <summary>
                显示菜单头
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleCommand.Test">
            <summary>
                Tests this instance.
            </summary>
        </member>
        <member name="T:X.CommLib.Consoles.Consolehelper">
            <summary>
                控制台帮助组件
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.Consolehelper.#cctor">
            <summary>
                Initializes the <see cref="T:X.CommLib.Consoles.Consolehelper" /> class.
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.Consolehelper.SetConsoleAppIcon(System.Drawing.Icon)">
            <summary>
                设置当前控制台的图标
            </summary>
            <param name="icon">需要设置的图标，如果为空，则提取当前程序的图标 .</param>
        </member>
        <member name="M:X.CommLib.Consoles.Consolehelper.SetWindowIcon(System.IntPtr,System.Drawing.Icon,X.CommLib.Consoles.Consolehelper.IconTypes)">
            <summary>
            设置图标的格式
            </summary>
            <param name="hWnd">The h WND.</param>
            <param name="icon">The icon.</param>
            <param name="iconType">Type of the icon.</param>
        </member>
        <member name="T:X.CommLib.Consoles.Consolehelper.IconTypes">
            <summary>
            设置图标的类型
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.Consolehelper.IconTypes.IconSmall">
            <summary>
            大图标
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.Consolehelper.IconTypes.IconBig">
            <summary>
            小图标
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.Consolehelper.SendSetIconMessage(System.IntPtr,System.UInt32,X.CommLib.Consoles.Consolehelper.IconTypes,System.IntPtr)">
            <summary>
            发送消息
            </summary>
            <param name="hWnd">The h WND.</param>
            <param name="msg">The MSG.</param>
            <param name="iconType">Type of the icon.</param>
            <param name="iconHandle">The icon handle.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.Consolehelper.LoadAppIcon">
            <summary>
                Loads the app icon.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:X.CommLib.Consoles.Consolehelper.ConsoleWindowHandle">
            <summary>
                控制台的窗口句柄
            </summary>
            <value>
                The console window handle.
            </value>
        </member>
        <member name="P:X.CommLib.Consoles.Consolehelper.ConsoleVisible">
            <summary>
                当前控制台是否可见
            </summary>
            <value>
                <c>true</c> if [console visible]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:X.CommLib.Consoles.Consolehelper.GetConsoleWindow">
            <summary>
                控制台窗口句柄
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.Consolehelper.ShowWindow(System.IntPtr,X.CommLib.Consoles.Consolehelper.ShowWindowCommands)">
            <summary>
                显示窗口
            </summary>
            <param name="hWnd">The h WND.</param>
            <param name="nCmdShow">The n CMD show.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.Consolehelper.IsWindowVisible(System.IntPtr)">
            <summary>
                窗口句柄是否可见
            </summary>
            <param name="hWnd">The h WND.</param>
            <returns>
                <c>true</c> if [is window visible] [the specified h WND]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:X.CommLib.Consoles.Consolehelper.ShowConsole">
            <summary>
                显示控制台
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.Consolehelper.HiddenConsole">
            <summary>
                隐藏控制台
            </summary>
        </member>
        <member name="T:X.CommLib.Consoles.Consolehelper.ShowWindowCommands">
            <summary>
                显示窗口状态
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.Consolehelper.ShowWindowCommands.Hide">
            <summary>
                Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.Consolehelper.ShowWindowCommands.Show">
            <summary>
                Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="T:X.CommLib.Consoles.Consolehelper.ConsoleCtrlDelegate">
            <summary>
                控制台退出回调函数
            </summary>
            <param name="ctrlType">Type of the CTRL.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Consoles.Consolehelper.CtrlTypes">
            <summary>
                控制台退出事件
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.Consolehelper.CtrlTypes.CtrlCEvent">
            <summary>
                CTRL+C
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.Consolehelper.CtrlTypes.CtrlBreakEvent">
            <summary>
                CTRL+BREAK
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.Consolehelper.CtrlTypes.CtrlCloseEvent">
            <summary>
                接收到关闭事件
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.Consolehelper.CtrlTypes.CtrlLogoffEvent">
            <summary>
                注消
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.Consolehelper.CtrlTypes.CtrlShutdownEvent">
            <summary>
                关闭
            </summary>
        </member>
        <member name="E:X.CommLib.Consoles.Consolehelper.OnConsoleCtrlEvent">
            <summary>
                发出控制台退出事件
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.Consolehelper.InitConsoleCtrlHandler">
            <summary>
                初始化控制台监听函数
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.Consolehelper.ConsoleCtrlHandlerRoutine(X.CommLib.Consoles.Consolehelper.CtrlTypes)">
            <summary>
                当发生控制台退出事件时
            </summary>
            <param name="ctrlType">Type of the CTRL.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:X.CommLib.Consoles.Consolehelper.SetConsoleCtrlHandler(X.CommLib.Consoles.Consolehelper.ConsoleCtrlDelegate,System.Boolean)">
            <summary>
                设置退出监听事件
            </summary>
            <param name="handlerRoutine">监听回调函数.</param>
            <param name="add">添加监听还是不再监听</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.Consolehelper.GenerateConsoleCtrlEvent(System.UInt32,System.UInt32)">
            <summary>
                发送退出控制台事件
            </summary>
            <param name="dwCtrlEvent">The dw CTRL event.</param>
            <param name="dwProcessGroupId">The dw process group id.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.Consolehelper.SendConsoleCtrlEvent(X.CommLib.Consoles.Consolehelper.CtrlTypes)">
            <summary>
                发送控制台事件 ，只能发送CtrlCEvent/CtrlBreakEvent
            </summary>
            <param name="ctrlType">Type of the CTRL.</param>
        </member>
        <member name="T:X.CommLib.Consoles.Consolehelper.ConsoleCtrlEventArgs">
            <summary>
                控制台退出事件
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.Consolehelper.ConsoleCtrlEventArgs.#ctor(X.CommLib.Consoles.Consolehelper.CtrlTypes)">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Consoles.Consolehelper.ConsoleCtrlEventArgs" /> class.
            </summary>
            <param name="ctrlTypes">The CTRL types.</param>
        </member>
        <member name="M:X.CommLib.Consoles.Consolehelper.ConsoleCtrlEventArgs.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Consoles.Consolehelper.ConsoleCtrlEventArgs" /> class.
            </summary>
        </member>
        <member name="P:X.CommLib.Consoles.Consolehelper.ConsoleCtrlEventArgs.CtrlTypes">
            <summary>
                当前退出控制台的事件原因
            </summary>
            <value>
                The CTRL types.
            </value>
        </member>
        <member name="T:X.CommLib.Consoles.ConsoleMenuCommand">
            <summary>
                菜单命令项
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.ConsoleMenuCommand._commands">
            <summary>
                需要运行的命令
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.ConsoleMenuCommand._title">
            <summary>
                菜单标题
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleMenuCommand.#ctor(System.String,X.CommLib.Consoles.ConsoleCommand[])">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.Consoles.ConsoleMenuCommand"/> class. 使用名称及子项进行初始化</summary>
            <param name="title"></param>
            <param name="commands"></param>
        </member>
        <member name="P:X.CommLib.Consoles.ConsoleMenuCommand.MenuName">
            <summary>
                命令名称
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleMenuCommand.Helper">
            <summary>
                显示一段帮助信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleMenuCommand.RunCommand">
            <summary>
                运行命令
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleMenuCommand.BuildCommandMenu(X.CommLib.Consoles.ConsoleCommand[])">
            <summary>Builds the command menu.</summary>
            <param name="commands">The commands.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">菜单项数据过多</exception>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleMenuCommand.ProcessCommandMenu(X.CommLib.Consoles.ConsoleCommand[])">
            <summary>处理菜单命令，如果需要继续返回true, 退出返回false</summary>
            <param name="commands"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleMenuCommand.ShowCommandsHelper">
            <summary>
                显示帮助
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleMenuCommand.WaitingSelectMenu(System.Collections.Generic.IDictionary{System.Char,X.CommLib.Consoles.ConsoleCommand},System.Char,System.Char)">
            <summary>Waitings the select menu.</summary>
            <param name="cmds">The CMDS.</param>
            <param name="quiteKey">The quite key.</param>
            <param name="helpKey">The help key.</param>
            <returns>返回键入的字母（大写）</returns>
        </member>
        <member name="T:X.CommLib.Consoles.ConsoleNotifyIcon">
            <summary>
                控制台图标
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.ConsoleNotifyIcon.dotShowBalloonTip">
            <summary>
                是否可以显示提示
            </summary>
        </member>
        <member name="P:X.CommLib.Consoles.ConsoleNotifyIcon.Menu">
            <summary>
                点击图标后的弹出菜单
            </summary>
            <value>
                The menu.
            </value>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleNotifyIcon.Show">
            <summary>
                显示状态栏图标
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleNotifyIcon.CreateAndInitBalloonTipLocker(System.Int32)">
            <summary>创建并初始化提示信息锁</summary>
            <param name="interval">The interval.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleNotifyIcon.CreateButton(System.String,System.Drawing.Bitmap)">
            <summary>创建按钮</summary>
            <param name="title">The title.</param>
            <param name="image">The image.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleNotifyIcon.CreateNotifyicon">
            <summary>
            初始化右下角菜单
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleNotifyIcon.ExitButtonOnClick(System.Object,System.EventArgs)">
            <summary>退出当前的控制台程序</summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleNotifyIcon.GetNotifyiconMenu">
            <summary>
                显示状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleNotifyIcon.NotifyIconOnMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>Notifies the icon on mouse move.</summary>
            <param name="sender">The sender.</param>
            <param name="mouseEventArgs">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleNotifyIcon.ShowConsoleButtonOnClick(System.Object,System.EventArgs)">
            <summary>显示或是隐藏控制台</summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ConsoleNotifyIcon.ShowNotifyIcon">
            <summary>
                在线程中显示右下角图标
            </summary>
        </member>
        <member name="T:X.CommLib.Consoles.Label">
            <summary>
                文本输出控件
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.Label._innerPoint">
            <summary>
                输出文字时使用的位置
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.Label.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.Consoles.Label"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:X.CommLib.Consoles.Label.WriteMessage(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>写入信息</summary>
            <param name="message">The message. </param>
            <param name="foregroundColor">Color of the foreground. </param>
            <param name="backgroundColor">Color of the background. </param>
        </member>
        <member name="M:X.CommLib.Consoles.Label.FormatMessage(System.String)">
            <summary>格式化需要输出的文字内容</summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Consoles.ProcessCtrl">
            <summary>
                控制台上显示工作进度条
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.ProcessCtrl._maxStep">
            <summary>
                最大值
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.ProcessCtrl._percentProcessPoint">
            <summary>
                进度条起始位置
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.ProcessCtrl._percentStrPoint">
            <summary>
                百分数位置
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.ProcessCtrl._title">
            <summary>
                标题
            </summary>
        </member>
        <member name="F:X.CommLib.Consoles.ProcessCtrl._percentStep">
            <summary>
                百分比进度
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.ProcessCtrl.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.Consoles.ProcessCtrl"/> class.</summary>
            <param name="title">标题</param>
            <param name="maxStep">最大进度</param>
        </member>
        <member name="M:X.CommLib.Consoles.ProcessCtrl.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.Consoles.ProcessCtrl"/> class. 使用最大值为100进行</summary>
            <param name="title">The title.</param>
        </member>
        <member name="P:X.CommLib.Consoles.ProcessCtrl.MaxValue">
            <summary>
                最大值
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.ProcessCtrl.SetStep(System.Int64,System.Int64)">
            <summary>设置当前进度</summary>
            <param name="current">当前</param>
            <param name="total">The total.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ProcessCtrl.SetStep(System.Int32)">
            <summary>设置进度</summary>
            <param name="step"></param>
        </member>
        <member name="M:X.CommLib.Consoles.ProcessCtrl.CountStepPrecent(System.Int64,System.Int64)">
            <summary>计算当前进度的百分比</summary>
            <param name="curStep"></param>
            <param name="maxVal"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.ProcessCtrl.DrawProgress(System.Drawing.Point,System.Double,System.Char,System.Nullable{System.ConsoleColor})">
            <summary>绘制进度条，输出后控制台当前位置改为新的位置值</summary>
            <param name="processPoint">The process point.</param>
            <param name="precent">The precent.</param>
            <param name="c">The c.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ProcessCtrl.GetProcessString(System.Int32,System.Double,System.Char)">
            <summary>
            返回根据百分比，计算出相应长度的字符串
            </summary>
            <param name="maxLen">字符串最大长度</param>
            <param name="precent">输出字符串的百分比，最大100</param>
            <param name="c">The c.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Consoles.ProcessCtrl.Test">
            <summary>
                内部测试
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.ProcessCtrl.DrawProgress(System.Double,System.Drawing.Point,System.Drawing.Point)">
            <summary>绘制进度</summary>
            <param name="percentStep">当前进度的百分比 </param>
            <param name="titlePoint">标题输出的起始位置 </param>
            <param name="processPoint">进度条输出的起始位置 </param>
        </member>
        <member name="M:X.CommLib.Consoles.ProcessCtrl.DrawTitle(System.String)">
            <summary>画出标题</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:X.CommLib.Consoles.ProcessCtrl.SetTaskBarProgress(System.Double)">
            <summary>在任务栏图标上画出进度, win 7以后的系统才支持该属性</summary>
            <param name="percentStep">The percent step.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:X.CommLib.Consoles.UserAboutException">
            <summary>
            用户中止该进程 
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.UserAboutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.Consoles.UserAboutException" /> class.
            </summary>
        </member>
        <member name="M:X.CommLib.Consoles.UserAboutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.Consoles.UserAboutException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:X.CommLib.Consoles.UserAboutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.Consoles.UserAboutException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:X.CommLib.Consoles.UserAboutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.Consoles.UserAboutException" /> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:X.CommLib.DataBase.DataBaseLockers.BeeXDataLockedBaseConnection`1">
            <summary>
            BeeX的数据读取器
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.BeeXDataLockedBaseConnection`1.#ctor(`0,X.CommLib.DataBase.DataBaseLockers.DataBaseLockerFactory,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dbConnection"></param>
            <param name="baseLockerFactory"></param>
            <param name="createReadLock"></param>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.BeeXDataLockedBaseConnection`1.GetConnection(System.Boolean)">
            <summary>
            返回数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnection">
            <summary>
                返回一个带锁的DBconnection链接
            </summary>
        </member>
        <member name="F:X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnection._baseLocker">
            <summary>
                数据库读写锁
            </summary>
        </member>
        <member name="F:X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnection._dbConnection">
            <summary>
                数据库连接
            </summary>
        </member>
        <member name="F:X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnection._lockerId">
            <summary>
                数据锁编号
            </summary>
        </member>
        <member name="F:X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnection._lockerThreadId">
            <summary>
                锁定时的线程
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnection.#ctor(System.Data.IDbConnection,X.CommLib.DataBase.DataBaseLockers.DataBaseLockerFactory,System.Boolean)">
            <summary>
                创建一个数据连接
            </summary>
            <param name="dbConnection">需要使用的数据连接</param>
            <param name="baseLockerFactory">数据锁生成器</param>
            <param name="createReadLock">使用写锁还是读锁</param>
        </member>
        <member name="P:X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnection.Connection">
            <summary>
                返回当前的数据库连接
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnection.Close">
            <summary>
                关闭所使用的资源
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnection.Finalize">
            <summary>
                析构函数自动生成 Finalize 方法和对基类的 Finalize 方法的调用.默认情况下,一个类是没有析构函数的,也就是说,对象被垃圾回收时不会被调用Finalize方法
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnection.Dispose(System.Boolean)">
            <summary>
                无法被客户直接调用
                如果 disposing 是 true, 那么这个方法是被客户直接调用的,那么托管的,和非托管的资源都可以释放
                如果 disposing 是 false, 那么函数是从垃圾回收器在调用Finalize时调用的,此时不应当引用其他托管对象所以,只能释放非托管资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnection.Dispose">
            <summary>
                可以被客户直接调用
            </summary>
        </member>
        <member name="T:X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnectionFactory`1">
            <summary>
                加锁数据库连接生成器
            </summary>
        </member>
        <member name="F:X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnectionFactory`1._dataBaseLockerFactory">
            <summary>
                数据库同步时使用的读写锁生成器
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnectionFactory`1.CreateConnection">
            <summary>
                由子类创建一个连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnectionFactory`1.CreateConnection(System.Boolean)">
            <summary>
                返回一个连接
            </summary>
            <param name="createReadLock">true:使用读锁锁定，false使用写锁锁定</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnectionFactory`1.RunSql``2(X.CommLib.DataBase.DataBaseTools.RunSqlFunc{``0,`0,``1},System.Boolean,System.Boolean)">
            <summary>
                使用connection运行sql命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TOut"></typeparam>
            <typeparam name="TTransaction"></typeparam>
            <param name="func"></param>
            <param name="readOnly"></param>
            <param name="needTranscation"></param>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnectionFactory`1.RunSQlCommand``3(X.CommLib.DataBase.DataBaseTools.RunSqlCommandFunc{``0,``2},System.Boolean,System.Boolean)">
            <summary>
                使用command运行sql命令
            </summary>
            <typeparam name="TOut"></typeparam>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TTransaction"></typeparam>
            <param name="func"></param>
            <param name="readOnly"></param>
            <param name="needTranscation"></param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.DataBase.DataBaseLockers.DataBaseLocker">
            <summary>
                数据库读取锁包装器
            </summary>
        </member>
        <member name="F:X.CommLib.DataBase.DataBaseLockers.DataBaseLocker.readerWriterLock">
            <summary>
                数据库读写锁
            </summary>
        </member>
        <member name="F:X.CommLib.DataBase.DataBaseLockers.DataBaseLocker.innerThreadId">
            <summary>
                使用锁的线程
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.DataBaseLocker.#ctor(System.Boolean,System.Threading.ReaderWriterLockSlim,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.DataBase.DataBaseLockers.DataBaseLocker"/> class. 
            创建锁辅助对象，并进行锁定
            </summary>
            <param name="getReadLocker">
            true 获取读锁，false 获取写锁
            </param>
            <param name="readerWriterLock">
            数据读写锁
            </param>
            <param name="millisecondsTimeout">
            等待获取锁的时间
            </param>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.DataBaseLocker.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:X.CommLib.DataBase.DataBaseLockers.DataBaseLocker"/> class. 
                析构函数自动生成 Finalize 方法和对基类的 Finalize 方法的调用.默认情况下,一个类是没有析构函数的,也就是说,对象被垃圾回收时不会被调用Finalize方法
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.DataBaseLocker.Close">
            <summary>
                关闭锁
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.DataBaseLocker.Dispose">
            <summary>
                可以被客户直接调用
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.DataBaseLocker.Dispose(System.Boolean)">
            <summary>
            无法被客户直接调用
            如果 disposing 是 true, 那么这个方法是被客户直接调用的,那么托管的,和非托管的资源都可以释放
            如果 disposing 是 false, 那么函数是从垃圾回收器在调用Finalize时调用的,此时不应当引用其他托管对象所以,只能释放非托管资源
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:X.CommLib.DataBase.DataBaseLockers.DataBaseLockerFactory">
            <summary>
                数据库锁生成器
            </summary>
        </member>
        <member name="F:X.CommLib.DataBase.DataBaseLockers.DataBaseLockerFactory.readerWriterLock">
            <summary>
                数据库读写锁
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.DataBaseLockerFactory.CreateDBReaderLock">
            <summary>
                获取一个读锁
            </summary>
            <returns>
                The <see cref="T:X.CommLib.DataBase.DataBaseLockers.DataBaseLocker" />.
            </returns>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.DataBaseLockerFactory.CreateDBWriterLock">
            <summary>
                获取一个写锁
            </summary>
            <returns>
                The <see cref="T:X.CommLib.DataBase.DataBaseLockers.DataBaseLocker" />.
            </returns>
        </member>
        <member name="T:X.CommLib.DataBase.DataBaseLockers.SqliteLockedConnectionFactory">
            <summary>
            Sqlite使用的加锁数据库连接器工厂
            </summary>
        </member>
        <member name="F:X.CommLib.DataBase.DataBaseLockers.SqliteLockedConnectionFactory._connectionString">
            <summary>
            数据库连接使用的字符串
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.SqliteLockedConnectionFactory.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            创建Sqlite加锁数据库连接
            </summary>
            <param name="dbPath"></param>
            <param name="dbPass"></param>
            <param name="autoCreate">是否自动创建数据库</param>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.SqliteLockedConnectionFactory.CreateConnection">
            <summary>
            由子类创建一个连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.SqliteLockedConnectionFactory.RunSql``1(X.CommLib.DataBase.DataBaseTools.RunSqlFunc{``0,System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction},System.Boolean,System.Boolean)">
            <summary>
            使用connection运行sql命令
            </summary>
            <typeparam name="TOut"></typeparam>
            <param name="func"></param>
            <param name="readOnly"></param>
            <param name="needTranscation"></param>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseLockers.SqliteLockedConnectionFactory.RunSQlCommand``1(X.CommLib.DataBase.DataBaseTools.RunSqlCommandFunc{``0,System.Data.SQLite.SQLiteCommand},System.Boolean,System.Boolean)">
            <summary>
            使用command运行sql命令
            </summary>
            <typeparam name="TOut"></typeparam>
            <param name="func"></param>
            <param name="readOnly"></param>
            <param name="needTranscation"></param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.DataBase.DataBaseTools">
            <summary>
              输出表结构信息
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseTools.NeedOpenConnection(System.Data.IDbConnection)">
            <summary>
              是否需要打开数据库，并在使用完成后关闭
            </summary>
            <param name = "connection"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseTools.NeedOpenConnection(System.Data.ConnectionState)">
            <summary>
              当前的数据库连接状态是否需要打开
            </summary>
            <param name = "connectionState"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseTools.GetTableColumnInfos(System.Data.Common.DbConnection,System.String)">
            <summary>
              输出某个表的所有列的信息
            </summary>
            <param name = "conn"></param>
            <param name = "tableName"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseTools.UserColumnIsExist(System.Data.Common.DbConnection,System.String,System.String)">
            <summary>
              指定的列是否存在
            </summary>
            <param name = "conn"></param>
            <param name = "tableName"></param>
            <param name = "columnName"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseTools.GetUserTableNames(System.Data.Common.DbConnection)">
            <summary>
              返回所有的用户表名称
            </summary>
            <param name = "conn"></param>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseTools.UserTableIsExist(System.Data.Common.DbConnection,System.String)">
            <summary>
              用户表是否存在
            </summary>
            <param name = "conn">需要先打开</param>
            <param name = "tableName"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseTools.GenerateCreateIndexSql(System.String,System.String,System.String[])">
            <summary>
              创建一个创建索引的sql语法
            </summary>
            <param name = "idxName"></param>
            <param name = "tableName"></param>
            <param name = "columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseTools.UserIndexIsExist(System.Data.Common.DbConnection,System.String)">
            <summary>
              用户索引是否存在
            </summary>
            <param name = "conn">需要先打开</param>
            <param name = "indexName"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseTools.OutputDBSchema(System.Data.Common.DbConnection)">
            <summary>
              输出表结构
            </summary>
            <param name = "dbConnection"></param>
        </member>
        <member name="T:X.CommLib.DataBase.DataBaseTools.RunSqlCommandFunc`2">
            <summary>
              sql运行函数定义
            </summary>
            <typeparam name = "T"></typeparam>
            <typeparam name = "TCommand"></typeparam>
            <param name = "command"></param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.DataBase.DataBaseTools.RunSqlFunc`3">
            <summary>
              运行connection命令的回调函数定义
            </summary>
            <param name = "connection"></param>
            <param name = "transaction"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseTools.RunSql``3(``1,X.CommLib.DataBase.DataBaseTools.RunSqlFunc{``0,``1,``2},System.Boolean)">
            <summary>
              运行一个sql连接命令
            </summary>
            <typeparam name = "TOut">返回值的类型</typeparam>
            <typeparam name = "TConnection">数据库连接类型</typeparam>
            <typeparam name = "TTransaction">数据库操作事务类型</typeparam>
            <param name = "connection">当前使用的数据库连接</param>
            <param name = "func">数据库操作的回调函数</param>
            <param name = "needTranscation">是否需要启用事务</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseTools.RunSql``3(X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnectionFactory{``1},X.CommLib.DataBase.DataBaseTools.RunSqlFunc{``0,``1,``2},System.Boolean,System.Boolean)">
            <summary>
              使用connection运行sql命令
            </summary>
            <typeparam name = "TConnection">数据库连接类型</typeparam>
            <typeparam name = "TOut">返回值的类型</typeparam>
            <typeparam name = "TTransaction">数据库操作事务类型</typeparam>
            <param name = "connection">当前使用的数据库连接</param>
            <param name = "func">数据库操作的回调函数</param>
            <param name = "readOnly">使用读锁还是写锁</param>
            <param name = "needTranscation">是否需要启用事务</param>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseTools.RunSqlCommand``4(X.CommLib.DataBase.DataBaseLockers.DataBaseLockedConnectionFactory{``1},X.CommLib.DataBase.DataBaseTools.RunSqlCommandFunc{``0,``3},System.Boolean,System.Boolean)">
            <summary>
              使用带锁的连接器运行一个命令，并返回最后一个sql函数的返回值
            </summary>
            <typeparam name = "T">返回值</typeparam>
            <typeparam name = "TConnection"></typeparam>
            <typeparam name = "TCommand"></typeparam>
            <typeparam name = "TTransaction"></typeparam>
            <param name = "connection"></param>
            <param name = "func"></param>
            <param name = "readOnly"></param>
            <param name = "needTranscation"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseTools.RunSqlCommand``3(``1,X.CommLib.DataBase.DataBaseTools.RunSqlCommandFunc{``0,``2},System.Boolean)">
            <summary>
              创建一个sqlcomd命令并运行
            </summary>
            <typeparam name = "T"></typeparam>
            <typeparam name = "TConnection"></typeparam>
            <typeparam name = "TCommand"></typeparam>
            <param name = "connection"></param>
            <param name = "func"></param>
            <param name = "needTransaction"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.DataBaseTools.RunSqlCommand``4(``1,X.CommLib.DataBase.DataBaseTools.RunSqlCommandFunc{``0,``3},``2)">
            <summary>
              创建一个sqlcommand并运行
            </summary>
            <typeparam name = "TOut"></typeparam>
            <typeparam name = "TConnection"></typeparam>
            <typeparam name = "TTransaction"></typeparam>
            <typeparam name = "TCommand"></typeparam>
            <param name = "connection"></param>
            <param name = "transaction"></param>
            <param name = "func"></param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.DataBase.ISqlTools">
            <summary>
            sql 工具
            </summary>
        </member>
        <member name="T:X.CommLib.DataBase.MySqlTools">
            <summary>
              mysql 工具
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.MySqlTools.Test">
            <summary>
              进行测试
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.MySqlTools.UpdateDataTable(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.DataColumn[])">
            <summary>
              Updates the data table.
            </summary>
            <param name="conn"> The conn. </param>
            <param name="tableName"> Name of the table. </param>
            <param name="columns"> The columns. </param>
        </member>
        <member name="M:X.CommLib.DataBase.MySqlTools.DataTableIsExist(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
              表是否存在
            </summary>
            <param name="conn"> The conn. </param>
            <param name="tableName"> Name of the table. </param>
        </member>
        <member name="M:X.CommLib.DataBase.MySqlTools.AutoCreateDataTable(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.DataColumn[],System.String[],System.String,System.String)">
            <summary>
              创建数据表，如果表已经存在则进行更新
            </summary>
            <param name="conn"> The conn. </param>
            <param name="tableName"> Name of the table. </param>
            <param name="columns"> The columns. </param>
            <param name="primaryKeys"> The primary keys. </param>
            <param name="engine"> The engine. </param>
            <param name="charset"> The charset. </param>
        </member>
        <member name="M:X.CommLib.DataBase.MySqlTools.CreateDataTable(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.DataColumn[],System.String[],System.String,System.String)">
            <summary>
              创建表
            </summary>
            <param name="conn"> The conn. </param>
            <param name="tableName"> 表名. </param>
            <param name="columns"> 表中的列. </param>
            <param name="primaryKeys"> The primary keys. </param>
            <param name="engine"> The engine. </param>
            <param name="charset"> The charset. </param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:X.CommLib.DataBase.MySqlTools.CreateDataTable(System.Data.Common.DbConnection,System.String,System.Data.DataColumn[],System.String[])">
            <summary>
              创建数据库连接
            </summary>
            <param name="conn"> The conn. </param>
            <param name="tableName"> Name of the table. </param>
            <param name="columns"> The columns. </param>
            <param name="primaryKeys"> The primary keys. </param>
        </member>
        <member name="M:X.CommLib.DataBase.MySqlTools.CreateAutoIncrementDataColumn(System.String)">
            <summary>
              创建自增加列
            </summary>
            <param name="name"> The dataid. </param>
            <returns> </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:X.CommLib.DataBase.MySqlTools.CreateConnectionStringBuilde(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.UInt32})">
            <summary>
            创建连接对象
            </summary>
            <param name="server">The server.</param>
            <param name="database">The database.</param>
            <param name="id">The id.</param>
            <param name="pass">The pass.</param>
            <param name="charset">The charset.</param>
            <param name="port">The port.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.MySqlTools.CreateSqlConnection(System.String,System.String,System.String,System.String,System.String)">
            <summary>
              创建数据库连接
            </summary>
            <param name="server"> The server. </param>
            <param name="database"> The database. </param>
            <param name="id"> The id. </param>
            <param name="pass"> The pass. </param>
            <param name="charset"> The charset. </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.DataBase.MySqlTools.CreateSqlConnectionFromConfig(System.String)">
            <summary>
              从配置文件中读取连接数据并创建数据库连接
            </summary>
            <param name="connName"> Name of the conn. </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.DataBase.MySqlTools.CreateSqlConnection(System.String)">
            <summary>
              创建数据库连接
            </summary>
            <returns> </returns>
        </member>
        <member name="T:X.CommLib.DataBase.OleDataBaseHelper">
            <summary>
                ole 数据库操作辅助类
            </summary>
        </member>
        <member name="P:X.CommLib.DataBase.OleDataBaseHelper.DefaultProvider">
            <summary>
                返回默认的服务提供器，如果不存在返回null
            </summary>
            <value>
                The default provider.
            </value>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.CreateConnection(System.String,System.String)">
            <summary>
                创建数据库连接对象
            </summary>
            <param name="dbPath">数据文件路径</param>
            <param name="provider">数据库提供程序，如果未来设置则自动选择access引擎</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.CreateAccessDataBase(System.String,System.Boolean,System.String)">
            <summary>
                创建access数据库文件
            </summary>
            <param name="dbPath">数据库文件的路径</param>
            <param name="overWrite">如果指定的路径已经存在是否覆盖</param>
            <param name="provider">数据库提供程序，如果未来设置则自动选择access引擎 </param>
            <exception cref="T:System.IO.FileLoadException"></exception>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.GetAccessConectStr(System.String,System.String)">
            <summary>
                输入一个路径，返回Acess数据库的连接路径
            </summary>
            <param name="dbPath"> The db path. </param>
            <param name="provider"> 数据提供器，如果未设置则自动选择当前的access引擎</param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.GetExcelConnectionString(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                创建access文件
            </summary>
            <param name="filePath">文件路径.</param>
            <param name="excelVer">对应的excel文件版本.</param>
            <param name="provider">数据引擎.</param>
            <param name="header">第一行是否是表头</param>
            <param name="readasTxt">是否将数据以字符格式进行处理</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">无法定位本机支持的access版本</exception>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.IsAccessAceEnagineProvider(System.String)">
            <summary>
                是不是access ace 引擎
            </summary>
            <param name="provider">The provider.</param>
            <returns>
                <c>true</c> if [is access ace enagine provider] [the specified provider]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.IsAccessJetEnagineProvider(System.String)">
            <summary>
                是不是jet 引擎
            </summary>
            <param name="provider">The provider.</param>
            <returns>
                <c>true</c> if [is jet engine] [the specified provider]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.UserColumnIsExist(System.Data.OleDb.OleDbConnection,System.String,System.String)">
            <summary>
                指定的列是否存在
            </summary>
            <param name="conn"> </param>
            <param name="tableName"> </param>
            <param name="columnName"> </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.UserTableIsExist(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
                用户表是否存在
            </summary>
            <param name="conn"> 需要先打开 </param>
            <param name="tableName"> </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.UserIndexIsExist(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
                用户索引是否存在
            </summary>
            <param name="conn"> 需要先打开 </param>
            <param name="indexName"> </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.OutputDBSchema(System.String)">
            <summary>
                输出表结构
            </summary>
            <param name="connStr"> </param>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.InitInsertSql(System.Data.OleDb.OleDbCommand,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                设置插入函数
            </summary>
            <param name="cmd">The CMD.</param>
            <param name="tableName">Name of the table.</param>
            <param name="values">The values.</param>
            <exception cref="T:System.ArgumentException">没有指定需要插入的数值;values</exception>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.ExecuteSqlCommands(System.Data.OleDb.OleDbConnection,System.String[],System.Boolean)">
            <summary>
                在指定的连接上运行一组sql命令
            </summary>
            <param name="conn"> </param>
            <param name="sqls"> </param>
            <param name="enableTransaction"> 是否开启事务 </param>
        </member>
        <member name="T:X.CommLib.DataBase.OleDataBaseHelper.ExecuteSqlException">
            <summary>
                运行sql时发生错误
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.ExecuteSqlException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.ExecuteSqlException.#ctor(System.String,System.String)">
            <summary>
            </summary>
            <param name="message"> </param>
            <param name="sqlcommand"> </param>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.ExecuteSqlException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            </summary>
            <param name="message"> </param>
            <param name="sqlcommand"> </param>
            <param name="inner"> </param>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.ExecuteSqlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <param name="info"> </param>
            <param name="context"> </param>
        </member>
        <member name="P:X.CommLib.DataBase.OleDataBaseHelper.ExecuteSqlException.Sqlcommand">
            <summary>
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.TestGetSupportedProviders">
            <summary>
                测试获取支持的引擎列表
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.OleDataBaseHelper.GetSupportedProviders">
            <summary>
                返回当前支持的access数据库引擎类型
            </summary>
            <returns> </returns>
        </member>
        <member name="T:X.CommLib.DataBase.SqliteDbCreater">
            <summary>
              sql工具
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.Test">
            <summary>
            进行测试
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.CreateTable(System.Data.Common.DbConnection,System.String,System.Data.DataColumn[],System.String[])">
            <summary>
              指定列数组创建数据表
            </summary>
            <param name="connection"> 创建表的数据库连接 </param>
            <param name="tableName"> 表名 </param>
            <param name="columns"> 表中的列 </param>
            <param name="primaryKeyNames"> 列主键，如果不需要返回false </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.CreateOrUpdateTable(System.Data.Common.DbConnection,System.String,System.Data.DataColumn[],System.String[])">
            <summary>
            创建或更新一个表
            </summary>
            <param name="connection">The connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="columns">The columns.</param>
            <param name="primaryKeyNames">The primary key names.</param>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.CreateTable(System.Data.Common.DbConnection,System.String,System.String)">
            <summary>
              检测并创建表，如果表不存在则新建，如果存在则路过
            </summary>
            <param name="connection"> </param>
            <param name="tableName"> </param>
            <param name="createSql"> </param>
            <returns> 如果创建了表返回true，如果表已经存在返回false，错误抛出异常 </returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.ExecuteScalar(System.Data.Common.DbConnection,System.String)">
            <summary>
              运行sql命令
            </summary>
            <param name="connection"> </param>
            <param name="sqlCommand"> </param>
            <returns> 返回受影响的行数 </returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.CreateIndex(System.Data.Common.DbConnection,System.String,System.String)">
            <summary>
              创建数据库索引
            </summary>
            <param name="connection"> </param>
            <param name="indexName"> </param>
            <param name="createIndexSql"> </param>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.GenerateCreateIndexSql(System.String,System.String,System.String[])">
            <summary>
              创建索引语法
            </summary>
            <param name="idxName"> </param>
            <param name="tableName"> </param>
            <param name="columnNames"> </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.GetLastInsertRowId(System.Data.Common.DbConnection)">
            <summary>
              返回sqllist中最后插入的自动ID
            </summary>
            <param name="connection"> </param>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.CreateDataBase(System.String,System.String)">
            <summary>
            创建一个sqlite数据库文件
            </summary>
            <param name="filePath"></param>
            <param name="pass"></param>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.CreateConnection(System.String,System.String,System.Boolean)">
            <summary>
            创建一个数据库连接
            </summary>
            <param name="filePath">数据库的路径</param>
            <param name="pass">密码库可选的密码</param>
            <param name="autoCreate">如果数据库不存在是否自动创建</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.ChangePass(System.String,System.String,System.String)">
            <summary>
            改变sqlite的密码
            </summary>
            <param name="filePath">The file path.</param>
            <param name="pass">The pass.</param>
            <param name="oldPass">The old pass.</param>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.ChangePass(System.Data.SQLite.SQLiteConnection,System.String)">
            <summary>
                改变sqlite的密码
            </summary>
            <param name="connection">The connection.</param>
            <param name="pass">The pass.</param>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.GetSqliteDataType(System.Type)">
            <summary>
            返回指定类型对应的slqite数据格式
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.EscapeString(System.String)">
            <summary>
            对sqlite中的字符进行转义
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.UpdateTableColumns(System.Data.Common.DbConnection,System.String,System.Data.DataColumn[])">
            <summary>
              更新指定表的列信息，目前为当列不存在时进行添加操作
            </summary>
            <param name="connection"> </param>
            <param name="table"> </param>
            <param name="columns"> </param>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.GenerateAddColumnsSql(System.Data.DataColumn[],System.String)">
            <summary>
              根据列信息生成增加列的语句
            </summary>
            <param name="columns"> </param>
            <param name="tableName"> </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.GenerateCreateColumnsSql(System.Data.DataColumn[],System.String[])">
            <summary>
              将指定的列信息转为创建table的语句
            </summary>
            <param name="columns"> </param>
            <param name="primaryKeyNames"> 可能存在的主键 </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.GenerateCreatePrimaryKeySql(System.String[])">
            <summary>
              创建语句的sql语法
            </summary>
            <param name="primaryKeyNames"> </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.GenerateDataColumn(System.String,System.Type,System.Object,System.Boolean,System.Boolean)">
            <summary>
              创建一个数据列
            </summary>
            <param name="columnName"> </param>
            <param name="columnType"> 数据列的类型 ,会进行一定的转型 </param>
            <param name="defValue"> </param>
            <param name="unique"> </param>
            <param name="autoIncrement"> </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.GenerateAutoincrementDataColumn(System.String)">
            <summary>
              创建一个自增的列
            </summary>
            <param name="columnName"> </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.GenerateCreateColumnSql(System.Data.DataColumn)">
            <summary>
              将指定的列信息转为创建table的语句
            </summary>
            <param name="column"> </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteDbCreater.GetNotExistDataColumns(System.Data.Common.DbConnection,System.String,System.Data.DataColumn[])">
            <summary>
              返回指定的table不存在的列属性
            </summary>
            <param name="connection"> </param>
            <param name="table"> </param>
            <param name="columns"> </param>
            <returns> </returns>
        </member>
        <member name="T:X.CommLib.DataBase.SqlExpressHelper">
            <summary>
                sql express 辅助函数
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.SqlExpressHelper.CreateDataBase(System.String,System.String)">
            <summary>
                创建一个数据库
            </summary>
            <param name="dbFileName">数据库名称，不带后缀</param>
            <param name="dbDir">数据库文件保存目录</param>
        </member>
        <member name="T:X.CommLib.DataBase.SqliteHelper">
            <summary>
                sqlite数据库操作协助类
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteHelper.GetSqliteDataType(System.Type)">
            <summary>
                返回指定的类型在sqlite中的存储类型
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteHelper.CreateConnection(System.String,System.String,System.Boolean)">
            <summary>
                创建一个Sqlite数据库连接
            </summary>
            <param key="filePath"> 数据库文件路径 </param>
            <param key="pass"> 数据库密码 </param>
            <param key="autoCreate"> 如果数据库文件不存在，则自动创建 </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteHelper.CreateDataBase(System.String,System.String)">
            <summary>
                创建一个sqlite数据库
            </summary>
            <param key="filePath"> 数据库文件的路径，含文件名 </param>
            <param key="pass"> 数据库的密码 </param>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteHelper.GetLastInsertId(System.Data.SQLite.SQLiteConnection)">
            <summary>
                返回最后一次插入的编号
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteHelper.InitInsertSql(System.Data.SQLite.SQLiteCommand,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                设置插入函数
            </summary>
            <param name="cmd">The CMD.</param>
            <param name="tableName">Name of the table.</param>
            <param name="values">The values.</param>
            <exception cref="T:System.ArgumentException">没有指定需要插入的数值;values</exception>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteHelper.ReadDataString(System.Data.Common.DbDataReader,System.String,System.String)">
            <summary>
                读取读取器的字符值
            </summary>
            <param name="reader">The reader.</param>
            <param name="key">The key.</param>
            <param name="defVal">The def val.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqliteHelper.ReadDataValue``1(System.Data.Common.DbDataReader,System.String,``0)">
            <summary>
                读取读取器中的指定类型值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="key">The key.</param>
            <param name="defVal">The def val.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.DataBase.SqlTools">
            <summary>
              sql 工具
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.SqlTools.CreateDataColumn(System.String,System.Type,System.Object,System.Boolean,System.Nullable{System.Int32},System.Boolean)">
            <summary>
              创建数据列
            </summary>
            <param name="name"> The name. </param>
            <param name="dataType"> Type of the data. </param>
            <param name="defaultValue"> The default value. </param>
            <param name="allowDbNull"> if set to <c>true</c> [allow DB null]. </param>
            <param name="length"> The length. </param>
            <param name="unique"> if set to <c>true</c> [unique]. </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqlTools.CreateCreateIndex(System.Data.Common.DbConnection,System.String,System.String,System.String[])">
            <summary>
              创建数据索引，如果已经存在，则不创建
            </summary>
            <param name="conn"> The conn. </param>
            <param name="idxName"> Name of the idx. </param>
            <param name="tableName"> Name of the table. </param>
            <param name="columnNames"> The column names. </param>
        </member>
        <member name="M:X.CommLib.DataBase.SqlTools.CreateDataTable(System.Data.Common.DbConnection,System.String,System.Data.DataColumn[],System.String[])">
            <summary>
              创建数据库连接
            </summary>
            <param name="conn"> The conn. </param>
            <param name="tableName"> Name of the table. </param>
            <param name="columns"> The columns. </param>
            <param name="primaryKeys"> The primary keys. </param>
        </member>
        <member name="M:X.CommLib.DataBase.SqlTools.ReadDataString(System.Data.Common.DbDataReader,System.String,System.String)">
            <summary>
                读取读取器的字符值
            </summary>
            <param name="reader">The reader.</param>
            <param name="key">The key.</param>
            <param name="defVal">The def val.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqlTools.ReadDataValue``1(System.Data.Common.DbDataReader,System.String,``0)">
            <summary>
                读取读取器中的指定类型值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="key">The key.</param>
            <param name="defVal">The def val.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqlTools.ReadDataValue``1(System.Data.Common.DbDataReader,System.Int32,``0)">
            <summary>
                从datareader 中读取指定序列的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="ordinal">The ordinal.</param>
            <param name="defVal">The def val.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqlTools.UpdateData(System.Data.Common.DbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Common.DbTransaction)">
            <summary>
              在指定的表中更新值
            </summary>
            <param name="conn"> The conn. </param>
            <param name="tableName"> Name of the table. </param>
            <param name="values"> The values. </param>
            <param name="where"> The where. </param>
            <param name="transaction"> The transaction. </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.DataBase.SqlTools.InsertData(System.Data.Common.DbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Common.DbTransaction)">
            <summary>
              插入一批值至数据表中
            </summary>
            <param name="conn"> The conn. </param>
            <param name="tableName"> Name of the table. </param>
            <param name="values"> The values. </param>
            <param name="transaction"> </param>
            <returns> </returns>
        </member>
        <member name="T:X.CommLib.DataBase.XBeeTester">
            <summary>
            
            </summary>
        </member>
        <member name="M:X.CommLib.DataBase.XBeeTester.Test">
            <summary>
            
            </summary>
        </member>
        <member name="T:X.CommLib.DbTools.AccessDataType">
            <summary>
            Access 数据列信息
            </summary>
            <value>
            The type of the access data.
            </value>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.Unknow">
            <summary>
                未知的数据类型
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.BigInt">
            <summary>
            The BigInt
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.Binary">
            <summary>
            The Binary
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.Boolean">
            <summary>
            The Boolean
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.Char">
            <summary>
            The Char
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.Currency">
            <summary>
            The Currency
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.Date">
            <summary>
            The Date
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.DBTimeStamp">
            <summary>
            The DBTimeStamp
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.Decimal">
            <summary>
            The Decimal
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.Double">
            <summary>
            The Double
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.Guid">
            <summary>
            The GUID
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.Dispatch">
            <summary>
            The IDispatch
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.Integer">
            <summary>
            The Integer
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.LongVarBinary">
            <summary>
            The LongVarBinary
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.LongVarChar">
            <summary>
            The LongVarChar
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.LongVarWChar">
            <summary>
            The LongVarWChar
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.Numeric">
            <summary>
            The Numeric
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.Single">
            <summary>
            The Single
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.SmallInt">
            <summary>
            The SmallInt
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.UnsignedTinyInt">
            <summary>
            The UnsignedTinyInt
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.VarBinary">
            <summary>
            The VarBinary
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.VarChar">
            <summary>
            The VarChar
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.Variant">
            <summary>
            The Variant
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.VarWChar">
            <summary>
            The VarWChar
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.AccessDataType.WChar">
            <summary>
            The WChar
            </summary>
        </member>
        <member name="T:X.CommLib.DbTools.AccessTableColumnInfo">
            <summary>
                access 数据列信息
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.AccessTableColumnInfo.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.DbTools.AccessTableColumnInfo" /> class.
            </summary>
            <param name="name">数据列的名称</param>
            <param name="type">数据列的类型</param>
        </member>
        <member name="P:X.CommLib.DbTools.AccessTableColumnInfo.DataType">
            <summary>
                access 形式的数据类型
            </summary>
            <value>
                The type of the data.
            </value>
        </member>
        <member name="T:X.CommLib.DbTools.SqliteDataManager">
            <summary>
                sqlite 数据库管理的基类
                内置了一个读写锁
                基于一个 sqlite 文件的数据文件
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.SqliteDataManager.GlobalLockSlim">
            <summary>
                全局锁
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.SqliteDataManager.dataBasePath">
            <summary>
                数据库文件的路径
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManager.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.DbTools.SqliteDataManager"/> class. 
            使用指定的读写锁进行初始化
                如果没有指定锁，则使用全局唯一读写锁
            </summary>
            <param name="lockSlim">
            The lock slim.
            </param>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManager.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.DbTools.SqliteDataManager"/> class. 
            指定是否使用全局锁定锁进行初始化
            </summary>
            <param name="useGlobalLock">
            if set to <c>true</c> [new lock].
            </param>
        </member>
        <member name="P:X.CommLib.DbTools.SqliteDataManager.DataBasePath">
            <summary>
                数据库文件的路径
            </summary>
            <value>
                The data base path.
            </value>
        </member>
        <member name="F:X.CommLib.DbTools.SqliteDataManager.dataPassword">
            <summary>
            数据库文件对应的密码
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManager.Load(System.String,System.String)">
            <summary>
            Loads the specified dbpath.
            </summary>
            <param name="dbpath">The dbpath.</param>
            <param name="password">数据库对应的密码.</param>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManager.OpenConnection(System.String,System.String,System.Boolean)">
            <summary>
            打开数据链接
            </summary>
            <param name="dbpath">The database path.</param>
            <param name="password">The password.</param>
            <param name="open">是否打开该数据库</param>
            <returns>The <see cref="T:System.Data.SQLite.SQLiteConnection" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManager.TrySetValues``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Nullable{``0})">
            <summary>
            尝试将value设置到values 中，如果value为null则跳过
            </summary>
            <typeparam name="T">
            属性值
            </typeparam>
            <param name="values">
            The values.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManager.TrySetValues(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            尝试将value设置到values 中，如果value为null则跳过
            </summary>
            <param name="values">
            The values.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManager.GetConnection">
            <summary>
            返回一个未被打开的数据库连接
            </summary>
            <returns>
            The <see cref="T:System.Data.SQLite.SQLiteConnection"/>.
            </returns>
        </member>
        <member name="T:X.CommLib.DbTools.SqliteDataManagerBase">
            <summary>
                sqlite 数据库管理的基类
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.SqliteDataManagerBase.LockSlim">
            <summary>
                当前使用的读写锁
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManagerBase.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
                使用指定的读写锁进行初始化
                如果没有指定锁，则使用全局唯一读写锁
            </summary>
            <param name="lockSlim">读写锁，如果传入 null，则自动生成一个</param>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManagerBase.CleanTables(System.String[])">
            <summary>清空指定的数据表</summary>
            <param name="tableNames">The table Names.</param>
            <returns>The <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManagerBase.EnterWriteLock">
            <summary>
                进入写锁
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManagerBase.ExitWriteLock">
            <summary>
                退出写锁
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManagerBase.EnterReadLock">
            <summary>
                进入读锁
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManagerBase.ExitReadLock">
            <summary>
                退出读锁
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManagerBase.ExecuteConnection``1(System.Func{System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction,``0},System.Boolean)">
            <summary>Executes the connection.</summary>
            <typeparam name="T">返回数据类型</typeparam>
            <param name="func">The function.</param>
            <param name="isReadonly">if set to <c>true</c> [is readonly].</param>
            <returns>The <see>
                    <cref>T</cref>
                </see>
                .</returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManagerBase.InitDataBase(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
            <summary>进行数据库初始化</summary>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManagerBase.QueryConnection``1(System.Func{System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction,``0},System.Boolean)">
            <summary>进行一次查询操作.</summary>
            <typeparam name="T">返回参数类型</typeparam>
            <param name="func">The function.</param>
            <param name="isReadonly">if set to <c>true</c> [is readonly].</param>
            <returns>The <see>
                    <cref>T</cref>
                </see>
                .</returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManagerBase.InitDb">
            <summary>
                进行数据库初始化
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManagerBase.OpenConnection">
            <summary>返回一个被打开的数据库连接</summary>
            <returns>The <see cref="T:System.Data.SQLite.SQLiteConnection" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDataManagerBase.GetConnection">
            <summary>
                返回一个未被打开的数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.DbTools.SqliteMemoryDataManager">
            <summary>
                内存数据库
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteMemoryDataManager.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.DbTools.SqliteMemoryDataManager"/> class.
            </summary>
            <param name="lockSlim">
            读写锁，如果传入 null，则自动生成一个
            </param>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteMemoryDataManager.Load">
            <summary>
                将数据库载入到内存
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteMemoryDataManager.GetConnection">
            <summary>
            返回一个未被打开的数据库连接
            </summary>
            <returns>
            The <see cref="T:System.Data.SQLite.SQLiteConnection"/>.
            </returns>
        </member>
        <member name="T:X.CommLib.DbTools.SqliteSettingManager">
            <summary>
                sqlite 设置管理器
            </summary>
        </member>
        <member name="F:X.CommLib.DbTools.SqliteSettingManager.settingTable">
            <summary>
                设置表名
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteSettingManager.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
                使用指定的读写锁进行初始化
                如果没有指定锁，则使用全局唯一读写锁
            </summary>
            <param name="lockSlim">The lock slim.</param>
        </member>
        <member name="P:X.CommLib.DbTools.SqliteSettingManager.SettingTable">
            <summary>
                设置表名
            </summary>
            <value>
                The setting table.
            </value>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteSettingManager.InitDataBase(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
            <summary>
                进行数据库初始化
            </summary>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteSettingManager.SetValue(System.String,System.Object)">
            <summary>
                添加或修改一个指定 key 的值
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteSettingManager.SetValues(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                添加或修改一个指定 key 的值
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteSettingManager.FormatValue(System.Object)">
            <summary>
                Formats the value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteSettingManager.GetValue``1(System.String,``0)">
            <summary>
                返回指定 key 的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteSettingManager.GetStringValue(System.String)">
            <summary>
                返回指定 key 的字符格式的值，值在内部使用字符串形式保存
                如果 key 不存在，返回 null
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteSettingManager.InnerSetValue(System.Object,System.String)">
            <summary>
                添加或修改一个指定 key 的值
            </summary>
            <param name="value">The value.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteSettingManager.InnerGetValue``1(``0,System.String)">
            <summary>
                返回指定 key 的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">The default value.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.DbTools.TableColumnInfo">
            <summary>
                数据表的列
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.TableColumnInfo.#ctor(System.String,System.String)">
            <summary>
            </summary>
            <param name="name">数据列的名称</param>
            <param name="type">数据列的类型</param>
        </member>
        <member name="P:X.CommLib.DbTools.TableColumnInfo.Name">
            <summary>
                数据列的名称
            </summary>
        </member>
        <member name="P:X.CommLib.DbTools.TableColumnInfo.Type">
            <summary>
                数据列的类型
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.TableColumnInfo.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.DbTools.DbHelper">
            <summary>
                数据库工具
            </summary>
        </member>
        <member name="T:X.CommLib.DbTools.DbHelper.RunSqlCommandHandle`1">
            <summary>运行sql 命令的回调函数</summary>
            <typeparam name="T"></typeparam>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.CreateDbHelperFromConfig(System.String,System.String)">
            <summary>Creates the db helper from config.</summary>
            <param name="connName">Name of the conn.</param>
            <param name="configPath">The config path.</param>
            <returns>The <see cref="T:X.CommLib.DbTools.DbHelper" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.CreateDbHelperFromProviderName(System.String)">
            <summary>Creates the name of the db helper from provider.</summary>
            <param name="providerName">Name of the provider.</param>
            <returns>The <see cref="T:X.CommLib.DbTools.DbHelper" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.ShowUserTableInfo(System.String,System.Data.DataTable)">
            <summary>在输出窗口输出table内容</summary>
            <param name="title"></param>
            <param name="dataTable"></param>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.TableHasData(System.Data.Common.DbConnection,System.String,System.Data.Common.DbTransaction)">
            <summary>
                指定表是否包括数据
            </summary>
            <param name="connection">The connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="transaction">The transaction.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.CleanTable(System.Data.Common.DbConnection,System.String)">
            <summary>清空表数据</summary>
            <param name="connection">The connection.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.CreateAutoincrementDataColumn(System.String)">
            <summary>创建一个自增列</summary>
            <param name="columnName">Name of the column.</param>
            <returns>The <see cref="T:System.Data.DataColumn" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.CreateConnectionFromConfig(System.String,System.String)">
            <summary>从配置文件中创建数据库连接</summary>
            <param name="connName">Name of the conn.</param>
            <param name="configPath">The config path.</param>
            <returns>The <see cref="T:System.Data.Common.DbConnection" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.CreateUniqueDataColumn(System.String,System.Type,System.Boolean)">
            <summary>
                创建一个唯一值列的列对象
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="columnType">Type of the column.</param>
            <param name="autoIncrement">if set to <c>true</c> [automatic increment].</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.CreateDataColumn(System.String,System.Type,System.Object,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>根据参数创建列对象.</summary>
            <param name="columnName">Name of the column.</param>
            <param name="columnType">Type of the column.</param>
            <param name="defaultValue">The def value.</param>
            <param name="allowDbNull">if set to <c>true</c> [allow db null].</param>
            <param name="maxLenght">The length.</param>
            <param name="unique">if set to <c>true</c> [unique].</param>
            <param name="autoIncrement">if set to <c>true</c> [auto increment].</param>
            <returns>The <see cref="T:System.Data.DataColumn" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.CreateIndex(System.Data.Common.DbConnection,System.String,System.String,System.String[],System.Data.Common.DbTransaction)">
            <summary>为数据库创建索引,此为唯一索引</summary>
            <param name="connection">The db connection.</param>
            <param name="indexName">Name of the index.</param>
            <param name="tableName">Name of the table.</param>
            <param name="columnNames">The column names.</param>
            <param name="transaction">The transaction.</param>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.CreateIndex(System.Data.Common.DbConnection,System.String,System.String,System.String[],System.Boolean,System.Data.Common.DbTransaction)">
            <summary>为数据库创建索引</summary>
            <param name="connection">The connection.</param>
            <param name="indexName">Name of the index.</param>
            <param name="tableName">Name of the table.</param>
            <param name="columnNames">The column names.</param>
            <param name="unique">if set to <c>true</c> [unique].</param>
            <param name="transaction">The transaction.</param>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.CreateOrUpdateTable(System.Data.Common.DbConnection,System.String,System.Data.DataColumn[],System.String[],System.Data.Common.DbTransaction)">
            <summary>创建或是更新数据表</summary>
            <param name="connection">The connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="columns">The columns.</param>
            <param name="primaryKeyNames">The primary key names.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.CreateTable(System.Data.Common.DbConnection,System.String,System.Data.DataColumn[],System.String[],System.String,System.Data.Common.DbTransaction)">
            <summary>创建数据表</summary>
            <param name="connection">The connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="columns">The columns.</param>
            <param name="primaryKeyNames">The primary key names.</param>
            <param name="attachContent">附加在创建sql语句后面的内容.</param>
            <param name="transaction">The transaction.</param>
            <returns>如果成功创建数据库返回true，不用创建加返回false， 数据库创建失败抛出异常</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.DeleteTableData(System.Data.Common.DbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Common.DbTransaction)">
            <summary>删除指定的数据</summary>
            <param name="connection">The connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="where">The where.</param>
            <param name="transaction">The transaction.</param>
            <returns>The <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.DeleteTalbe(System.Data.Common.DbConnection,System.String,System.Data.Common.DbTransaction)">
            <summary>
                删除指定的表
            </summary>
            <param name="connection">The connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.ExecuteNonQuery(System.Data.Common.DbConnection,System.String,System.Data.Common.DbTransaction)">
            <summary>运行一个sql 命令，并返回受影响的行数</summary>
            <param name="connection">The connection.</param>
            <param name="commandSql">The command.</param>
            <param name="transaction">The transaction.</param>
            <returns>The <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Data.Common.DbTransaction)">
            <summary>运行一个 sql 命令，并返回第一行第一列值</summary>
            <param name="connection">The connection.</param>
            <param name="commandSql">The command SQL.</param>
            <param name="transaction">The transaction.</param>
            <returns>The <see cref="T:System.Object" />.</returns>
        </member>
        <member name="P:X.CommLib.DbTools.DbHelper.ExecuteSqlCallback">
            <summary>
                运行sql时的回调函数，将要运行的命令传入该回调函数
            </summary>
            <value>
                The execute SQL callback.
            </value>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.ExecuteScalar``1(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,``0)">
            <summary>运行一个 sql 命令，并返回第一行第一列值</summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="commandSql">The command SQL.</param>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The <see cref="!:T" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.FormatColumnName(System.String)">
            <summary>格式化列名或是表名</summary>
            <param name="columnName">Name of the column.</param>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GenerateAddColumnsSql(System.Data.DataColumn[],System.String)">
            <summary>创建添加数据表列sql语句</summary>
            <param name="columns">The columns.</param>
            <param name="tableName">Name of the table.</param>
            <returns>The <see cref="!:string[]" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GenerateAlterColumnsSql(System.Data.DataColumn[],System.String)">
            <summary>创建修改数据表列sql语句</summary>
            <param name="columns">The columns.</param>
            <param name="tableName">Name of the table.</param>
            <returns>The <see cref="!:string[]" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GenerateCreateColumnSql(System.Data.DataColumn)">
            <summary>为某个数据列创建create sql 语句</summary>
            <param name="column">The column.</param>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GenerateCreateColumnsSql(System.Data.DataColumn[],System.String[])">
            <summary>生成需要创建数据列的sql语句字符串</summary>
            <param name="columns">The columns.</param>
            <param name="primaryKeyNames">The primary key names.</param>
            <returns>The <see>
                    <cref>string[]</cref>
                </see>
                .</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GenerateCreateIndexSql(System.String,System.String,System.String[],System.Boolean)">
            <summary>创建一个数据库索引字符串</summary>
            <param name="indexName">Name of the index.</param>
            <param name="tableName">Name of the table.</param>
            <param name="columnNames">The column names.</param>
            <param name="unique">if set to <c>true</c> [unique].</param>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GenerateCreatePrimaryKeySql(System.String[])">
            <summary>生成创建主键的sql语句</summary>
            <param name="primaryKeyNames">The primary key names.</param>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GenerateDropColumnsSql(System.Data.DataColumn[],System.String)">
            <summary>创建删除数据表列sql语句</summary>
            <param name="columns">The columns.</param>
            <param name="tableName">Name of the table.</param>
            <returns>The <see cref="!:string[]" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GenerateRenameTableSql(System.String,System.String)">
            <summary>创建修改数据表名sql语句</summary>
            <param name="tableName">Name of the table.</param>
            <param name="newTableName">New name of the table.</param>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GetLastInsertRowId(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>返回最后一次插入的自增列id</summary>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
            <returns>The <see cref="T:System.Int64" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GetNotExistDataColumns(System.Data.Common.DbConnection,System.String,System.Data.DataColumn[])">
            <summary>从指定的表中返回不存在的列</summary>
            <param name="connection">The connection.</param>
            <param name="table">The table.</param>
            <param name="columns">The columns.</param>
            <returns>The <see cref="!:DataColumn[]" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GetSchema(System.Data.Common.DbConnection,System.String)">
            <summary>返回数据库结构信息</summary>
            <param name="connection">.</param>
            <param name="collectionName">可使用System.Data.OleDb.OleDbSchemaGuid获取.</param>
            <returns>The <see cref="T:System.Data.DataTable" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GetSqlDataTypeString(System.Data.DataColumn)">
            <summary>返回指定的数据类型在sql中的文字表示</summary>
            <param name="column">The column.</param>
            <returns>The <see cref="T:System.String" />.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GetTableColumnInfos(System.Data.Common.DbConnection,System.String)">
            <summary>
            返回指定数据库
            </summary>
            <param name="dbConnection">The db connection.</param>
            <param name="tableName">Name of the table.</param>
            <returns>
            The <see cref="!:TableColumnInfo[]" />.
            </returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GetUserTableNames(System.Data.Common.DbConnection)">
            <summary>
            返回数据库中所有的用户表
            </summary>
            <param name="conn">The conn.</param>
            <returns></returns>
        </member>
        <member name="P:X.CommLib.DbTools.DbHelper.UserTableType">
            <summary>
            用户表类型，用来枚举一个库中有多少个表使用
            </summary>
            <value>
            The type of the user table.
            </value>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.InitInsertCommand(System.Data.Common.DbCommand,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>在一个数据库命令对象上设置插入操作</summary>
            <param name="command">The sq lite command.</param>
            <param name="tableName">Name of the table.</param>
            <param name="values">The values.</param>
            <exception cref="T:System.ArgumentException">@没有指定需要插入的数值;values</exception>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.InsertTableData(System.Data.Common.DbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Common.DbTransaction)">
            <summary>插入一批数据</summary>
            <param name="connection">The connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="values">The values.</param>
            <param name="transaction">The transaction.</param>
            <returns>The <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.NeedOpenConnection(System.Data.ConnectionState)">
            <summary>当前的状态下，是否打开数据库连接才能使用</summary>
            <param name="connectionState">State of the connection.</param>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.NeedOpenConnection(System.Data.IDbConnection)">
            <summary>当前的状态下，是否打开数据库连接才能使用</summary>
            <param name="connection">The connection.</param>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.ReadDataString(System.Data.Common.DbDataReader,System.String,System.String)">
            <summary>读取读取器的字符值</summary>
            <param name="reader">The reader.</param>
            <param name="key">The key.</param>
            <param name="defVal">The def val.</param>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.ReadDataValue``1(System.Data.Common.DbDataReader,System.String,``0)">
            <summary>读取读取器中的指定类型值</summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="key">The key.</param>
            <param name="defVal">The def val.</param>
            <returns>The <see cref="!:T" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.ReadDataValue(System.Data.Common.DbDataReader,System.String)">
            <summary>读取数据</summary>
            <param name="reader">The reader.</param>
            <param name="key">The key.</param>
            <returns>The <see cref="T:System.Object" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.ReadDataValue``1(System.Data.Common.DbDataReader,System.Int32,``0)">
            <summary>从datareader 中读取指定序列的值</summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="ordinal">The ordinal.</param>
            <param name="defVal">The def val.</param>
            <returns>The <see cref="!:T" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.RunSqlCommand``1(System.Data.Common.DbConnection,X.CommLib.DbTools.DbHelper.RunSqlCommandHandle{``0},System.Data.Common.DbTransaction)">
            <summary>运行sql 命令</summary>
            <typeparam name="T"></typeparam>
            <param name="connection">The connectio.</param>
            <param name="handle">The handle.</param>
            <param name="transaction">The transaction.</param>
            <returns>The <see cref="!:T" />.</returns>
            <exception cref="T:System.ArgumentNullException">handle</exception>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.SetCommandParameters(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>设置命令的参数</summary>
            <param name="command">The command.</param>
            <param name="values">The values.</param>
            <param name="attachFlag"></param>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.ShowDbSchemanInfo(System.Data.Common.DbConnection)">
            <summary>
                在调试窗口输出数据表结构
            </summary>
            <param name="dbConnection">The db connection.</param>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.UpdateTable(System.Data.Common.DbConnection,System.String,System.Data.DataColumn[],System.Data.Common.DbTransaction)">
            <summary>更新指定表</summary>
            <param name="connection">The connection.</param>
            <param name="tableName">The table.</param>
            <param name="columns">The columns.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.UpdateTableData(System.Data.Common.DbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Common.DbTransaction)">
            <summary>更新数据表</summary>
            <param name="connection">The conn.</param>
            <param name="tableName">Name of the table.</param>
            <param name="values">更新部分.</param>
            <param name="where">查找的配置部分，以AND进行合并.</param>
            <param name="transaction">The transaction.</param>
            <returns>更新了多少条数据了</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.UserColumnIsExist(System.Data.Common.DbConnection,System.String,System.String)">
            <summary>用户表中指定的列是否存在</summary>
            <param name="connection">The connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.UserIndexIsExist(System.Data.Common.DbConnection,System.String)">
            <summary>指定的用户索引是否存在</summary>
            <param name="dbConnection">The db connection.</param>
            <param name="indexName">Name of the index.</param>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.UserTableIsExist(System.Data.Common.DbConnection,System.String)">
            <summary>指定的数据库中的指定名称的数据表是否存在</summary>
            <param name="dbConnection">The db connection.</param>
            <param name="tableName">Name of the table.</param>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.TestDbtools(X.CommLib.DbTools.DbHelper,System.Data.Common.DbConnection,System.String,System.Action{System.Data.Common.DbConnection,System.String})">
            <summary>
                对数据库进行测试
            </summary>
            <param name="dbTool">The db tool.</param>
            <param name="connection">The connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.BuildCreateColumnSql(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>根据输入的字符串构建一个sql创建列字符串</summary>
            <param name="propertyName">Name of the property.</param>
            <param name="dataType">Type of the data.</param>
            <param name="dataLen">Length of the data.</param>
            <param name="isUnique">The is unique.</param>
            <param name="isNull">The is null.</param>
            <param name="defValue">The definition value.</param>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.CovertToTableColumnInfo(System.Data.DataRow)">
            <summary>获取数据列信息</summary>
            <param name="columnInfoRow">The column information row.</param>
            <returns>The <see cref="T:X.CommLib.DbTools.TableColumnInfo" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.CreateCommandParameter(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>创建参数值</summary>
            <param name="command">The command.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>The <see cref="T:System.Data.Common.DbParameter" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.FormatPrimaryKeyName(System.String)">
            <summary>格式化主键名称</summary>
            <param name="keyName">The input.</param>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GenerateCreateAutoIncrementColumnSql(System.Data.DataColumn)">
            <summary>创建一个自增列的sql 语句</summary>
            <param name="column">The column.</param>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GenerateCreateColumnSql(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Object)">
            <summary>创建sql创建列语法</summary>
            <param name="propertyName">列名</param>
            <param name="dataType">列的数据类型</param>
            <param name="allowNull">是否允许为空</param>
            <param name="unique">是否唯一值</param>
            <param name="maxLen">数据的长度，如果不需要设置为null</param>
            <param name="defValue">默认值，如果不需要，设置为null</param>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GetConnectionString(System.String,System.String)">
            <summary>返回数据连接设置</summary>
            <param name="connName">Name of the conn.</param>
            <param name="configPath">The config path.</param>
            <returns>The <see cref="T:System.Configuration.ConnectionStringSettings" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.BuilderUpdateColumnNames(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>构造插入列参数</summary>
            <param name="values"></param>
            <param name="attachFlag"></param>
            <returns>The <see cref="!:string[]" />.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbHelper.GetColumnSchemaDataTable(System.Data.Common.DbConnection)">
            <summary>返回数据为的架构</summary>
            <param name="connection">The connection.</param>
            <returns>The <see cref="T:System.Data.DataTable" />.</returns>
        </member>
        <member name="T:X.CommLib.DbTools.IDbTool">
            <summary>
            数据库工具库接口
            </summary>
        </member>
        <member name="T:X.CommLib.DbTools.DbTool`3">
            <summary>
                数据库工具
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.DbTool`3.CreateDbFile(System.String,System.Boolean)">
            <summary>
                创建一个数据库文件
            </summary>
            <param name="dbPath">数据库文件路径.</param>
            <param name="overWrite">如果已经存在是否覆盖.</param>
        </member>
        <member name="M:X.CommLib.DbTools.DbTool`3.GetConnectionString(System.String)">
            <summary>
                返回数据库连接
            </summary>
            <param name="dbPath">The db path.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbTool`3.CreateConnectionFromConfig(System.String,System.String)">
            <summary>
            通过配置文件创建连接对象
            </summary>
            <param name="connName">Name of the conn.</param>
            <param name="configPath">The config path.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbTool`3.CreateConnection(System.String)">
            <summary>
                创建数据库链接
            </summary>
            <param name="connectionString">The connect string.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.DbTools.DbTool`3.RunSqlCommandHandle`1">
            <summary>
                运行sql 命令的回调函数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbTool`3.ExecuteScalar(`0,System.String,`2)">
            <summary>
            运行一个sql 命令，并返回受影响的行数
            </summary>
            <param name="connection">The connection.</param>
            <param name="commandSql">The command.</param>
            <param name="transaction">The transaction.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.DbTool`3.RunSqlCommand``1(`0,X.CommLib.DbTools.DbTool{`0,`1,`2}.RunSqlCommandHandle{``0},`2)">
            <summary>
            运行sql 命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">The connectio.</param>
            <param name="handle">The handle.</param>
            <param name="transaction">The transaction.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">handle</exception>
        </member>
        <member name="M:X.CommLib.DbTools.DbTool`3.QueryCreateTableSqlCommand(System.String,System.Data.IDbConnection)">
            <summary>
                查询某个表的建表命令
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.DbTools.ExcelDbTool">
            <summary>
                Excel 数据库工具
                数据连接参考 http://www.connectionstrings.com/ace-oledb-12-0/
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.ExcelDbTool.CreateConnection(System.String,System.String)">
            <summary>创建数据库连接，</summary>
            <param name="dbPath">数据库文件.</param>
            <param name="provider">ole db使用的数据库引擎.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">@没有定义数据文件路径;dbPath</exception>
            <exception cref="T:System.IO.FileNotFoundException">数据文件不存在</exception>
        </member>
        <member name="M:X.CommLib.DbTools.ExcelDbTool.GetConnectionString(System.String)">
            <summary>Gets the connect string.</summary>
            <param name="dbPath">The db path.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.ExcelDbTool.GetConnectionString(System.String,System.String)">
            <summary>返回数据库连接字符串</summary>
            <param name="dbPath">The db path.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.ExcelDbTool.GetConnectionString(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>创建access文件的数据库链接</summary>
            <param name="filePath">文件路径.</param>
            <param name="excelVer">对应的excel文件版本.</param>
            <param name="provider">数据引擎.</param>
            <param name="header">第一行是否是表头</param>
            <param name="readasTxt">是否将数据以字符格式进行处理</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">未能找到与程序对应的数据库操作引擎
                or</exception>
        </member>
        <member name="M:X.CommLib.DbTools.ExcelDbTool.GetLastInsertRowId(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>Gets the last insert row id.
                不支持该功能</summary>
            <param name="connection">The connection.</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.ExcelDbTool.GenerateCreateAutoIncrementColumnSql(System.Data.DataColumn)">
            <summary>创建一个自增列的sql 语句</summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.ExcelDbTool.GenerateCreateColumnSql(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Object)">
            <summary>创建sql创建列语法</summary>
            <param name="propertyName">列名</param>
            <param name="dataType">列的数据类型</param>
            <param name="allowNull">是否允许为空</param>
            <param name="unique">是否唯一值</param>
            <param name="maxLen">数据的长度，如果不需要设置为null</param>
            <param name="defValue">默认值，如果不需要，设置为null</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.ExcelDbTool.GetExcelVersion(System.String)">
            <summary>返回与引擎对应的excel支持版本</summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.ExcelDbTool.Test">
            <summary>
                进行测试
            </summary>
        </member>
        <member name="T:X.CommLib.DbTools.MysqlDbTool">
            <summary>
                MySql数据库工具
            </summary>
        </member>
        <member name="P:X.CommLib.DbTools.MysqlDbTool.UserTableType">
            <summary>
                用户表类型，用来枚举一个库中有多少个表使用
            </summary>
            <value>
                The type of the user table.
            </value>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.CreateConnection(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.UInt32},System.Boolean,System.Nullable{System.UInt32})">
            <summary>
                创建数据库连接对象
            </summary>
            <param name="server">The server.</param>
            <param name="database">The database.</param>
            <param name="account">The account.</param>
            <param name="pass">The pass.</param>
            <param name="charset">The charset.</param>
            <param name="port">The port.</param>
            <param name="useCompression">if set to <c>true</c> [use compression].</param>
            <param name="timeout">The timeout.</param>
            <returns>
                MySqlConnection.
            </returns>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.CreateConnectionStringBuilde(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
                创建数据库连接对象
            </summary>
            <param name="server">The server.</param>
            <param name="database">The database.</param>
            <param name="account">The account.</param>
            <param name="pass">The pass.</param>
            <param name="charset">The charset.</param>
            <param name="port">The port.</param>
            <param name="timeout">連接及命令處理超時時間.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.CreateDataColumn(System.String,System.Type,System.Object,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>根据参数创建列对象.</summary>
            <param name="columnName">Name of the column.</param>
            <param name="columnType">Type of the column.</param>
            <param name="defaultValue">The def value.</param>
            <param name="allowDbNull">if set to <c>true</c> [allow db null].</param>
            <param name="maxLenght">The length.</param>
            <param name="unique">if set to <c>true</c> [unique].</param>
            <param name="autoIncrement">if set to <c>true</c> [auto increment].</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.CreateDbFile(System.String,System.Boolean)">
            <summary>Creates the db file.</summary>
            <param name="dbPath">The db path.</param>
            <param name="overWrite">if set to <c>true</c> [over write].</param>
            <exception cref="T:System.NotImplementedException">不支持该操作</exception>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.CreateTable(System.Data.Common.DbConnection,System.String,System.Data.DataColumn[],System.String[],System.String,System.Data.Common.DbTransaction)">
            <summary>创建数据表</summary>
            <param name="connection">The connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="columns">The columns.</param>
            <param name="primaryKeyNames">The primary key names.</param>
            <param name="attachContent">附加在创建sql语句后面的内容.</param>
            <param name="transaction">The transaction.</param>
            <returns>如果成功创建数据库返回true，不用创建加返回false， 数据库创建失败抛出异常</returns>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.CreateTable(System.Data.Common.DbConnection,System.String,System.Data.DataColumn[],System.String[],System.String,System.String,System.Data.Common.DbTransaction)">
            <summary>创建数据表</summary>
            <param name="connection">The conn.</param>
            <param name="tableName">Name of the table.</param>
            <param name="columns">The columns.</param>
            <param name="primaryKeyNames">The primary keys.</param>
            <param name="engine">The engine.</param>
            <param name="charset">The charset.</param>
            <param name="transaction">The transaction.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.CreateUniqueDataColumn(System.String,System.Type,System.Boolean)">
            <summary>
                创建一个唯一值列的列对象
                唯一键的长度为 255
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="columnType">Type of the column.</param>
            <param name="autoIncrement">if set to <c>true</c> [automatic increment].</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.CreateUniqueDataColumn(System.String,System.Type,System.Int32,System.Boolean)">
            <summary>
                创建一个唯一值列的列对象
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="columnType">Type of the column.</param>
            <param name="maxLength">The maximum length.</param>
            <param name="autoIncrement">if set to <c>true</c> [automatic increment].</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.FormatColumnName(System.String)">
            <summary>格式化列名或是表名</summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.GenerateCreateColumnsSql(System.Data.DataColumn[],System.String[])">
            <summary>生成需要创建数据列的sql语句字符串</summary>
            <param name="columns">The columns.</param>
            <param name="primaryKeyNames">The primary key names.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.GetConnectionString(System.String)">
            <summary>Gets the connection string.</summary>
            <param name="dbPath">The db path.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">不支持该操作</exception>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.GetLastInsertRowId(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>返回最后一次插入的自增列id</summary>
            <param name="connection">The connection.</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.GetSqlDataTypeString(System.Data.DataColumn)">
            <summary>返回指定的数据类型在sql中的文字表示</summary>
            <param name="column"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.QueryCreateTableSqlCommand(System.String,System.Data.IDbConnection)">
            <summary>
                查询某个表的建表语句
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.UserTableIsExist(System.Data.Common.DbConnection,System.String)">
            <summary>
                测试表是否存在
            </summary>
            <param name="dbConnection">The database connection.</param>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.GenerateCreateAutoIncrementColumnSql(System.Data.DataColumn)">
            <summary>创建一个自增列的sql 语句</summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.GenerateCreateColumnSql(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Object)">
            <summary>创建sql创建列语法</summary>
            <param name="propertyName">列名</param>
            <param name="dataType">列的数据类型</param>
            <param name="allowNull">是否允许为空</param>
            <param name="unique">是否唯一值</param>
            <param name="maxLen">数据的长度，如果不需要设置为null</param>
            <param name="defValue">默认值，如果不需要，设置为null</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.MysqlDbTool.Test">
            <summary>
                进行测试
            </summary>
        </member>
        <member name="T:X.CommLib.DbTools.OleDbTool">
            <summary>
                OleDb数据库工具
            </summary>
        </member>
        <member name="P:X.CommLib.DbTools.OleDbTool.DefaultProvider">
            <summary>
                返回默认的oledb 数据库引擎
            </summary>
            <value>
                The default provider.
            </value>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.CreateConnection(System.String,System.String,System.Boolean)">
            <summary>创建数据库连接，</summary>
            <param name="dbPath">数据库文件.</param>
            <param name="provider">ole db使用的数据库引擎.</param>
            <param name="autoCreate">如果数据文件不存在，是否自动创建.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">@没有定义数据文件路径;dbPath</exception>
            <exception cref="T:System.IO.FileNotFoundException">数据文件不存在</exception>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.CreateDbFile(System.String,System.Boolean)">
            <summary>创建数据库文件</summary>
            <param name="dbPath">The file path.</param>
            <param name="overWrite">if set to <c>true</c> [over write].</param>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.CreateDbFile(System.String,System.Boolean,System.String)">
            <summary>创建数据库文件</summary>
            <param name="dbPath">The db path.</param>
            <param name="overWrite">if set to <c>true</c> [over write].</param>
            <param name="provider">The provider， 如果不设置，则自动创建一个.</param>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.CreateTable(System.Data.Common.DbConnection,System.String,System.Data.DataColumn[],System.String[],System.String,System.Data.Common.DbTransaction)">
            <summary>创建数据表</summary>
            <param name="connection">The connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="columns">The columns.</param>
            <param name="primaryKeyNames">The primary key names.</param>
            <param name="attachContent">附加在创建sql语句后面的内容.</param>
            <param name="transaction">The transaction.</param>
            <returns>如果成功创建数据库返回true，不用创建加返回false， 数据库创建失败抛出异常</returns>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.GetConnectionString(System.String,System.String)">
            <summary>返回数据库连接字符串</summary>
            <param name="dbPath">The db path.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.GetConnectionString(System.String)">
            <summary>Gets the connect string.</summary>
            <param name="dbPath">The db path.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.GetLastInsertRowId(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>返回最后一次插入的自增列id</summary>
            <param name="connection">The connection.</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.GetOleDbSchema(System.Data.OleDb.OleDbConnection,System.Guid)">
            <summary>返回数据库结构数据</summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.GetSqlDataTypeString(System.Data.DataColumn)">
            <summary>返回指定的数据类型在sql中的文字表示</summary>
            <param name="column"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.GetSupportedProviders">
            <summary>
                Gets the supported providers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.IsAccessAceEnagineProvider(System.String)">
            <summary>是不是ace 数据库引擎</summary>
            <param name="provider">The provider.</param>
            <returns><c>true</c> if [is access ace enagine provider] [the specified provider]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.IsAccessJetEnagineProvider(System.String)">
            <summary>是不是jet 引擎</summary>
            <param name="provider">The provider.</param>
            w
            <returns><c>true</c> if [is access jet enagine provider] [the specified provider]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.Test">
            <summary>
                进行测试
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.TestDbTool(X.CommLib.DbTools.DbHelper,System.Data.Common.DbConnection,System.String)">
            <summary>Tests the db tool.</summary>
            <param name="dbTool">The db tool.</param>
            <param name="connection">The connection.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.CovertToTableColumnInfo(System.Data.DataRow)">
            <summary>获取数据列信息</summary>
            <param name="columnInfoRow">The column information row.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.CreateCommandParameter(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>创建命令参数</summary>
            <param name="command">The command.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.GenerateCreateAutoIncrementColumnSql(System.Data.DataColumn)">
            <summary>创建一个自增列的sql 语句</summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.GenerateCreateColumnSql(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Object)">
            <summary>创建sql创建列语法</summary>
            <param name="propertyName">列名</param>
            <param name="dataType">列的数据类型</param>
            <param name="allowNull">是否允许为空</param>
            <param name="unique">是否唯一值</param>
            <param name="maxLen">数据的长度，如果不需要设置为null</param>
            <param name="defValue">默认值，如果不需要，设置为null</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.ParseProviderName(System.String,System.String@,System.Version@)">
            <summary>解析引擎名称</summary>
            <param name="provider">The provider.</param>
            <param name="name">The name.</param>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.TestAccessDataType">
            <summary>
                测试数据类型
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.OleDbTool.TryGetAccessDataType(System.Object)">
            <summary>解析Access数据类型，如果无法解析返回 Unknow</summary>
            <param name="columnType">Type of the column.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.DbTools.SqliteDbTool">
            <summary>
                sqlite 数据库工具
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.AttachDatabase(System.Data.Common.DbConnection,System.String,System.String)">
            <summary>
                绑定入一个数据文件文件
            </summary>
            <param name="connection">The connection.</param>
            <param name="database">The database.</param>
            <param name="alias">The alias.</param>
            <exception cref="T:System.InvalidOperationException">
                $已存在相同名'{alias}'的附加数据库文件：{database}
                or
                $附加数据库'{alias}'失败，文件：{database}
            </exception>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.ChangeColumnName(System.Data.SQLite.SQLiteConnection,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
                为一组列进行改名
                因为使用了 REPLACE 函数，不知道会不会对正常的语法有影响
            </summary>
            <param name="connection">The connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="columnsName">Name of the columns.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.ChangePass(System.String,System.String,System.String)">
            <summary>
                修改数据库密码
            </summary>
            <param name="dbPath">
                The db path.
            </param>
            <param name="pass">
                The pass.
            </param>
            <param name="oldPass">
                The old pass.
            </param>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.ChangePass(System.Data.SQLite.SQLiteConnection,System.String)">
            <summary>
                修改数据库密码
            </summary>
            <param name="connection">
                The connection.
            </param>
            <param name="pass">
                The pass.
            </param>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.CreateConnection(System.String,System.String,System.Boolean)">
            <summary>
                创建数据库连接
            </summary>
            <param name="dbPath">
                The db path.
            </param>
            <param name="pass">
                数据库密码，如果为空，则不设置.
            </param>
            <param name="autoCreate">
                if set to <c>true</c> [auto create].
            </param>
            <returns>
                The <see cref="T:System.Data.SQLite.SQLiteConnection" />.
            </returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.CreateDbFile(System.String,System.String,System.Boolean)">
            <summary>
                创建数据库文件
            </summary>
            <param name="dbPath">
                The db path.
            </param>
            <param name="pass">
                The pass.
            </param>
            <param name="overWrite">
                if set to <c>true</c> [over write].
            </param>
            <exception cref="T:System.IO.FileLoadException">
                数据库文件已经存在，是否进行覆盖
            </exception>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.CreateDbFile(System.String,System.Boolean)">
            <summary>
                Creates the db file.
            </summary>
            <param name="dbPath">
                The db path.
            </param>
            <param name="overWrite">
                if set to <c>true</c> [over write].
            </param>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.CreateMemoryConnection(System.String)">
            <summary>
                创建一个内存数据库
            </summary>
            <param name="pass">The pass.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.DetachDatabase(System.Data.Common.DbConnection,System.String)">
            <summary>
                与一个数据库文件解绑
            </summary>
            <param name="connection">The connection.</param>
            <param name="alias">The alias.</param>
            <exception cref="T:System.InvalidOperationException">$未找到数据库'{alias}'</exception>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.Escape(System.String)">
            <summary>
                转义字符
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.EscapeString(System.String)">
            <summary>
                对sqlite中的字符进行转义
            </summary>
            <param name="str">
                The STR.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.FindDatabaseByAlias(System.Data.Common.DbConnection,System.String)">
            <summary>
                根据别名查询当前数据库信息
            </summary>
            <param name="connection">The connection.</param>
            <param name="alias">别名，如果为 main，则为当前主数据库</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.GetAttachDatabases(System.Data.Common.DbConnection)">
            <summary>
                gs the et attach databases.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.GetConnectionString(System.String)">
            <summary>
                Gets the connection string.
            </summary>
            <param name="dbPath">
                The db path.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.GetConnectionString(System.String,System.String)">
            <summary>
                Gets the connection string.
            </summary>
            <param name="dbPath">
                The db path.
            </param>
            <param name="pass">
                The pass.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.GetLastInsertRowId(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
                返回最后一次插入的自增列id
            </summary>
            <param name="connection">
                The connection.
            </param>
            <param name="transaction">
            </param>
            <returns>
                The <see cref="T:System.Int64" />.
            </returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.QueryCreateTableSqlCommand(System.String,System.Data.IDbConnection)">
            <summary>
                查询某个表的建表命令
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.Test">
            <summary>
                进行测试
            </summary>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.BuildCreateColumnSql(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
                根据输入的字符串构建一个sql创建列字符串
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="dataType">Type of the data.</param>
            <param name="dataLen">Length of the data.</param>
            <param name="isUnique">The is unique.</param>
            <param name="isNull">The is null.</param>
            <param name="defValue">The definition value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.FormatPrimaryKeyName(System.String)">
            <summary>
                格式化主键名称
            </summary>
            <param name="keyName">
                The input.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.GenerateCreateColumnSql(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Object)">
            <summary>
                创建sql创建列语法
            </summary>
            <param name="propertyName">
                列名
            </param>
            <param name="dataType">
                列的数据类型
            </param>
            <param name="allowNull">
                是否允许为空
            </param>
            <param name="unique">
                是否唯一值
            </param>
            <param name="maxLen">
                数据的长度，如果不需要设置为null
            </param>
            <param name="defValue">
                默认值，如果不需要，设置为null
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="T:X.CommLib.DbTools.SqliteDbTool.DatabaseInfo">
            <summary>
                当前载入的数据库信息
            </summary>
        </member>
        <member name="P:X.CommLib.DbTools.SqliteDbTool.DatabaseInfo.File">
            <summary>
                数据库文件的路径
            </summary>
            <value>
                The file.
            </value>
        </member>
        <member name="P:X.CommLib.DbTools.SqliteDbTool.DatabaseInfo.Name">
            <summary>
                别名
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:X.CommLib.DbTools.SqliteDbTool.DatabaseInfo.Seq">
            <summary>
                序号
            </summary>
            <value>
                The seq.
            </value>
        </member>
        <member name="M:X.CommLib.DbTools.SqliteDbTool.DatabaseInfo.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:X.CommLib.IO.DirectoryDeleter">
            <summary>
            目录删除器，因为当目录中文件有只读属性时，该目录无法删除
            </summary>
        </member>
        <member name="M:X.CommLib.IO.DirectoryDeleter.Delete(System.String)">
            <summary>
            删除拽定的目录
            </summary>
            <param name="directory">The directory.</param>
        </member>
        <member name="M:X.CommLib.IO.DirectoryDeleter.Delete(System.IO.DirectoryInfo)">
            <summary>
                删除指定的目录
            </summary>
            <param name="directoryInfo">The directory information.</param>
        </member>
        <member name="T:X.CommLib.IO.FileEncodingConverter">
            <summary>
                文件编码转换器
            </summary>
        </member>
        <member name="M:X.CommLib.IO.FileEncodingConverter.UpdateCurrentSolution">
            <summary>
                更新当前项目
            </summary>
        </member>
        <member name="M:X.CommLib.IO.FileEncodingConverter.ConvertSolution(System.String,System.String,System.Text.Encoding)">
            <summary>
                将一个项目下的指定后缀文件转为 utf8 格式
                会一直向上便利，直到找到 sln 后缀文件为止
            </summary>
            <param name="extensions">需要处理的文件的后缀，如果有多个使用;进行分隔.</param>
            <param name="directory">如果不指定为当前目录</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.IO.FileEncodingConverter.GetFiles(System.String,System.String)">
            <summary>
                获取某个目录下指定后缀的文件
            </summary>
            <param name="directory">The directory.</param>
            <param name="extensions">The extensions.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.IO.FileEncodingConverter.ConvertFileToUtf8(System.String,System.Text.Encoding)">
            <summary>
                将一个文件的编码转为 utf8 格式
            </summary>
            <param name="filePath">The file path.</param>
            <param name="sourceEncoding">如果未指定，则自动判断，如果指定，则使用指定值.</param>
            <returns>是否进行了转码;true: 进行了转码，false:未进行转码</returns>
        </member>
        <member name="T:X.CommLib.IO.SymbolicLinkHelper">
            <summary>
                连接符号创建辅助函数
            </summary>
        </member>
        <member name="T:X.CommLib.IO.SymbolicLinkHelper.SymbolicLink">
            <summary>
                文件链接类型
            </summary>
        </member>
        <member name="F:X.CommLib.IO.SymbolicLinkHelper.SymbolicLink.File">
            <summary>
                文件链接
            </summary>
        </member>
        <member name="F:X.CommLib.IO.SymbolicLinkHelper.SymbolicLink.Directory">
            <summary>
                目录链接
            </summary>
        </member>
        <member name="M:X.CommLib.IO.SymbolicLinkHelper.CreateSymbolicLink(System.String,System.String)">
            <summary>
            创建链接文件或是目录
            </summary>
            <param name="symlinkFileName">
            虚拟文件或目录.
            </param>
            <param name="targetFileName">
            被链接的真实文件或是目录.
            </param>
            <exception cref="T:System.ArgumentException">
            @没有定义目标文件或目录;targetFileName
                or
                @没有定义链接文件或目录;symlinkFileName
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            @目标文件不存在
            </exception>
        </member>
        <member name="M:X.CommLib.IO.SymbolicLinkHelper.IsSymbolicLink(System.String)">
            <summary>
            指定的目录是不是链接符号文件或目录
            </summary>
            <param name="fileOrDirectory">
            The directory.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.IO.SymbolicLinkHelper.CreateSymbolicLink(System.String,System.String,X.CommLib.IO.SymbolicLinkHelper.SymbolicLink)">
            <summary>
            创建文件链接
            </summary>
            <param name="symlinkFileName">
            Name of the lp symlink file.
            </param>
            <param name="targetFileName">
            Name of the lp target file.
            </param>
            <param name="flags">
            The dw flags.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:X.CommLib.IO.DirectoryHelper">
            <summary>
                路径辅助工具
            </summary>
        </member>
        <member name="M:X.CommLib.IO.DirectoryHelper.CreateDirectoryFromFilePath(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
                指定一个文件路径，创建该文件所在的目录
            </summary>
            <param name="path">The path.</param>
            <param name="directorySecurity">要应用于此目录的访问控制.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.IO.DirectoryHelper.CreateDirectoryFromFilePath(System.String)">
            <summary>
                指定一个文件路径，创建该文件所在的目录
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.IO.DirectoryHelper.IsEmpty(System.String)">
            <summary>
                某个目录是否是空的
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.IO.DirectoryHelper.CleanLastPathSeparator(System.String)">
            <summary>
            清理路径最后的分隔符
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.IO.DirectoryHelper.IsSameFile(System.String,System.String)">
            <summary>
                是否是相同的文件
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.IO.DirectorySize">
            <summary>
            目录大小统计器
            </summary>
        </member>
        <member name="M:X.CommLib.IO.DirectorySize.Test">
            <summary>
            测试
            </summary>
        </member>
        <member name="M:X.CommLib.IO.DirectorySize.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.IO.DirectorySize" /> class.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:X.CommLib.IO.DirectorySize.IsExists(System.String)">
            <summary>
            目录是否存在
            </summary>
            <param name="filePath">The file path.</param>
            <returns>
              <c>true</c> if the specified file path is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:X.CommLib.IO.DirectorySize.Exists">
            <summary>
            文件是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.IO.DirectorySize.CountSize(System.String)">
            <summary>
            计算指定的目录的大小
            </summary>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.IO.FileSize">
            <summary>
              文件大小统计器
            </summary>
        </member>
        <member name="M:X.CommLib.IO.FileSize.Test">
            <summary>
              Tests this instance.
            </summary>
        </member>
        <member name="M:X.CommLib.IO.FileSize.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:X.CommLib.IO.FileSize" /> class.
            </summary>
            <param name="filePath"> 需要统计大小的文件路径 </param>
        </member>
        <member name="P:X.CommLib.IO.FileSize.FilePath">
            <summary>
              需要统计大小的文件路径
            </summary>
        </member>
        <member name="M:X.CommLib.IO.FileSize.CountSize">
            <summary>
              统计大小，如果文件不存在抛出异常
            </summary>
            <returns> </returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:X.CommLib.IO.FileSize.TryCountSize">
            <summary>
              统计文件大小，如果文件不存在返回0
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.IO.FileSize.Exists">
            <summary>
              文件是否存在
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.IO.FileSize.IsExists(System.String)">
            <summary>
              文件是否存在
            </summary>
            <param name="filePath"> The file path. </param>
            <returns> <c>true</c> if the specified file path is exists; otherwise, <c>false</c> . </returns>
        </member>
        <member name="M:X.CommLib.IO.FileSize.CountSize(System.String)">
            <summary>
              计算指定的文件的大小
            </summary>
            <param name="filePath"> The file path. </param>
            <returns> </returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:X.CommLib.IO.FileSize.CountFormatSize">
            <summary>
              统计文件大小的字符表示 ，如果文件不存在抛出异常
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.IO.FileSize.GetFormatSize(System.Int64)">
            <summary>
              返回格式化的大小显示
            </summary>
            <param name="size"> The size. </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.IO.FileSize.StrFormatByteSize(System.Int64,System.Text.StringBuilder,System.Int32)">
            <summary>
              返回文件大小的文字表示
            </summary>
            <param name="fileSize"> Size of the file. </param>
            <param name="buffer"> The buffer. </param>
            <param name="bufferSize"> Size of the buffer. </param>
            <returns> </returns>
        </member>
        <member name="T:X.CommLib.IO.HashCodeCreater">
            <summary>
                哈希值获取器
                默认使用 MD5 创建器
            </summary>
        </member>
        <member name="M:X.CommLib.IO.HashCodeCreater.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.IO.HashCodeCreater" /> class.
            </summary>
        </member>
        <member name="M:X.CommLib.IO.HashCodeCreater.#ctor(System.Security.Cryptography.HashAlgorithm)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.IO.HashCodeCreater" /> class.</summary>
            <param name="hashAlgorithm">The hash algorithm.</param>
        </member>
        <member name="M:X.CommLib.IO.HashCodeCreater.Finalize">
            <summary>
                Finalizes an instance of the <see cref="T:X.CommLib.IO.HashCodeCreater" /> class.
                析构函数自动生成 Finalize 方法和对基类的 Finalize 方法的调用.默认情况下,一个类是没有析构函数的,也就是说,对象被垃圾回收时不会被调用Finalize方法
            </summary>
        </member>
        <member name="P:X.CommLib.IO.HashCodeCreater.Algorithm">
            <summary>
                当前使用的哈希值创建器
            </summary>
            <value>
                The algorithm.
            </value>
        </member>
        <member name="P:X.CommLib.IO.HashCodeCreater.AutoCloseHashAlgorithm">
            <summary>
                是否关闭创建器
            </summary>
            <value>
                <c>true</c> if [automatic close hash algorithm]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:X.CommLib.IO.HashCodeCreater.GetHashcode(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>获取一个文件的 hash 值</summary>
            <param name="localPath">The local path.</param>
            <param name="hashAlgorithm">The hash algorithm.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.IO.HashCodeCreater.GetHashcode(System.IO.Stream,System.Security.Cryptography.HashAlgorithm)">
            <summary>获取一个流的 hash 值</summary>
            <param name="stream">The stream.</param>
            <param name="hashAlgorithm">The hash algorithm.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.IO.HashCodeCreater.GetHashcode(System.Byte[],System.Security.Cryptography.HashAlgorithm)">
            <summary>Gets the hashcode.</summary>
            <param name="source">The source.</param>
            <param name="hashAlgorithm">The hash algorithm.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.IO.HashCodeCreater.GetHashCodeString(System.Byte[])">
            <summary>
            将 hashcode 转为字符串进行保存
            </summary>
            <param name="hashCode">The hash code.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:X.CommLib.IO.HashCodeCreater.IsSameHashCode(System.Byte[],System.Byte[])">
            <summary>两个哈希值是否是一样的</summary>
            <param name="hashCode1">The hash code1.</param>
            <param name="hashCode2">The hash code2.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.IO.HashCodeCreater.Dispose">
            <summary>
                可以被客户直接调用
            </summary>
        </member>
        <member name="M:X.CommLib.IO.HashCodeCreater.GetHashCode(System.String)">
            <summary>获取某个文件的哈希值</summary>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.IO.HashCodeCreater.GetHashCode(System.IO.Stream)">
            <summary>对一个流创建哈希值</summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.IO.HashCodeCreater.GetHashCode(System.Byte[])">
            <summary>获取哈希值</summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.IO.HashCodeCreater.Dispose(System.Boolean)">
            <summary>
                无法被客户直接调用
                如果 disposing 是 true, 那么这个方法是被客户直接调用的,那么托管的,和非托管的资源都可以释放
                如果 disposing 是 false, 那么函数是从垃圾回收器在调用Finalize时调用的,此时不应当引用其他托管对象所以,只能释放非托管资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:X.CommLib.IO.DirectoryCopier">
            <summary>
            目录复制器 复制源路径中的文件夹至目标路径，仅复制文件夹，不复制其中的文件
            </summary>
        </member>
        <member name="F:X.CommLib.IO.DirectoryCopier._sourceDir">
            <summary>
                源目录
            </summary>
        </member>
        <member name="M:X.CommLib.IO.DirectoryCopier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.IO.DirectoryCopier" /> class. 使用源目录进行初始化
            </summary>
            <param name="sourceDir">The source dir.</param>
        </member>
        <member name="M:X.CommLib.IO.DirectoryCopier.CopyTo(System.String,System.Boolean)">
            <summary>
            复制到指定的目录
            </summary>
            <param name="targetDir">The target dir.</param>
            <param name="copySubDirs">是不是复制子目录.</param>
            <exception cref="T:System.IO.FileNotFoundException">源目录不存在</exception>
        </member>
        <member name="M:X.CommLib.IO.DirectoryCopier.CopyFiles(System.String,System.String)">
            <summary>
            将源文件夹中的文件复制到目标文件夹中，有同名文件时将会被覆盖
            </summary>
            <param name="sourceDir">The source dir.</param>
            <param name="targetDir">The target dir.</param>
        </member>
        <member name="M:X.CommLib.IO.DirectoryCopier.CopyTo(System.String,System.String,System.Boolean)">
            <summary>
            将源目录的中的文件都复制到目标目录中
            </summary>
            <param name="sourceDir">The source dir.</param>
            <param name="targetDir">The target dir.</param>
            <param name="copySubDirs">if set to <c>true</c> [copy sub dirs].</param>
        </member>
        <member name="T:X.CommLib.IO.PathNameFormater">
            <summary>
              文件路径格式化工具
            </summary>
        </member>
        <member name="M:X.CommLib.IO.PathNameFormater.Test">
            <summary>
            进行测试
            </summary>
        </member>
        <member name="M:X.CommLib.IO.PathNameFormater.GetValidFileName(System.String)">
            <summary>
            格式化文件名，替换无效的文件名字符
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.IO.PathNameFormater.GetValidPath(System.String)">
            <summary>
              返回有效的路径名，替换无效的路径名字符
            </summary>
            <param name="path"> </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.IO.PathNameFormater.ReplaceString(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Char)">
            <summary>
            替换一个字符串中的字符
            </summary>
            <param name="str"> </param>
            <param name="oldChars"> </param>
            <param name="newChar"> </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.IO.PathNameFormater.GetValidPathName(System.String,System.String)">
            <summary>
              格式化为有效的路径名，会远的无效的路径及文件名
            </summary>
            <param name="path"> </param>
            <param name="fileName"> </param>
            <returns> </returns>
        </member>
        <member name="T:X.CommLib.IO.Shortcut">
            <summary>
                快捷方式管理器
            </summary>
        </member>
        <member name="M:X.CommLib.IO.Shortcut.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.IO.Shortcut" /> class.
            </summary>
        </member>
        <member name="T:X.CommLib.IO.Shortcut.WindowStyles">
            <summary>
                窗口的显示方式
            </summary>
        </member>
        <member name="F:X.CommLib.IO.Shortcut.WindowStyles.Normal">
            <summary>
                The normal.
            </summary>
        </member>
        <member name="F:X.CommLib.IO.Shortcut.WindowStyles.Maximized">
            <summary>
                The maximized.
            </summary>
        </member>
        <member name="F:X.CommLib.IO.Shortcut.WindowStyles.Minimized">
            <summary>
                The minimized.
            </summary>
        </member>
        <member name="P:X.CommLib.IO.Shortcut.Arguments">
            <summary>
                调用参数
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:X.CommLib.IO.Shortcut.Description">
            <summary>
                描述
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:X.CommLib.IO.Shortcut.FullName">
            <summary>
                文件路径
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:X.CommLib.IO.Shortcut.Hotkey">
            <summary>
                快捷键
            </summary>
            <value>The hotkey.</value>
        </member>
        <member name="P:X.CommLib.IO.Shortcut.IconLocation">
            <summary>
                显示的图标
            </summary>
            <value>The icon location.</value>
        </member>
        <member name="P:X.CommLib.IO.Shortcut.TargetPath">
            <summary>
                目标文件
            </summary>
            <value>The target path.</value>
        </member>
        <member name="P:X.CommLib.IO.Shortcut.WindowStyle">
            <summary>
                窗口显示方式
            </summary>
            <value>The window style.</value>
        </member>
        <member name="P:X.CommLib.IO.Shortcut.WorkingDirectory">
            <summary>
                工作目录
            </summary>
            <value>The working directory.</value>
        </member>
        <member name="M:X.CommLib.IO.Shortcut.LoadFromFile(System.String)">
            <summary>
            打开并读取一个快捷方式信息
            </summary>
            <param name="filePath">
            The file path.
            </param>
            <returns>
            Shortcut.
            </returns>
        </member>
        <member name="M:X.CommLib.IO.Shortcut.Load(System.String)">
            <summary>
            从一个文件中载入
            </summary>
            <param name="filePath">
            The file path.
            </param>
        </member>
        <member name="M:X.CommLib.IO.Shortcut.Save">
            <summary>
                保存快捷方式
            </summary>
        </member>
        <member name="M:X.CommLib.IO.Shortcut.Save(System.String)">
            <summary>
            保存快捷方式到指定的文件
            </summary>
            <param name="fullName">
            The full name.
            </param>
        </member>
        <member name="M:X.CommLib.IO.Shortcut.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:X.CommLib.IO.Shortcut.Test">
            <summary>
                进行测试
            </summary>
        </member>
        <member name="T:X.CommLib.Miscellaneous.ArrayUtility">
            <summary>
                数组工具
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ArrayUtility.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            对一个队列行洗牌
            </summary>
            <typeparam name="T">
            数组的类型
            </typeparam>
            <param name="list">
            The list.
            </param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ArrayUtility.ShuffleAndLimit``1(``0[]@,System.Int32)">
            <summary>
            对一个队列洗牌，并设置为指定的大小，如果数组大小小于limit 则仅进行洗牌
            </summary>
            <typeparam name="T">
            数组的类型
            </typeparam>
            <param name="list">
            The list.
            </param>
            <param name="limit">
            The limit.
            </param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ArrayUtility.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            拆分数组到多个
            </summary>
            <typeparam name="T">
            数组类型
            </typeparam>
            <param name="array">
            The array.
            </param>
            <param name="size">
            The size.
            </param>
            <returns>
            The
                <see>
                    <cref>IEnumerable</cref>
                </see>
                .
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ArrayUtility.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            对数据做带索引历遍
            </summary>
            <typeparam name="T">
            数组类型
            </typeparam>
            <param name="ie">
            The ie.
            </param>
            <param name="action">
            The action.
            </param>
            <exception cref="T:System.Exception">
            A delegate callback throws an exception.
            </exception>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ArrayUtility.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            从数组中返回指定数据的item
            </summary>
            <typeparam name="T">进行操作的元素类型</typeparam>
            <param name="source">需要进行操作的数组.</param>
            <param name="count">返回元素的总数.</param>
            <param name="skip">返回前需要跳过的元素数量.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.AttachedProperty">
            <summary>
                附加属性扩展
                将与对象对应的数据保存到一个表中
                因为使用短引用，所以数据可以会被自动释放，建议保存一些短期使用值
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.AttachedProperty.Values">
            <summary>
                全局附加属性表
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AttachedProperty.GetKey(System.Object)">
            <summary>
                返回与对象对应的容器
            </summary>
            <param name="obj">The o.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AttachedProperty.SetAttachedProperty(System.Object,System.String,System.Object)">
            <summary>
                加入指定键的属性
            </summary>
            <param name="obj">The o.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AttachedProperty.GetAttachedProperty(System.Object,System.String)">
            <summary>
                返回指定键的属性
            </summary>
            <param name="obj">The object.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.DotNetEnvironment">
            <summary>
                .net 环境测试
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.DotNetEnvironment.Test">
            <summary>
                测试c
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.DotNetEnvironment.DetectUpdate(System.String,System.String)">
            <summary>
                指定的补丁是否已经安装
            </summary>
            <param name="version">The version.</param>
            <param name="kind">
                Microsoft .NET Framework 4 Extended 或是 Microsoft .NET Framework 4 Client Profile
                默认为 Microsoft .NET Framework 4 Extended
            </param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.DynamicDictionary">
            <summary>
                将字典对象转为匿名对象
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.DynamicDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.DynamicDictionary" /> class.
            </summary>
            <param name="values">The dictionary.</param>
        </member>
        <member name="P:X.CommLib.Miscellaneous.DynamicDictionary.InnerValues">
            <summary>
                内置的值
            </summary>
            <value>
                The dictionary.
            </value>
        </member>
        <member name="M:X.CommLib.Miscellaneous.DynamicDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
                Tries the get member.
            </summary>
            <param name="binder">The binder.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.DynamicDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
                Tries the set member.
            </summary>
            <param name="binder">The binder.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.DynamicDictionary.CreatExpandoObject(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                根据字典创建一个 ExpandoObject 对象
            </summary>
            <param name="values">The dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.DynamicDictionary.CreateDynamicDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                返回一个字典匿名对象
            </summary>
            <param name="values">The dictionary.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.EnumDescription`1">
            <summary>
                对象描述器, ToString 为枚举值的描述
            </summary>
            <typeparam name="T">
                枚举值类型
            </typeparam>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumDescription`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.EnumDescription`1" /> class.
            </summary>
            <param name="enumValue">
                The enum value.
            </param>
        </member>
        <member name="P:X.CommLib.Miscellaneous.EnumDescription`1.DisplayName">
            <summary>
                返回显示名
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:X.CommLib.Miscellaneous.EnumDescription`1.EnumValue">
            <summary>
                Gets or sets the enum value.
            </summary>
            <value>
                The enum value.
            </value>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumDescription`1.GetDescriptions(`0)">
            <summary>
                返回枚举值的描述
            </summary>
            <param name="enumValue">
                The enum value.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumDescription`1.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.ExceptionHelper">
            <summary>
                异常辅助类
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ExceptionHelper.PassHashSet">
            <summary>
                需要通过的异常类型
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ExceptionHelper.#cctor">
            <summary>
                Initializes static members of the <see cref="T:X.CommLib.Miscellaneous.ExceptionHelper" /> class.
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ExceptionHelper.CannotCatchException(System.Exception)">
            <summary>
            指定一个异常要不要捕获
            </summary>
            <param name="exception">
            The exception.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.JsonDatas">
            <summary>
                使用json 数据来进行存储的对象
            </summary>
        </member>
        <member name="P:X.CommLib.Miscellaneous.JsonDatas.Keys">
            <summary>
                返回所有键的值
            </summary>
            <value>
                The keys.
            </value>
        </member>
        <member name="P:X.CommLib.Miscellaneous.JsonDatas.SerializerSettings">
            <summary>
                json 序列化设置
            </summary>
            <value>
                The json settings.
            </value>
        </member>
        <member name="P:X.CommLib.Miscellaneous.JsonDatas.Item(System.String)">
            <summary>Gets or sets the <see cref="T:System.Object" /> with the specified key.</summary>
            <value>The <see cref="T:System.Object" />.</value>
            <param name="key">The key.</param>
            <returns>The <see cref="T:System.Object" />.</returns>
        </member>
        <member name="F:X.CommLib.Miscellaneous.JsonDatas.innerDictionary">
            <summary>
                内部的属性值
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.JsonDatas.lockSlim">
            <summary>
                参数的读写锁
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.JsonDatas.filePath">
            <summary>
                配置文件路径
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonDatas.InnerSetValue(System.Object,System.String)">
            <summary>
                添加一个值
            </summary>
            <param name="value">The value.</param>
            <param name="key">值对应的 key，如果不设置，则为调用方函数或属性名.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonDatas.InnerGetValue``1(``0,System.String)">
            <summary>
                返回指定 key 的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">The default value.</param>
            <param name="key">值对应的 key，如果不设置，则为调用方函数或属性名.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonDatas.SetValue(System.String,System.Object)">
            <summary>添加或是修改一个值.</summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonDatas.GetValue``1(System.String,``0)">
            <summary>读取值</summary>
            <typeparam name="T">输出值类型</typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The <see cref="!:T" />.</returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonDatas.Initialize(System.String)">
            <summary>使用数据文件进行初始化</summary>
            <param name="path">The file path.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonDatas.LoadFromFile(System.String)">
            <summary>从指定的文件载入(Initialize) 同名函数</summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonDatas.LoadFromJson(System.String)">
            <summary>从json 字符串中进行载入</summary>
            <param name="json">The json.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonDatas.Save(System.String)">
            <summary>保存到指定的文件</summary>
            <param name="path">The file path.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonDatas.Save">
            <summary>
                保存设置
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonDatas.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonDatas.TryGetValue(System.String,System.Object@)">
            <summary>尝试获取参数值</summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonDatas.Test">
            <summary>The test.</summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonDatas.SetValues(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>另入一组参数</summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonDatas.Clean">
            <summary>
                清空所有配置
            </summary>
        </member>
        <member name="T:X.CommLib.Miscellaneous.JsonValues">
            <summary>
                包装了 JsonDatas，可以使用多个jsonValues共同保存数据至jsonDatas
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.JsonValues.savekey">
            <summary>
                保存的key前缀
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonValues.#ctor(X.CommLib.Miscellaneous.JsonDatas,System.String)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.JsonValues"/> class.</summary>
            <param name="jsonDatas">内置的json 数据存储器.</param>
            <param name="savekey">保存时存放在key前的字符，用来区分不同的存储器.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonValues.#ctor(X.CommLib.Miscellaneous.JsonDatas,System.Type)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.JsonValues"/> class.</summary>
            <param name="jsonDatas">The json datas.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:X.CommLib.Miscellaneous.JsonValues.JsonDatas">
            <summary>
                内部存储对象
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonValues.GetValue``1(System.String,``0)">
            <summary>The get value.</summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The <see cref="!:T"/>.</returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonValues.Save">
            <summary>
                保存设置
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonValues.SetValue(System.String,System.Object)">
            <summary>The add value.</summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonValues.InnerSetValue(System.Object,System.String)">
            <summary>
                添加或设置一个原有值
            </summary>
            <param name="value">The value.</param>
            <param name="key">值对应的 key，如果不设置，则为调用方函数或属性名.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonValues.InnerGetValue``1(``0,System.String)">
            <summary>
                返回指定 key 的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">The default value.</param>
            <param name="key">值对应的 key，如果不设置，则为调用方函数或属性名.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.JsonValues.GetSaveKeyFromType(System.Type)">
            <summary>根据不同的type 返回不同的存储key</summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.LocalInfoStore`1">
            <summary>
            本地信息存储器，存储时记录存储时间，读取时如果过期则返回 null
            </summary>
            <typeparam name="T">需要存储的内部数据，必须实现</typeparam>
        </member>
        <member name="M:X.CommLib.Miscellaneous.LocalInfoStore`1.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.LocalInfoStore`1"/> class.</summary>
            <param name="localName">本地存储的文件名.</param>
            <param name="localDir">本地存储的路径.</param>
        </member>
        <member name="P:X.CommLib.Miscellaneous.LocalInfoStore`1.StorePath">
            <summary>
                数据文件的存储路径
            </summary>
            <value>
                The store path.
            </value>
        </member>
        <member name="M:X.CommLib.Miscellaneous.LocalInfoStore`1.ReadData(System.TimeSpan,`0)">
            <summary>读取本地存储值，指定过期时间</summary>
            <param name="outTime">The out time.</param>
            <param name="defaultData">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.LocalInfoStore`1.ReadData(System.DateTime,`0)">
            <summary>读取本地存储值，如果值已经超过指定的时间，则直接返回默认值，如果不存在也返回默认值</summary>
            <param name="expiryTime">The expiration.</param>
            <param name="defaultData">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.LocalInfoStore`1.ReadData(System.TimeSpan,`0@)">
            <summary>
            读取本地存储
            </summary>
            <param name="outTime">The out time.</param>
            <param name="data">如果存在值，不管是不是过期都返回..</param>
            <returns>
            存在并且没过期返回 true
            不存在或是已过期返回false
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.LocalInfoStore`1.Clean">
            <summary>
            清空本地缓存
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.LocalInfoStore`1.ReadData(System.DateTime,`0@)">
            <summary>
            读取本地存储
            </summary>
            <param name="expiryTime">The expiry time.</param>
            <param name="data">如果存在值，不管是不是过期都返回.</param>
            <returns>
            存在并且没过期返回 true
            不存在或是已过期返回false
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.LocalInfoStore`1.ReadData(`0)">
            <summary>读取本地存储值，不管是否存在过期时间</summary>
            <param name="defaultData">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.LocalInfoStore`1.StoreData(`0)">
            <summary>以当前的时间值存储数据</summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.LocalInfoStore`1.StoreData(`0,System.DateTime)">
            <summary>存储数据</summary>
            <param name="data">The data.</param>
            <param name="storeTime">The store time.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.LocalInfoStore`1.ReadInnerData">
            <summary>
                从本地数据中读出数值
            </summary>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.LocalInfoStore`1.InnerData">
            <summary>
                内部存储数据
            </summary>
        </member>
        <member name="P:X.CommLib.Miscellaneous.LocalInfoStore`1.InnerData.Data">
            <summary>
                Gets or sets the data.
            </summary>
            <value>
                The data.
            </value>
        </member>
        <member name="P:X.CommLib.Miscellaneous.LocalInfoStore`1.InnerData.StoreTime">
            <summary>
                存储时间
            </summary>
            <value>
                The store time.
            </value>
        </member>
        <member name="T:X.CommLib.Miscellaneous.AppConfigReader">
            <summary>
                app.config 读取器
            </summary>
        </member>
        <member name="P:X.CommLib.Miscellaneous.AppConfigReader.AllKeys">
            <summary>
                返回配置中所有的key值
            </summary>
            <value>
                All keys.
            </value>
        </member>
        <member name="P:X.CommLib.Miscellaneous.AppConfigReader.AppSettings">
            <summary>
                当前的配置集合
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.AppConfigReader.Configuration">
            <summary>
                当前需要配置的文件
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.AppConfigReader.SyncRoot">
            <summary>
                同步锁定对象
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.AppConfigReader" /> class. 使用指定路径的App文件进行初始化</summary>
            <param name="appFile">The application file.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.AppConfigReader" /> class.
                使用应用程序配置文件初始化
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.#ctor(System.Configuration.Configuration)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.AppConfigReader" /> class. 使用指定的配置文件进行初始化</summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.GetCallPropertyName(System.String,System.Int32)">
            <summary>返回指定调用次序中的属性名</summary>
            <param name="calltype">是设置还是返回，只能为 get 或是 set .</param>
            <param name="index">The index.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">目前只返回 get 属性的设置</exception>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.LoadConfiguration(System.String)">
            <summary>
                载入指定路径的配置文件
                如果路径文件不存在，则返回一个默认的配置
            </summary>
            <param name="appFile">如果路径为null则打开当前程序对应的配置文件</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">配置文件的后缀必须是.config</exception>
            <exception cref="T:System.ApplicationException">请输入有效的配置文件名</exception>
            <exception cref="T:System.IO.FileNotFoundException">必须要有与配置文件同名的文件</exception>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.GetAppBool(System.String,System.Boolean)">
            <summary>从App.Conifg中取出bool值</summary>
            <param name="keyName">Name of the key.</param>
            <param name="defValue">if set to <c>true</c> [definition value].</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.GetAppDouble(System.String,System.Double)">
            <summary>从app设置中取出指定的数值</summary>
            <param name="keyName">Name of the key.</param>
            <param name="defValue">The definition value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.GetAppDateTime(System.String,System.DateTime)">
            <summary>
            返回一个时间值，如果不存在返回默认值
            </summary>
            <param name="key">The key.</param>
            <param name="defValue">The definition value.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.GetAppDateTime(System.String)">
            <summary>
                返回一个时间值，如果不存在，返回null
            </summary>
            <param name="keyName">The key.</param>
            <returns>System.Nullable&lt;DateTime&gt;.</returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.GetAppInt(System.String,System.Int32)">
            <summary>从app设置中取出指定的数值</summary>
            <param name="keyName">Name of the key.</param>
            <param name="defValue">The definition value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.GetAppString(System.String,System.String)">
            <summary>从appsetting中取出值</summary>
            <param name="keyName">Name of the key.</param>
            <param name="defValue">The definition value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.GetAppTimSpan(System.String,System.TimeSpan)">
            <summary>从app设置中取出指定的时间值，定义的数值以秒为单位</summary>
            <param name="keyName">Name of the key.</param>
            <param name="defValue">The definition value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.GetAppUint(System.String,System.UInt32)">
            <summary>从app设置中取出指定的数值</summary>
            <param name="keyName">Name of the key.</param>
            <param name="defValue">The definition value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.GetAppValue``1(System.String,System.Converter{System.String,``0},``0)">
            <summary>从app设置中取出指定的值</summary>
            <typeparam name="T">输出类型</typeparam>
            <param name="keyName">Name of the key.</param>
            <param name="converter">The converter.</param>
            <param name="defValue">The definition value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.GetAppValue``1(System.String,``0)">
            <summary>
                返回指定键的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyName">Name of the key.</param>
            <param name="defValue">The definition value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.GetConnectionString(System.String)">
            <summary>使用key 返回key对应的连接字符串</summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.Refresh">
            <summary>
                刷新内容，从
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.RemoveKey(System.String)">
            <summary>移除某个定义</summary>
            <param name="keyName">Name of the key. </param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.InnerGetValue``1(``0,System.String)">
            <summary>
                返回指定 key 的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">The default value.</param>
            <param name="key">值对应的 key，如果不设置，则为调用方函数或属性名.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.LoadAppFileFullPath(System.String)">
            <summary>载入配置文件的完整路径</summary>
            <param name="appFile">The app file.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigReader.LoadCurrentConfiguration">
            <summary>
                打开当前文件对应的配置文件
            </summary>
            <returns> </returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.AppConfigWriter">
            <summary>
            App.config 文件写入器
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigWriter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.AppConfigWriter" /> class.
                使用当前运行程序的配置文件进行初始化
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.AppConfigWriter"/> class. 使用配置文件进行初始化
            </summary>
            <param name="appPath">
            The application path.
            </param>
        </member>
        <member name="E:X.CommLib.Miscellaneous.AppConfigWriter.OnPropertyValueChangedEvent">
            <summary>
            属性改变事件
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigWriter.DeleteValue(System.String)">
            <summary>
            移除指定设置
            </summary>
            <param name="keyName">
            Name of the key.
            </param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigWriter.Save">
            <summary>
                保存设置
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigWriter.SetAppValue(System.String,System.Object)">
            <summary>
            设置设置值
            </summary>
            <param name="keyName">
            Name of the key.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigWriter.SetAppValue(System.String,System.Nullable{System.DateTime})">
            <summary>
            写入一个时间值
            </summary>
            <param name="keyName">Name of the key.</param>
            <param name="dateTime">The date time.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigWriter.SetAppValue(System.String,System.String)">
            <summary>
            设置设置值
            </summary>
            <param name="keyName">
            Name of the key.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigWriter.InnerSetValue(System.Object,System.String)">
            <summary>
            添加或设置一个原有值
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="key">
            值对应的 key，如果不设置，则为调用方函数或属性名.
            </param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppConfigWriter.Test">
            <summary>
                进行测试
            </summary>
        </member>
        <member name="T:X.CommLib.Miscellaneous.AppInfoControl">
            <summary>
              程序信息界面（关于界面）
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.AppInfoControl._appInfo">
            <summary>
              程序信息
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppInfoControl.#ctor(X.CommLib.Miscellaneous.ProductAppInfo)">
            <summary>
              Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.AppInfoControl" /> class.
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppInfoControl.AppInfoControl_Load(System.Object,System.EventArgs)">
            <summary>
              界面初始化
            </summary>
            <param name="sender"> The source of the event. </param>
            <param name="e"> The <see cref="T:System.EventArgs" /> instance containing the event data. </param>
        </member>
        <member name="F:X.CommLib.Miscellaneous.AppInfoControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppInfoControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.AppInfoControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:X.CommLib.Miscellaneous.CommandLineArgParser">
            <summary>
                启动参数解析器
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.CommandLineArgParser._args">
            <summary>
                命令参数
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.CommandLineArgParser._splitFlag">
            <summary>
                参数分隔符
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.CommandLineArgParser._startFlag">
            <summary>
                参数启始符
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.CommandLineArgParser.#ctor(System.String[],System.String,System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.CommandLineArgParser" /> class.
                例如： -log:'c:\printer'
            </summary>
            <param name="args">参数数组，如果有多个，第一个为apppath</param>
            <param name="startFlag">启始参数</param>
            <param name="splitFlag">参数与值分隔符</param>
            <param name="headIsPath">第一行参数是路径.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.CommandLineArgParser.#ctor(System.String,System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.CommandLineArgParser" /> class.
            </summary>
            <param name="startFlag">The start flag.</param>
            <param name="splitFlag">The split flag.</param>
            <param name="headIsPath">
                if set to <c>true</c> [head is path].
            </param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.CommandLineArgParser.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.CommandLineArgParser" /> class.
            </summary>
        </member>
        <member name="P:X.CommLib.Miscellaneous.CommandLineArgParser.AppPath">
            <summary>
                程序路径
            </summary>
            <value> The app path base. </value>
        </member>
        <member name="P:X.CommLib.Miscellaneous.CommandLineArgParser.Item(System.String)">
            <summary>
                返回指定键的值，如果不存在返回 null
            </summary>
            <value>
                The <see cref="T:System.String" /> .
            </value>
            <param name="key"> The key. </param>
            <returns> </returns>
        </member>
        <member name="P:X.CommLib.Miscellaneous.CommandLineArgParser.Args">
            <summary>
                命令参数
            </summary>
            <value> The args. </value>
        </member>
        <member name="P:X.CommLib.Miscellaneous.CommandLineArgParser.ArgString">
            <summary>
                命令参数字符串
            </summary>
            <value> The arg string. </value>
        </member>
        <member name="M:X.CommLib.Miscellaneous.CommandLineArgParser.GetValueString(System.String,System.String)">
            <summary>
                返回指定key的值
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.CommandLineArgParser.GetValue``1(System.String,``0)">
            <summary>
                返回指定key的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.CommandLineArgParser.FormatValue(System.String)">
            <summary>
                格式化参数值,注意，前后加入了"，那么\就必须加转义
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.CommandLineArgParser.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.CommandLineArgParser.AddArgs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                添加一组参数
            </summary>
            <param name="args"> The args. </param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:X.CommLib.Miscellaneous.CommandLineArgParser.Parse(System.String,System.String@,System.String@)">
            <summary>
                解析值
            </summary>
            <param name="arg"> The arg. </param>
            <param name="key"> The key. </param>
            <param name="val"> The val. </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.CommandLineArgParser.AddArgs(System.String,System.String[])">
            <summary>
                添加参数
            </summary>
            <param name="key">The key.</param>
            <param name="values">The value.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.CommandLineArgParser.TryAddArg(System.String,System.Object)">
            <summary>
                尝试添加值，如果key已经存在，则不进行覆盖
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>如果设置了新值返回 true,否则返回 false</returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.CommandLineArgParser.AddArg(System.String,System.Object)">
            <summary>
                添加参数
            </summary>
            <param name="key"> The key. </param>
            <param name="value"> The value. </param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.CommandLineArgParser.RemoveArgs(System.String[])">
            <summary>
                移除参数
            </summary>
            <param name="keys"> The keys. </param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.CommandLineArgParser.SplitArgs(System.String)">
            <summary>
                解析命令行参数
            </summary>
            <param name="unsplitArgumentLine">The unsplit argument line.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Unable to split argument.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception"></exception>
        </member>
        <member name="T:X.CommLib.Miscellaneous.ComObjectDisposeHelper">
            <summary>
                com对象释放帮助器
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ComObjectDisposeHelper.DisposeObject(System.Object)">
            <summary>
                显示释放com对象，并调用垃圾回收功能
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ComObjectDisposeHelper.ReleaseObject(System.Object)">
            <summary>
                显示释放com对象
            </summary>
            <param name="obj"> </param>
        </member>
        <member name="T:X.CommLib.Miscellaneous.EnumExtensionsTester">
            <summary>
                EnumExtensions测试器
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumExtensionsTester.Test">
            <summary>
                测试
            </summary>
        </member>
        <member name="T:X.CommLib.Miscellaneous.EnumExtensionsTester.TestNum">
            <summary>
                测试使用枚举值
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.EnumExtensionsTester.TestNum.Aaa">
            <summary>
                1
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.EnumExtensionsTester.TestNum.Bbb">
            <summary>
                2
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.EnumExtensionsTester.TestNum.Ccc">
            <summary>
                4
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.EnumExtensionsTester.TestNum.Ddd">
            <summary>
                8
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.EnumExtensionsTester.TestNum.Eee">
            <summary>
                16
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.EnumExtensionsTester.TestNum.Fff">
            <summary>
                32
            </summary>
        </member>
        <member name="T:X.CommLib.Miscellaneous.EnumExtensions`1">
            <summary>枚举辅助函数</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:X.CommLib.Miscellaneous.EnumExtensions`1.EnumValue">
            <summary>
                当前操作的枚举值
            </summary>
            <value>
                The value.
            </value>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumExtensions`1.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.EnumExtensions`1" /> class.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumExtensions`1.#ctor(`0[])">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.EnumExtensions`1" /> class. Initializes a new instance of the
                <see cref="T:X.CommLib.Miscellaneous.EnumExtensions`1" /> class.
            </summary>
            <param name="values">The value.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumExtensions`1.Combin(`0[])">
            <summary>合并值</summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumExtensions`1.GetDescriptions">
            <summary>
                返回带描述符的枚举对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumExtensions`1.GetDescription(`0)">
            <summary>
                返回枚举值的描述
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumExtensions`1.GetValues">
            <summary>
                返回该枚举所有可以包括的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumExtensions`1.Parse(System.String)">
            <summary>解析一个枚举值</summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumExtensions`1.Parse(System.Object)">
            <summary>解析一个枚举值</summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumExtensions`1.TryParse(System.Object,`0)">
            <summary>解析指定的值</summary>
            <param name="value">The value.</param>
            <param name="defaultValue">解析失败时返回的值.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumExtensions`1.Add(`0[])">
            <summary>添加一个(组)新的值</summary>
            <param name="values">The value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumExtensions`1.GetEnumValues">
            <summary>
                返回当前的包括值
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumExtensions`1.Has(`0)">
            <summary>是否包含指定值</summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [has] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumExtensions`1.Is(`0)">
            <summary>两个值是否相等</summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumExtensions`1.Remove(`0)">
            <summary>从值中移除某个值</summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.EnumExtensions`1.ToString">
            <summary>
                返回字符串的字符串格式，如果有多个，使用|进行分隔
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.StopWatcher">
            <summary>
                计时器，仅在定义了debug的情况下可用
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.StopWatcher.enable">
            <summary>
                是否启用该功能
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.StopWatcher.name">
            <summary>
                跑表的名称
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.StopWatcher.stopwatch">
            <summary>
                内置跑表
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.StopWatcher.timeSpanList">
            <summary>
                总的时间列表
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.StopWatcher.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.StopWatcher"/> class.</summary>
            <param name="name">跑表名称.</param>
            <param name="enable">是否启用该功能</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.StopWatcher.Recode(System.String,System.Boolean)">
            <summary>
            输出记录并根据参数决定是否重启计时器
            </summary>
            <param name="title">The title.</param>
            <param name="restart">if set to <c>true</c> [re start].</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.StopWatcher.ShowDetail(System.Text.Encoding)">
            <summary>
                显示细节
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.StopWatcher.Start(System.String)">
            <summary>启动跑表</summary>
            <param name="title">The title.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.StopWatcher.Stop(System.String,System.Boolean)">
            <summary>Stops the specified title.</summary>
            <param name="title">The title.</param>
            <param name="showDetail">if set to <c>true</c> [show detail].</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.StopWatcher.OutputInfos(System.String[])">
            <summary>输出信息</summary>
            <param name="infos">The infos.</param>
        </member>
        <member name="T:X.CommLib.Miscellaneous.WorkTimer">
            <summary>
                表示一组时间间隔
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.WorkTimer.timeRangeList">
            <summary>
                一组时间范围
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.WorkTimer.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.WorkTimer" /> class.
            </summary>
        </member>
        <member name="P:X.CommLib.Miscellaneous.WorkTimer.EmptyIsAllWorkTime">
            <summary>
                如果未设置是否是全天工作日
            </summary>
            <value>
                <c>true</c> if [empty is all work time]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:X.CommLib.Miscellaneous.WorkTimer.Value">
            <summary>
                返回字符串表示
            </summary>
            <value>
                The value.
            </value>
        </member>
        <member name="M:X.CommLib.Miscellaneous.WorkTimer.IsInTime(System.DateTime)">
            <summary>
                指定时间是否在工作范围内
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>
                <c>true</c> if [is in time] [the specified date time]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.WorkTimer.IsInTime">
            <summary>
                当前时间是否在工作范围内
            </summary>
            <returns>
                <c>true</c> if [is in time]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.WorkTimer.LoadTimeRange(System.String)">
            <summary>
                载入一个字符串表示的时间范围格式为HH:mm:ss-HH:mm:ss，如果有多个，使用;进行分隔
                如果结束时间小于开始时间，则结束时间为第二天
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.WorkTimer.LoadTimeRanges(System.String[])">
            <summary>
                解析一组字符串表示的时间范围，每一个格式为HH:mm:ss-HH:mm:ss
                如果结束时间小于开始时间，则结束时间为第二天
            </summary>
            <param name="times">The times.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.WorkTimer.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.WorkTimer.Test">
            <summary>
                Tests this instance.
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.WorkTimer.IsInTime(System.TimeSpan)">
            <summary>
                指定的时间是否是工作时间内
            </summary>
            <param name="timeOfDay">The time of day.</param>
            <returns><c>true</c> if [is in time] [the specified time of day]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.WorkTimer.ParseTimeRange(System.String)">
            <summary>
                解析一个时间范围
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.WorkTimer.TimeRange">
            <summary>
                表示一个时间范围
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.WorkTimer.TimeRange.ParseTime(System.String)">
            <summary>
                解析一个时间，并格式化为24小时内的时间
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="P:X.CommLib.Miscellaneous.WorkTimer.TimeRange.Begin">
            <summary>
                开始时间
            </summary>
            <value>
                The begin.
            </value>
        </member>
        <member name="P:X.CommLib.Miscellaneous.WorkTimer.TimeRange.End">
            <summary>
                结束时间
            </summary>
            <value>
                The end.
            </value>
        </member>
        <member name="M:X.CommLib.Miscellaneous.WorkTimer.TimeRange.TrimTime(System.TimeSpan)">
            <summary>
                去掉时间值中的日部分，使时间在24小时以内
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.WorkTimer.TimeRange.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:X.CommLib.Miscellaneous.WorkTimer.TimeRange.Value">
            <summary>
                返回字符串表示，可以直接填写入设置中
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.WorkTimer.TimeRange.IsInTime(System.TimeSpan)">
            <summary>
                指定的时间是否在时间范围中
            </summary>
            <param name="timeOfDay">The time of day.</param>
            <returns>
                <c>true</c> if [is in time] [the specified time of day]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.WorkTimer.TimeRange.CreateTimeRange(System.String)">
            <summary>
                创建一个时间间隔
            </summary>
            <param name="time">The time.</param>
            <returns>X.CommLib.Miscellaneous.WorkTimer.TimeRange.</returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.GetSystemInfo">
            <summary>
                说明：这个类主要用来展示如何利用WMI来获取一些操作系统的信息
                作者：周公
                时间：2008-1-14
                首发地址：http://blog.csdn.net/zhoufoxcn
            </summary>
        </member>
        <member name="T:X.CommLib.Miscellaneous.GetSystemInfo.TOKEN_ACCESS">
            <summary>
                token访问权限
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.GetSystemInfo.TOKEN_ACCESS.TOKEN_ASSIGN_PRIMARY">
            <summary>The toke n_ assig n_ primary.</summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.GetSystemInfo.TOKEN_ACCESS.TOKEN_DUPLICATE">
            <summary>The toke n_ duplicate.</summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.GetSystemInfo.TOKEN_ACCESS.TOKEN_IMPERSONATE">
            <summary>The toke n_ impersonate.</summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.GetSystemInfo.TOKEN_ACCESS.TOKEN_QUERY">
            <summary>The toke n_ query.</summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.GetSystemInfo.TOKEN_ACCESS.TOKEN_QUERY_SOURCE">
            <summary>The toke n_ quer y_ source.</summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.GetSystemInfo.TOKEN_ACCESS.TOKEN_ADJUST_PRIVILEGES">
            <summary>The toke n_ adjus t_ privileges.</summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.GetSystemInfo.TOKEN_ACCESS.TOKEN_ADJUST_GROUPS">
            <summary>The toke n_ adjus t_ groups.</summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.GetSystemInfo.TOKEN_ACCESS.TOKEN_ADJUST_DEFAULT">
            <summary>The toke n_ adjus t_ default.</summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.GetSystemInfo.TOKEN_ACCESS.TOKEN_ADJUST_SESSIONID">
            <summary>The toke n_ adjus t_ sessionid.</summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.GetSystemInfo.TOKEN_ACCESS.TOKEN_READ">
            <summary>The toke n_ read.</summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.GetSystemInfo.TOKEN_ACCESS.TOKEN_WRITE">
            <summary>The toke n_ write.</summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.GetSystemInfo.TOKEN_ACCESS.TOKEN_EXECUTE">
            <summary>The toke n_ execute.</summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetBiosSerialNumber">
            <summary>
                返回biso的SerialNumber
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetClientMachineId">
            <summary>
                返回用户机器码
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetCompanyName">
            <summary>
                返回计算机名
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetCpuId">
            <summary>
                查询CPU编号
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetDriverInfo">
            <summary>
                获取本地驱动器信息
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetGroupName">
            <summary>
                组信息
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetIeVersion">
            <summary>
                返回系统的ie浏览器的版本，如果浏览器程序不存在返回null
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetMachineCode">
            <summary>
                返回机器码
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetMainBoardId">
            <summary>
                主板编号
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetMainHardDiskId">
            <summary>
                查询硬盘编号
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetManagementObjs(System.String,System.String,System.String[])">
            <summary>
                查询系统信息
            </summary>
            <param name="column">The column.</param>
            <param name="from">From.</param>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetNetworkAdapterId">
            <summary>
                网卡编号
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetParentProcessId(System.Int32)">
            <summary>返回指定进程的父进程id,如果不存在返回 -1</summary>
            <param name="processId">The process identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">@当前进程Id号不能为空;processId</exception>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetProcessPath(System.Int32)">
            <summary>返回指定进程的路径</summary>
            <param name="processId">The process id.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetProcessWindowsIdentity(System.IntPtr)">
            <summary>Gets the process windows identity.</summary>
            <param name="processHandle">The process handle.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetSerialNumber">
            <summary>
                获取操作系统序列号
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetSystembit">
            <summary>
                返回cpu操作系统的位数
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.Is64BitProcess">
            <summary>
                当前是否在64位状态下
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.Is64BitSystem">
            <summary>
                当前操作系统是否是64位的
            </summary>
            <returns> true:是46位，false:非64位, null 发生错误 </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.IsAdministrator(System.IntPtr)">
            <summary>管理员身份运行</summary>
            <param name="processHandle">The process handle.</param>
            <returns><c>true</c> if the specified process handle is administrator; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.IsWow64Process">
            <summary>
                当前进程是否是wow64程序，wow64表示系统为64位上运行的模拟32位程序
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.TryIsAdministrator(System.IntPtr)">
            <summary>尝试判断当前是否管理员身份运行，</summary>
            <param name="processHandle">The process handle.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.CloseHandle(System.IntPtr)">
            <summary>Closes the handle.</summary>
            <param name="handle">The handle.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.ConvertValue``1(System.Object)">
            <summary>
                将指定的值进行格式转换
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetManagementFirstObjObjValue``1(System.String,System.String,``0,System.String[])">
            <summary>
                返回查询值，并进行转型 ，如果不存在值，则返回defValue
                这里假设column中仅查询了一列
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="column">The column.</param>
            <param name="from">From.</param>
            <param name="defValue">The def value.</param>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetManagementFirstObjStringValue(System.String,System.String,System.String[])">
            <summary>
                返回查询结果中指定属性的信息的字符串表示中的第1个值，如果没有值返回""
            </summary>
            <param name="column">The column.</param>
            <param name="from">From.</param>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetManagementObjValues(System.String,System.String,System.String[])">
            <summary>
                返回查询结果中指定属性的信息，假设column中仅查询了一页值
            </summary>
            <param name="column">The column.</param>
            <param name="from">From.</param>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetManagementObjValues``1(System.String,System.String,System.String[])">
            <summary>
                返回内核总数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="column">The column.</param>
            <param name="from">From.</param>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetProcessCount">
            <summary>
                返回内核数
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.GetProcessCoreCount">
            <summary>
                返回内核数
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.IsWow64Process(System.IntPtr,System.Boolean@)">
            <summary>当前是否是运行在64位系统下的32位程序</summary>
            <param name="processHandle"></param>
            <param name="wow64Process"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.OpenProcessToken(System.IntPtr,X.CommLib.Miscellaneous.GetSystemInfo.TOKEN_ACCESS,System.IntPtr@)">
            <summary>
                Opens the process token.
            </summary>
            <param name="processHandle">The process handle.</param>
            <param name="desiredAccess">The desired access.</param>
            <param name="tokenHandle">The token handle.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.StrFormatByteSize(System.Int64,System.Text.StringBuilder,System.Int32)">
            <summary>
                返回文件大小的字符串表示
            </summary>
            <param name="fileSize">Size of the file.</param>
            <param name="buffer">The buffer.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.StrFormatByteSize(System.Int64)">
            <summary>
                返回文件大小的字符串表示
            </summary>
            <param name="fileSize">Size of the file.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.GetSystemInfo.Test">
            <summary>
                输出能获取的信息
            </summary>
        </member>
        <member name="T:X.CommLib.Miscellaneous.ObjectDetailOutput">
            <summary>
                对象详细信息输出器
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ObjectDetailOutput.innerObject">
            <summary>
                The _obj.
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.ObjectDetailOutput" /> class. 需要输出详细信息对象
            </summary>
            <param name="obj">
                The object.
            </param>
        </member>
        <member name="P:X.CommLib.Miscellaneous.ObjectDetailOutput.Propertys">
            <summary>
                返回对象的属性
            </summary>
        </member>
        <member name="P:X.CommLib.Miscellaneous.ObjectDetailOutput.Item(System.Reflection.PropertyInfo)">
            <summary>
                返回指定对象的值
            </summary>
            <value>
                The <see cref="T:System.Object" />.
            </value>
            <param name="property">
                The property.
            </param>
            <returns>
                The <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.Convert``1(System.Object,``0)">
            <summary>
                转为指定的类型
            </summary>
            <typeparam name="T">
                值类型
            </typeparam>
            <param name="value">
                The obj.
            </param>
            <param name="defaultValue">
                The default value.
            </param>
            <returns>
                The <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.ConvertToVersion(System.Object)">
            <summary>
                转为version值
            </summary>
            <param name="value">
                The value.
            </param>
            <returns>
                The <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
                返回指定方法的属性，如果不存在返回null
            </summary>
            <typeparam name="T">
                值类型
            </typeparam>
            <param name="member">
                The member.
            </param>
            <returns>
                The <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.GetDisplayName(System.Reflection.PropertyInfo)">
            <summary>
                返回指定属性的display名称
            </summary>
            <param name="property">
                The property.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.HasObsoleteAttribute(System.Object)">
            <summary>
                判断对象是否具有 ObsoleteAttribute 属性
            </summary>
            <param name="obj">The object.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.LoadEncryptedStream``1(System.IO.Stream,System.Byte[],System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
                从加密流中解密对象
            </summary>
            <typeparam name="T">
                值类型
            </typeparam>
            <param name="stream">
                The stream.
            </param>
            <param name="key">
                The key.
            </param>
            <param name="iv">
                The iv.
            </param>
            <param name="provider">
                使用的解密算法，默认使用TripleDESCryptoServiceProvider算法
            </param>
            <returns>
                The <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.LoadFromBinaryFile``1(System.String)">
            <summary>
                根据二进制序列化文件创建对象
            </summary>
            <typeparam name="T">
                值类型
            </typeparam>
            <param name="filePat">
                The file pat.
            </param>
            <returns>
                The <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.LoadFromBinaryStream``1(System.IO.Stream)">
            <summary>
                将对象从二进制流中载入
            </summary>
            <typeparam name="T">
                返回值类型
            </typeparam>
            <param name="stream">
                The stream.
            </param>
            <returns>
                The <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.LoadFromJsonFile``1(System.String,``0,System.Text.Encoding)">
            <summary>
                从指定的文件中载入
            </summary>
            <typeparam name="T">
                返回值类型
            </typeparam>
            <param name="filePath">
                The file path.
            </param>
            <param name="defaultObject">
                The default object.
            </param>
            <param name="encoding">
                The encoding.
            </param>
            <returns>
                The <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.LoadFromJsonFile``1(System.String,System.Text.Encoding)">
            <summary>
                从指定的文件中载入
            </summary>
            <typeparam name="T">
                返回值类型
            </typeparam>
            <param name="filePath">
                The file path.
            </param>
            <param name="encoding">
                The encoding.
            </param>
            <returns>
                The <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.LoadFromJsonString``1(System.String)">
            <summary>
                从json 字符串中反序列化
            </summary>
            <typeparam name="T">
                返回值类型
            </typeparam>
            <param name="json">
                The json.
            </param>
            <returns>
                The <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.LoadFromJsonString(System.String,System.Type)">
            <summary>
                从 json 字符串中创建指定的类型对象
            </summary>
            <param name="json">
                The json.
            </param>
            <param name="type">
                The type.
            </param>
            <returns>
                The <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.LoadFromXmlFile``1(System.String)">
            <summary>
                从指定的xml文件中反序列化对象
            </summary>
            <typeparam name="T">
                值类型
            </typeparam>
            <param name="filePath">
                The file path.
            </param>
            <returns>
                The <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.LoadFromXmlFile(System.String,System.Type)">
            <summary>
                从文件中载入对象
            </summary>
            <param name="filePath">
                The file path.
            </param>
            <param name="type">
                The type.
            </param>
            <returns>
                The <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.LoadFromXmlStream``1(System.IO.TextReader)">
            <summary>
                从流中载入指定类型的对象
            </summary>
            <typeparam name="T">
                值类型
            </typeparam>
            <param name="stream">
                The stream.
            </param>
            <returns>
                The <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.LoadFromXmlStream(System.IO.TextReader,System.Type)">
            <summary>
                xml 流中载入对象
            </summary>
            <param name="stream">
                The stream.
            </param>
            <param name="type">
                The type.
            </param>
            <returns>
                The <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.LoadFromXmlString``1(System.String)">
            <summary>
                从xml字符串中返回序列化对象
            </summary>
            <typeparam name="T">
                值类型
            </typeparam>
            <param name="content">
                The content.
            </param>
            <returns>
                The <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.ToString(System.Object)">
            <summary>
                tostring 的简化函数
            </summary>
            <param name="obj">
                The object.
            </param>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.TryLoadFromXmlFile``1(System.String,``0)">
            <summary>
                尝试从配置文件中载入对象，如果文件不存在或是文件大小为0,则返回默认值
            </summary>
            <typeparam name="T">
                值类型
            </typeparam>
            <param name="filePath">
                The file path.
            </param>
            <param name="defaultValue">
                The default value.
            </param>
            <returns>
                The <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.Convert``1">
            <summary>
                转为指定的类型
            </summary>
            <typeparam name="T">
                值类型
            </typeparam>
            <returns>
                The <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.CopyValueTo(System.Object,System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                复制内置对象的属性值至obj中
            </summary>
            <param name="obj">The object.</param>
            <param name="targetType">目标的类型值，属性及字段的复制在该类型下进行，如果不设置则默认为源对象类型</param>
            <param name="ignore">复制时需要ignore的属性名</param>
            <exception cref="T:System.ArgumentNullException">obj;@不能使用空对象接收属性值</exception>
            <exception cref="T:System.NotSupportedException">
                目标对象类型与复制类型不匹配
                or
                源对象类型与复制类型不匹配
            </exception>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.GetDescription">
            <summary>
                返回对象的Description描述，如果描述的对象不存在，返回null
            </summary>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.GetDescription(System.String)">
            <summary>
                返回指定描述的Description属性
            </summary>
            <param name="propertyName">
                Name of the property.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.GetDisplayName(System.String)">
            <summary>
                返回指定属性的display名称，如果不存在返回 null
            </summary>
            <param name="propertyName">
                Name of the property.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.GetPropertyInfo(System.String)">
            <summary>
                返回指定名称的属性对象，如果不存在返回 null
            </summary>
            <param name="propertyName">
                Name of the property.
            </param>
            <returns>
                The <see cref="T:System.Reflection.PropertyInfo" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.GetPropertyValue(System.String,System.Object[])">
            <summary>
                返回指定属性的值
            </summary>
            <param name="propertyName">
                Name of the property.
            </param>
            <param name="index">
                如果是索引属性，指定索引值，如果非索引属性则需要使用null.
            </param>
            <returns>
                The <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.GetPropertyValue``1(System.String,``0,System.Object[])">
            <summary>
                返回指定属性的值，并转为指定的属性
            </summary>
            <typeparam name="T">
                值类型
            </typeparam>
            <param name="propertyName">
                Name of the property.
            </param>
            <param name="defaultValue">
                The default value.
            </param>
            <param name="index">
                The index.
            </param>
            <returns>
                The <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.SaveToBinaryFile(System.String)">
            <summary>
                将数据保存到二进制流文件中
            </summary>
            <param name="filePath">
                The file path.
            </param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.SaveToBinaryStream(System.IO.Stream)">
            <summary>
                将数据保存到二进制流中
            </summary>
            <param name="stream">
                The stream.
            </param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.SaveToEncryptedStream(System.IO.Stream,System.Byte[],System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
                将数据加密，然后保存至淤中
            </summary>
            <param name="stream">
                The stream.
            </param>
            <param name="key">
                The key.
            </param>
            <param name="iv">
                The iv.
            </param>
            <param name="provider">
                解密算法，默认使用TripleDESCryptoServiceProvider算法
            </param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.SaveToJsonFile(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            保存到json格式文件
            </summary>
            <param name="filePath">The file path.</param>
            <param name="encoding">The encoding.</param>
            <param name="indented">if set to <c>true</c> [indented].</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.SaveToJsonString(System.Boolean)">
            <summary>
            序列化为 json 字符串
            </summary>
            <param name="indented">if set to <c>true</c> [indented].</param>
            <returns>
            The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.SaveToXmlFile(System.String)">
            <summary>
                将对象序列化到xml文件中
            </summary>
            <param name="filePath">
                The file Path.
            </param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.SaveToXmlStream(System.IO.TextWriter)">
            <summary>
                将对象序列化到流中
            </summary>
            <param name="stream">
                The stream.
            </param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.SaveToXmlString">
            <summary>
                将对象序列化到string中
            </summary>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.ToString(System.String[])">
            <summary>
                返回文字表示，可以指定哪些属性不显示出来
            </summary>
            <param name="hiddenProperties">
                The hidden properties.
            </param>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
            <exception cref="T:System.NotSupportedException">
                集合为只读。
            </exception>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.ToString">
            <summary>
                输出包装对象的的详细信息
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.Test">
            <summary>
                内部测试
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.TestConvert">
            <summary>
                类型转换
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.TestEncryptedData">
            <summary>
                对加密数据进行处理
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.FilterDefaultMemberPropertys(System.Type,System.Reflection.PropertyInfo[])">
            <summary>
                从属性列表中过滤过滤器就是this[0]之类的属性
            </summary>
            <param name="type">
            </param>
            <param name="propertyInfos">
            </param>
            <returns>
                The <see cref="!:PropertyInfo[]" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.FormatOutputValue(System.Object)">
            <summary>
                格式化需要输出的值
            </summary>
            <param name="value">
                The value.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.GetDescription(System.Reflection.MemberInfo)">
            <summary>
                返回指定描述的Description属性
            </summary>
            <param name="property">
                The property info.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ObjectDetailOutput.GetDescriptionAttribute(System.Reflection.MemberInfo)">
            <summary>
                返回对象的描述属性
            </summary>
            <param name="memberInfo">
                The type.
            </param>
            <returns>
                The <see cref="T:System.ComponentModel.DescriptionAttribute" />.
            </returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.ObjectDetailOutput.TestClass">
            <summary>
                用来进行测试的类
            </summary>
        </member>
        <member name="P:X.CommLib.Miscellaneous.ObjectDetailOutput.TestClass.TestString">
            <summary>Gets the test string.</summary>
        </member>
        <member name="T:X.CommLib.Miscellaneous.ProductAppInfo">
            <summary>
                产品信息
            </summary>
        </member>
        <member name="T:X.CommLib.Miscellaneous.ProductAppInfo.MachineType">
            <summary>
                pe头类型
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineUnknown">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ UNKNOWN
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineAm33">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ A M33
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineAmd64">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ AM D64
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineArm">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ ARM
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineEbc">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ EBC
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineI386">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ i386
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineIa64">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ I a64
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineM32R">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ M32 R
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineMips16">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ MIP S16
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineMipsfpu">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ MIPSFPU
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineMipsfpu16">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ MIPSFP u16
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachinePowerpc">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ POWERPC
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachinePowerpcfp">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ POWERPCFP
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineR4000">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ R4000
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineSh3">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ S h3
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineSh3Dsp">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ S h3 DSP
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineSh4">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ S h4
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineSh5">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ S h5
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineThumb">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ THUMB
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo.MachineType.ImageFileMachineWcemipsv2">
            <summary>
                The IMAG e_ FIL e_ MACHIN e_ WCEMIPS v2
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ProductAppInfo._innerAssembly">
            <summary>
                需要查询信息的程序集
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProductAppInfo.GetFileInternalName(System.String)">
            <summary>
                返回文件的内部名称
            </summary>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.ProductAppInfo.GetAssemblyAttributeValueFunc`1">
            <summary>获取属性值的函数定义</summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="assemblyAttribute">The assembly attribute.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProductAppInfo.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.ProductAppInfo" /> class.
                使用当前运行的程序集进行初始化
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProductAppInfo.#ctor(System.Reflection.Assembly)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.ProductAppInfo" /> class. 使用指定的程序集进行初始化</summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProductAppInfo.Load(System.String)">
            <summary>
            载入指定路径的程序集
            </summary>
            <param name="assemblyFile"></param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProductAppInfo.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.ProductAppInfo" /> class.
            </summary>
            <param name="assemblyFile">The assembly file.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProductAppInfo.Test">
            <summary>
                进行测试
            </summary>
        </member>
        <member name="P:X.CommLib.Miscellaneous.ProductAppInfo.Configurations">
            <summary>
                返回 Configurationses属性，并按空格进行分隔
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProductAppInfo.LoadAssembly(System.String)">
            <summary>
                Loads the assembly.
            </summary>
            <param name="assemblyFile">The assembly file.</param>
            <returns></returns>
        </member>
        <member name="P:X.CommLib.Miscellaneous.ProductAppInfo.AssemblyCompany">
            <summary>
                获取程序集的公司信息
            </summary>
        </member>
        <member name="P:X.CommLib.Miscellaneous.ProductAppInfo.AssemblyCopyright">
            <summary>
                获取程序集的版本
            </summary>
        </member>
        <member name="P:X.CommLib.Miscellaneous.ProductAppInfo.AssemblyDescription">
            <summary>
                程序集说明
            </summary>
        </member>
        <member name="P:X.CommLib.Miscellaneous.ProductAppInfo.AssemblyProduct">
            <summary>
                获取产品名称
            </summary>
        </member>
        <member name="P:X.CommLib.Miscellaneous.ProductAppInfo.AssemblyTitle">
            <summary>
                返回程序集标题
            </summary>
        </member>
        <member name="P:X.CommLib.Miscellaneous.ProductAppInfo.AssemblyVersion">
            <summary>
                返回程序集版本
            </summary>
        </member>
        <member name="P:X.CommLib.Miscellaneous.ProductAppInfo.FileName">
            <summary>
                Gets the name of the file.
            </summary>
            <value>
                The name of the file.
            </value>
        </member>
        <member name="P:X.CommLib.Miscellaneous.ProductAppInfo.FilePath">
            <summary>
                执行程序的路径
            </summary>
            <value>
                The file path.
            </value>
        </member>
        <member name="P:X.CommLib.Miscellaneous.ProductAppInfo.FileVersion">
            <summary>
                返回当前产品的文件版本
            </summary>
            <value> The file version. </value>
        </member>
        <member name="P:X.CommLib.Miscellaneous.ProductAppInfo.ProductVersion">
            <summary>
                返回当前产品的版本
            </summary>
        </member>
        <member name="P:X.CommLib.Miscellaneous.ProductAppInfo.IsTrial">
            <summary>
                当前在 Configurations 中是否设置了TRIAL
            </summary>
            <value>
                当前是否设置了试用属性
            </value>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProductAppInfo.GetDllMachineType(System.String)">
            <summary>返回程序的类型(32/64之类的)</summary>
            <param name="dllPath">The DLL path.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Can't find PE header</exception>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProductAppInfo.GetFileVersion(System.String)">
            <summary>返回指定文件的文件版本</summary>
            <param name="filePath">The file path. </param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProductAppInfo.GetProductVersion(System.String)">
            <summary>返回指定文件的产品版本</summary>
            <param name="filePath">The file path. </param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProductAppInfo.CreateAppInfoControl">
            <summary>
                返回一个通用的描述程序信息的界面
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProductAppInfo.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProductAppInfo.GetAssemblyAttribute``1(System.Reflection.Assembly)">
            <summary>返回指定类型的特点属性，如果不存在返回null</summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProductAppInfo.GetAssemblyAttributeValue``1(System.Reflection.Assembly,X.CommLib.Miscellaneous.ProductAppInfo.GetAssemblyAttributeValueFunc{``0})">
            <summary>返回指定属性值</summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="assembly">The assembly.</param>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.ProFileCtrl">
            <summary>
            对ini文件进行操作
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProFileCtrl.GetPrivateProfileInt(System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets the private profile int.
            </summary>
            <param name="lpAppName">Name of the lp app.</param>
            <param name="lpKeyName">Name of the lp key.</param>
            <param name="nDefault">The n default.</param>
            <param name="lpFileName">Name of the lp file.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProFileCtrl.GetPrivateProfileStringEx(System.String,System.String,System.String,System.String,System.UInt32)">
            <summary>
            从ini文件中取值
            </summary>
            <param name="appName"></param>
            <param name="keyName"></param>
            <param name="filePath"></param>
            <param name="defValue"></param>
            <param name="nSize"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProFileCtrl.WritePrivateProfileStringEx(System.String,System.String,System.String,System.String)">
            <summary>
            写入值到ini中，如果失败，抛出异常
            </summary>
            <param name="appName"></param>
            <param name="keyName"></param>
            <param name="value"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProFileCtrl.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            写入值到ini中
            </summary>
            <param name="lpAppName"></param>
            <param name="lpKeyName"></param>
            <param name="lpString"></param>
            <param name="lpFileName"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ProFileCtrl.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.UInt32,System.String)">
            <summary>
            从ini文件中取值
            </summary>
            <param name="lpAppName"></param>
            <param name="lpKeyName"></param>
            <param name="lpDefault"></param>
            <param name="lpReturnedString"></param>
            <param name="nSize"></param>
            <param name="lpFileName"></param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.PropertyValueChangedEventHandler">
            <summary>
            属性值改变事件定义 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:X.CommLib.Miscellaneous.PropertyValueChangedEventArgs">
            <summary>
            属性值改变事件
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.PropertyValueChangedEventArgs.#ctor(System.String)">
            <summary>
            改变的属性名称
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="P:X.CommLib.Miscellaneous.PropertyValueChangedEventArgs.PropertyName">
            <summary>
            改变的属性名称
            </summary>
        </member>
        <member name="T:X.CommLib.Miscellaneous.SerializableDictionary`2">
            <summary>
            支持序列化的Dictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:X.CommLib.Miscellaneous.SerializableDictionary`2.GetSchema">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            将信息写入到xml中
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:X.CommLib.Miscellaneous.SingleInstance">
            <summary>
                只启动一个应用程序实例控制类
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.SingleInstance.WS_SHOWNORMAL">
            <summary>
                以默认状态显示窗口
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.SingleInstance.mutex">
            <summary>The mutex.</summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.SingleInstance.runFlagFullname">
            <summary>
                The run flag fullname
            </summary>
        </member>
        <member name="P:X.CommLib.Miscellaneous.SingleInstance.RunFlag">
            <summary>
                获取或设置程序运行标志，必须符合Windows文件命名规范
                实现生成临时文件为依据，如果修改成设置注册表，那就不需要符合文件命名规范。
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.SingleInstance.CreateMutex">
            <summary>
                创建应用程序进程Mutex
            </summary>
            <returns>返回创建结果，true表示创建成功，false创建失败。</returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.SingleInstance.CreateMutex(System.String)">
            <summary>创建应用程序进程Mutex</summary>
            <param name="name">Mutex名称</param>
            <returns>返回创建结果，true表示创建成功，false创建失败。</returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.SingleInstance.DisposeRunFlag">
            <summary>
                释放初始化程序运行标志，如果释放失败将抛出异常
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.SingleInstance.GetRunningInstance">
            <summary>
                获取应用程序进程实例,如果没有匹配进程，返回Null
            </summary>
            <returns>返回当前Process实例</returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.SingleInstance.HandleRunningInstance(System.Diagnostics.Process)">
            <summary>获取应用程序句柄，设置应用程序前台运行，并返回bool值</summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.SingleInstance.HandleRunningInstance">
            <summary>
                获取窗口句柄，设置应用程序前台运行，并返回bool值，重载方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.SingleInstance.InitRunFlag">
            <summary>
                初始化程序运行标志，设置成功，返回true，已经设置返回false，设置失败将抛出异常
            </summary>
            <returns>返回设置结果</returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.SingleInstance.IsVsHostMode">
            <summary>
                当前是否在vs的宿主模式下
            </summary>
            <returns>
                <c>true</c> if [is vs host mode]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.SingleInstance.ReleaseMutex">
            <summary>
                释放Mutex
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.SingleInstance.SetForegroundWindow(System.IntPtr)">
            <summary>设置窗口置前</summary>
            <param name="hWnd">The h WND.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.SingleInstance.SetWindowTop(System.IntPtr)">
            <summary>设置窗口到最前端</summary>
            <param name="hWnd"></param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.SingleInstance.SetWindowTop(System.Windows.Forms.Form)">
            <summary>将窗口设置至最前端</summary>
            <param name="form">The form.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.SingleInstance.ShowWindowAsync(System.IntPtr,System.Int32)">
            <summary>设置窗口状态</summary>
            <param name="hWnd">The h WND.</param>
            <param name="cmdShow">The CMD show.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.ValuesCore">
            <summary>
                通用集合类，并可支持序列化
            </summary>
        </member>
        <member name="E:X.CommLib.Miscellaneous.ValuesCore.OnPropertyValueChangedEvent">
            <summary>
                属性值被改变了
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.ValuesCore._values">
            <summary>
                保存值
            </summary>
        </member>
        <member name="P:X.CommLib.Miscellaneous.ValuesCore.Values">
            <summary>
                内部使用的字典副本
            </summary>
            <value>
                The values.
            </value>
        </member>
        <member name="P:X.CommLib.Miscellaneous.ValuesCore.Item(System.String)">
            <summary>使用索引器直接获取或设置某个值</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ValuesCore.AddProperty(System.String,System.Object)">
            <summary>添加一个值，如果该值存在则覆盖，不存在则添加</summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ValuesCore.CleanValues">
            <summary>
                清除所有的参数值
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ValuesCore.CopyTo(X.CommLib.Miscellaneous.ValuesCore)">
            <summary>将参数值复制到指定的对象中</summary>
            <param name="valuesCore"></param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ValuesCore.GetProperty(System.String)">
            <summary>
            返回某个指定属性名称的信息
            </summary>
            <param name="key">The key.</param>
            <returns>
            如果不存在返回null
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ValuesCore.GetProperty``1(System.String,``0)">
            <summary>
            返回一个属性值
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ValuesCore.GetPropertyNames">
            <summary>
                返回所有属性的名称
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ValuesCore.GetPropertyValue(System.String)">
            <summary>
            返回某个指定属性名称的信息的字符串表示
            </summary>
            <param name="key">The key.</param>
            <returns>
            如果不存在返回""
            </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ValuesCore.HasProperty(System.String)">
            <summary>
            是否存在某个批定的属性名称
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ValuesCore.HasValues">
            <summary>
                是否有参数值
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ValuesCore.RemoveProperty(System.String)">
            <summary>
            移除某个属性值
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ValuesCore.SetProperty(System.String,System.Object)">
            <summary>
            设置一个属性值，如果该属性没有定义，则抛出异常
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.NotSupportedException">指定键不存在</exception>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ValuesCore.ToString(System.String[])">
            <summary>输出字符串表示，但是需要隐藏不需要的属性键值</summary>
            <param name="hiddenValueKeys">The hidden value keys.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.ValuesCore.ToString">
            <summary>
                返回客户关系的字符串表示
            </summary>
            <returns> </returns>
        </member>
        <member name="T:X.CommLib.Miscellaneous.XMLValuesCore">
            <summary>
                xml格式的键值保存器
            </summary>
        </member>
        <member name="E:X.CommLib.Miscellaneous.XMLValuesCore.OnPropertyValueChangedEvent">
            <summary>
                属性值被改变了
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.XMLValuesCore._filePath">
            <summary>
                xml文件的保存路径
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.XMLValuesCore._rootName">
            <summary>
                顶层节点的名称
            </summary>
        </member>
        <member name="F:X.CommLib.Miscellaneous.XMLValuesCore._xmlDocument">
            <summary>
                xml键值存储器
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.XMLValuesCore.#ctor(System.Xml.XmlDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.XMLValuesCore" /> class. 使用一个xml文档进行初始化
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <param name="rootName">Name of the root.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.XMLValuesCore.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.XMLValuesCore"/> class. 创建一个空的值存储对象</summary>
            <param name="rootName">The root Name.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.XMLValuesCore.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.Miscellaneous.XMLValuesCore" /> class. 使用指定的xml片断进行初始化
            </summary>
            <param name="filePath">The file path.</param>
            <param name="rootName">顶层节点的名称</param>
        </member>
        <member name="P:X.CommLib.Miscellaneous.XMLValuesCore.Item(System.String)">
            <summary>
            使用索引器直接获取或设置某个值，如果值不存在返回null
            </summary>
            <value>
            The <see cref="T:System.String"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.XMLValuesCore.AddProperty(System.String,System.String)">
            <summary>
            添加一个值，如果该值存在则覆盖，不存在则添加
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:X.CommLib.Miscellaneous.XMLValuesCore.GetProperty(System.String)">
            <summary>
            返回某个指定key的值，如果不存在返回null
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.XMLValuesCore.GetProperty(System.String,System.String)">
            <summary>
            返回某个指定属性的信息，如果不存在，返回默认值
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.XMLValuesCore.Save(System.String)">
            <summary>
            将配置文件保存到指定的文件
            </summary>
            <param name="filePath">The file path.</param>
            <exception cref="T:System.IO.FileNotFoundException">配置文件路径没有定义</exception>
        </member>
        <member name="M:X.CommLib.Miscellaneous.XMLValuesCore.Save">
            <summary>
                保存xml值
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.XMLValuesCore.ToString">
            <summary>
                返回字符串格式的文档
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.XMLValuesCore.Test">
            <summary>
                内部
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.XMLValuesCore.CreateSettingPropertyNode(System.String)">
            <summary>
            创建一个设置值的Node，如果存在，则仅返回
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.XMLValuesCore.GetRootNode">
            <summary>
                返回设置的顶级目录，如果不存在，则创建一个
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.XMLValuesCore.GetSettingPropertyNode(System.String)">
            <summary>
            返回设置值的Node，如果不存在返回null
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Miscellaneous.XMLValuesCore.InitXml">
            <summary>
                初始化文档，当文件为空时进行调用
            </summary>
        </member>
        <member name="M:X.CommLib.Miscellaneous.XMLValuesCore.TryGetSettingPropertyNode(System.String,System.Boolean)">
            <summary>
            返回设置值的node，如果存在直接返回
            如果不存在而create=true，创建一个返回，如果create=false，返回null
            </summary>
            <param name="key">The key.</param>
            <param name="create">if set to <c>true</c> [create].</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Office.ChineseCharsetScaner">
            <summary>
                中文字符扫描器
            </summary>
        </member>
        <member name="F:X.CommLib.Office.ChineseCharsetScaner.Regex">
            <summary>
                字符扫描规则
            </summary>
        </member>
        <member name="F:X.CommLib.Office.ChineseCharsetScaner.Empty">
            <summary>
                空字符串
            </summary>
        </member>
        <member name="M:X.CommLib.Office.ChineseCharsetScaner.Seacn(System.String)">
            <summary>
                扫描出字符串中的中文文字
            </summary>
            <param name="line">The line.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Office.Csv.CsvFileHelper">
            <summary>
                csv 文件合并器
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Csv.CsvFileHelper.Test">
            <summary>
                将一个目录下的CSV文件进行合并
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Csv.CsvFileHelper.ExportFieldToFile(System.String,System.String,System.String,System.Boolean,System.Func{System.String,System.Boolean})">
            <summary>
                将 Csv 文件中的某一列输出到一个文本文件中
            </summary>
            <param name="csvFile">The CSV file.</param>
            <param name="outputFile">The output file.</param>
            <param name="header">The field header.</param>
            <param name="unique">是否去重，去重的话将不区分大小写</param>
            <param name="filterFunc">The filter function.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Csv.CsvFileHelper.Combine(System.String,System.String)">
            <summary>
                将一个目录下的CSV文件进行合并
            </summary>
            <param name="combineFile">The combine file.</param>
            <param name="directory">The directory.</param>
            <returns>总计多少条数据</returns>
        </member>
        <member name="M:X.CommLib.Office.Csv.CsvFileHelper.CombineFiles(System.String,System.String[],System.Collections.Generic.List{System.String},System.Func{CsvHelper.ICsvReader,System.Boolean})">
            <summary>
                将一批 CSV 文件中的指定列合并到一个 csv 文件中
            </summary>
            <param name="combineFile">The combine file.</param>
            <param name="csvFiles">The CSV files.</param>
            <param name="headerList">需要输出的列，如果为 null，则为全部.</param>
            <param name="filterFunc">过滤器.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Csv.CsvFileHelper.CombineCsvFile(CsvHelper.ICsvWriter,CsvHelper.ICsvReader,System.Collections.Generic.List{System.String},System.Func{CsvHelper.ICsvReader,System.Boolean})">
            <summary>
                将 reader 中的数据按 headerList 的顺序写入到 writer 中
            </summary>
            <param name="writer">The writer.</param>
            <param name="reader">The reader.</param>
            <param name="headerList">The header list.</param>
            <param name="filterFunc">The filter function.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Csv.CsvFileHelper.LoadHeaderIndexDictionary(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                根据当前的表头创建一个索引
            </summary>
            <param name="headers">The field headers.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Csv.CsvFileHelper.GetHeaerList(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                从所有csv文件中获取列表头
            </summary>
            <param name="csvFiles">The CSV files.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Csv.CsvFileHelper.AppendHeaders(System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                将一批文件表头写入到一个数组中
            </summary>
            <param name="headerList">The header list.</param>
            <param name="headers">The field headers.</param>
        </member>
        <member name="M:X.CommLib.Office.Csv.CsvFileHelper.OpenCsvFile(System.String)">
            <summary>
                打开一个csv文件
            </summary>
            <param name="csvFile">The CSV file.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Csv.CsvFileHelper.WriterHeaer(CsvHelper.ICsvWriter,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                写入表头
            </summary>
            <param name="writer">The writer.</param>
            <param name="headerList">The header list.</param>
        </member>
        <member name="T:X.CommLib.Office.EmptyArray">
            <summary>
                空数组类
            </summary>
        </member>
        <member name="F:X.CommLib.Office.EmptyArray.EmptyStringArray">
            <summary>
                空字符串数组
            </summary>
        </member>
        <member name="T:X.CommLib.Office.Words.OpenXmlHelper">
            <summary>
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Words.OpenXmlHelper.GetFirstDescendant``1(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            The get first descendant.
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="parent">
            The parent.
            </param>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.Office.Words.OpenXmlHelper.GetParent``1(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            The get parent.
            </summary>
            <param name="child">
            The child.
            </param>
            <typeparam name="T">
            </typeparam>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.Office.Words.OpenXmlHelper.IsEndBookmark(DocumentFormat.OpenXml.OpenXmlElement,DocumentFormat.OpenXml.Wordprocessing.BookmarkStart)">
            <summary>
            The is end bookmark.
            </summary>
            <param name="element">
            The element.
            </param>
            <param name="startBookmark">
            The start bookmark.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.Office.Words.OpenXmlHelper.IsEndBookmark(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd,DocumentFormat.OpenXml.Wordprocessing.BookmarkStart)">
            <summary>
            The is end bookmark.
            </summary>
            <param name="endBookmark">
            The end bookmark.
            </param>
            <param name="startBookmark">
            The start bookmark.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.Office.Words.OpenXmlHelper.GetDocumentBookmarkValues(DocumentFormat.OpenXml.Packaging.MainDocumentPart,System.Boolean)">
            <summary>
            The get document bookmark values.
            </summary>
            <param name="documentPart">
            The document part.
            </param>
            <param name="includeHiddenBookmarks">
            The include hidden bookmarks.
            </param>
            <returns>
            The
                <see>
                    <cref>IDictionary</cref>
                </see>
                .
            </returns>
        </member>
        <member name="M:X.CommLib.Office.Words.OpenXmlHelper.SetDocumentBookmarkValues(DocumentFormat.OpenXml.Packaging.MainDocumentPart,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            The set document bookmark values.
            </summary>
            <param name="documentPart">
            The document part.
            </param>
            <param name="bookmarkValues">
            The bookmark values.
            </param>
        </member>
        <member name="M:X.CommLib.Office.Words.OpenXmlHelper.GetAllBookmarks(DocumentFormat.OpenXml.Packaging.MainDocumentPart)">
            <summary>
            The get all bookmarks.
            </summary>
            <param name="documentPart">
            The document part.
            </param>
            <returns>
            The
                <see>
                    <cref>IEnumerable</cref>
                </see>
                .
            </returns>
        </member>
        <member name="M:X.CommLib.Office.Words.OpenXmlHelper.IsHiddenBookmark(System.String)">
            <summary>
            The is hidden bookmark.
            </summary>
            <param name="bookmarkName">
            The bookmark name.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.Office.Words.OpenXmlHelper.GetText(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart)">
            <summary>
            The get text.
            </summary>
            <param name="bookmark">
            The bookmark.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.Office.Words.OpenXmlHelper.SetBookmarkValue(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            The set bookmark value.
            </summary>
            <param name="bookmark">
            The bookmark.
            </param>
            <param name="bookmarkValues">
            The bookmark values.
            </param>
        </member>
        <member name="M:X.CommLib.Office.Words.OpenXmlHelper.SetText(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart,System.String)">
            <summary>
            The set text.
            </summary>
            <param name="bookmark">
            The bookmark.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:X.CommLib.Office.Words.OpenXmlHelper.FindBookmarkText(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart)">
            <summary>
            The find bookmark text.
            </summary>
            <param name="bookmark">
            The bookmark.
            </param>
            <returns>
            The <see cref="T:DocumentFormat.OpenXml.Wordprocessing.Text"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.Office.Words.OpenXmlHelper.FindTextInColumn(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart)">
            <summary>
            The find text in column.
            </summary>
            <param name="bookmark">
            The bookmark.
            </param>
            <returns>
            The <see cref="T:DocumentFormat.OpenXml.Wordprocessing.Text"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.Office.Words.OpenXmlHelper.RemoveTexts(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart)">
            <summary>
            移除 bookmarstart 与 bookmarend 间的元素
            </summary>
            <param name="bookmark">The bookmark.</param>
        </member>
        <member name="M:X.CommLib.Office.Words.OpenXmlHelper.RemoveOtherTexts(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart,DocumentFormat.OpenXml.Wordprocessing.Text)">
            <summary>
            The remove other texts.
            </summary>
            <param name="bookmark">
            The bookmark.
            </param>
            <param name="keep">
            The keep.
            </param>
        </member>
        <member name="M:X.CommLib.Office.Words.OpenXmlHelper.InsertBookmarkText(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart,System.String)">
            <summary>
            The insert bookmark text.
            </summary>
            <param name="bookmark">
            The bookmark.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="T:X.CommLib.Office.Words.WordHelper">
            <summary>
                word 辅助
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Words.WordHelper.UpdateToc(System.String)">
            <summary>
            更新目录部分 (tables of contents)
            </summary>
            <param name="filePath">
            The file path.
            </param>
        </member>
        <member name="M:X.CommLib.Office.Words.WordHelper.CloseApplication(Microsoft.Office.Interop.Word.Application)">
            <summary>
            关闭Excelapp 对象
            </summary>
            <param name="application">
            The application.
            </param>
        </member>
        <member name="T:X.CommLib.Office.Words.WordReplaceHelper">
            <summary>
                对 word 文件中的书签进行替换处理
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Words.WordReplaceHelper.Test">
            <summary>
                进行测试
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Words.WordReplaceHelper.BuildWordFile(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            模拟模板创建一个新的文档
            </summary>
            <param name="file">The file.</param>
            <param name="templateFile">The template file.</param>
            <param name="replaceValues">The replace values.</param>
        </member>
        <member name="M:X.CommLib.Office.Words.WordReplaceHelper.Createdocument(System.String)">
            <summary>
            创建一个文档，作为例子创建
            </summary>
            <param name="filePath">
            The file path.
            </param>
        </member>
        <member name="M:X.CommLib.Office.Words.WordReplaceHelper.Combine(System.String,System.String[])">
            <summary>
            合并多个 docx  文件到一个文件
            </summary>
            <param name="destinationFile">
            The destination file.
            </param>
            <param name="sourceFiles">
            The source files.
            </param>
        </member>
        <member name="M:X.CommLib.Office.Words.WordReplaceHelper.BuildWordFile(System.String,System.String,X.CommLib.Office.Words.WordReplaceHelper.WordReplacePart[])">
            <summary>
            构建一个word文档
                以templaterFile 作为模板，对其中的标签进行替换
            </summary>
            <param name="filePath">
            The file path.
            </param>
            <param name="templateFile">
            The template file.
            </param>
            <param name="parts">
            The parts.
            </param>
        </member>
        <member name="M:X.CommLib.Office.Words.WordReplaceHelper.InsertOtherDocument(DocumentFormat.OpenXml.Packaging.MainDocumentPart,DocumentFormat.OpenXml.Wordprocessing.BookmarkStart,System.String)">
            <summary>
            插入一个文档在指定的位置
            </summary>
            <param name="documentPart">
            The document part.
            </param>
            <param name="bookmarkStart">
            The bookmark start.
            </param>
            <param name="filePath">
            The file path.
            </param>
        </member>
        <member name="M:X.CommLib.Office.Words.WordReplaceHelper.ContentIsFile(System.String)">
            <summary>
            传入的内容是不是文件
            </summary>
            <param name="content">
            The content.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:X.CommLib.Office.Words.WordReplaceHelper.WordReplacePart">
            <summary>
                word 中进行替换的部件
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Words.WordReplaceHelper.WordReplacePart.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Office.Words.WordReplaceHelper.WordReplacePart" /> class.
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Words.WordReplaceHelper.WordReplacePart.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:X.CommLib.Office.Words.WordReplaceHelper.WordReplacePart"/> class.
            </summary>
            <param name="bookmark">
            The bookmark.
            </param>
            <param name="content">
            The content.
            </param>
        </member>
        <member name="P:X.CommLib.Office.Words.WordReplaceHelper.WordReplacePart.BookMark">
            <summary>
                书签名
            </summary>
            <value>
                The book mark.
            </value>
        </member>
        <member name="P:X.CommLib.Office.Words.WordReplaceHelper.WordReplacePart.Content">
            <summary>
                初始替换的内容
            </summary>
            <value>
                The content.
            </value>
        </member>
        <member name="T:X.CommLib.Office.Excel.ExcelHelper">
            <summary>
                Excel 辅助函数
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.TestChart">
            <summary>
                图表操作测试
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.CreateNewWorkSheet(Microsoft.Office.Interop.Excel.Workbook)">
            <summary>
                创建一个新的sheet
            </summary>
            <param name="workbook">The workbook.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.CreateNewExcel(Microsoft.Office.Interop.Excel.Application)">
            <summary>
                创建一个新的excel文档
            </summary>
            <param name="application">The application.</param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.CloseApplication(Microsoft.Office.Interop.Excel.Application)">
            <summary>
                关闭Excelapp 对象
            </summary>
            <param name="application">The application.</param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.OpenFile(Microsoft.Office.Interop.Excel.Application,System.String)">
            <summary>
                打开一个excel文件
            </summary>
            <param name="application">The application.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.GetWorkSheet(Microsoft.Office.Interop.Excel.Workbook,System.Int32)">
            <summary>
                返回指定索引的worksheet
            </summary>
            <param name="workbook">The workbook.</param>
            <param name="index">索引值，从1开始.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.GetWorkSheets(Microsoft.Office.Interop.Excel.Workbook)">
            <summary>
                返回所有的workbook
            </summary>
            <param name="workbook">The workbook.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.GetWorkSheet(Microsoft.Office.Interop.Excel.Workbook,System.String)">
            <summary>
                返回指定名称的worksheet
            </summary>
            <param name="workbook">The workbook.</param>
            <param name="sheetName">Name of the sheet.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.CloseWorkBook(Microsoft.Office.Interop.Excel.Workbook,System.Boolean)">
            <summary>
                关闭workbook对象，并指示是否保存
            </summary>
            <param name="workbook">The workbook.</param>
            <param name="save">
                if set to <c>true</c> [save].
            </param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.CloseWorkBook(Microsoft.Office.Interop.Excel.Workbook,System.String)">
            <summary>
                关闭workbook对象，并保存至指定的路径
            </summary>
            <param name="workbook">The workbook.</param>
            <param name="savePath">The save path.</param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.AddChartObject(Microsoft.Office.Interop.Excel.Worksheet,Microsoft.Office.Interop.Excel.XlChartType,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                加入一个图表，返回一个图形对象
            </summary>
            <param name="worksheet">The worksheet.</param>
            <param name="xlChartType">Type of the xl chart.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.AddChartShape(Microsoft.Office.Interop.Excel.Worksheet,Microsoft.Office.Interop.Excel.XlChartType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                添加图表, Shape 表示一个绘图对象
            </summary>
            <param name="worksheet">The worksheet.</param>
            <param name="xlChartType">Type of the xl chart.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.FindWorkBook(Microsoft.Office.Interop.Excel.Worksheet)">
            <summary>
                查找当前worksheet对应的workbook
            </summary>
            <param name="worksheet">The worksheet.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.SetChartSeries(Microsoft.Office.Interop.Excel.Chart,System.String,X.CommLib.Office.Excel.ExcelHelper.SeriesInfo[])">
            <summary>
                添加一组图表数据
            </summary>
            <param name="chart">The chart.</param>
            <param name="title">The title.</param>
            <param name="seriesInfos">The series infos.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.AutoFit(Microsoft.Office.Interop.Excel.Worksheet)">
            <summary>
                所有行自动设置宽高
            </summary>
            <param name="worksheet">The worksheet.</param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.AutoFit(Microsoft.Office.Interop.Excel.Range)">
            <summary>
                自动设置宽高
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.GetMaxRowLen(Microsoft.Office.Interop.Excel.Worksheet)">
            <summary>
                返回最大一行的索引值， 从1开始
            </summary>
            <param name="worksheet">The worksheet.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.GetMaxColumnLen(Microsoft.Office.Interop.Excel.Worksheet)">
            <summary>
                返回最大的一列值，从1开始
            </summary>
            <param name="worksheet">The worksheet.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.GetRectangleF(Microsoft.Office.Interop.Excel.Range)">
            <summary>
                返回一个range的坐标位置
            </summary>
            <param name="range">The range.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.HorizontalSortShapes(System.Drawing.PointF,System.Int32,Microsoft.Office.Interop.Excel.Shape[])">
            <summary>
                横向排序一组图形对象
            </summary>
            <param name="location">The location.</param>
            <param name="margin">The margin.</param>
            <param name="shapes">The shapes.</param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.HorizontalSortShapes(System.Drawing.PointF,System.Int32,Microsoft.Office.Interop.Excel.ChartObject[])">
            <summary>
                横向排序一组图形对象
            </summary>
            <param name="location">The location.</param>
            <param name="margin">The margin.</param>
            <param name="chartObjects">The shapes.</param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.VerticalSortShapes(System.Drawing.PointF,System.Int32,Microsoft.Office.Interop.Excel.ChartObject[])">
            <summary>
                纵向排序一组图形对象
            </summary>
            <param name="location">The location.</param>
            <param name="margin">The margin.</param>
            <param name="chartObjects">The shapes.</param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.VerticalSortShapes(System.Drawing.PointF,System.Int32,Microsoft.Office.Interop.Excel.Shape[])">
            <summary>
                纵向排序一组图形对象
            </summary>
            <param name="location">The location.</param>
            <param name="margin">The margin.</param>
            <param name="shapes">The shapes.</param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.AllRange(Microsoft.Office.Interop.Excel.Worksheet)">
            <summary>
                当前表单中所有range集合
            </summary>
            <param name="workSheet">The work sheet.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.GetCell(Microsoft.Office.Interop.Excel.Worksheet,System.String)">
            <summary>
                取一格，使用文字坐标，比如$D$1
            </summary>
            <param name="worksheet">The worksheet.</param>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.GetCell(Microsoft.Office.Interop.Excel.Worksheet,System.Int32,System.Int32)">
            <summary>
                取一格
            </summary>
            <param name="worksheet">The worksheet.</param>
            <param name="x">格子的序号，从1开始</param>
            <param name="y">格子的序号，从1开始</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.GetCellText(Microsoft.Office.Interop.Excel.Worksheet,System.Int32,System.Int32)">
            <summary>
                返回指定格子的字符串表示
            </summary>
            <param name="worksheet">The worksheet.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.UnionRange(Microsoft.Office.Interop.Excel.Application,Microsoft.Office.Interop.Excel.Range[])">
            <summary>
                合并 range
                var range = ExcelHelper.UnionRange(application,
                ExcelHelper.FullColumns(workSheet.Range["$A$1", Missing.Value]),
                ExcelHelper.FullColumns(workSheet.Range["$C$1", Missing.Value]),
                ExcelHelper.FullColumns(workSheet.Range["$D$1", Missing.Value])
                );
                range.Select();
            </summary>
            <param name="application">The application.</param>
            <param name="ranges">The ranges.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.FullColumns(Microsoft.Office.Interop.Excel.Range)">
            <summary>
                返回整行
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.FullRows(Microsoft.Office.Interop.Excel.Range)">
            <summary>
                返回整列
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.GetRange(Microsoft.Office.Interop.Excel.Worksheet,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                取出指定范围内的值，索引值从1开始
            </summary>
            <param name="workSheet">The work sheet.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.FullColumn(Microsoft.Office.Interop.Excel.Worksheet,System.Int32,System.Boolean)">
            <summary>
                选择整列
            </summary>
            <param name="workSheet">The work sheet.</param>
            <param name="column">列数，从1开始.</param>
            <param name="hasFirstRow">是否包括第一行</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.CreateSeriesInfo(Microsoft.Office.Interop.Excel.Worksheet,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                创建一个图表序列对象
            </summary>
            <param name="workSheet">The work sheet.</param>
            <param name="yColumn">y轴列，从1开始.</param>
            <param name="xColumn">x轴列，从1开始.</param>
            <param name="firstIsHead">第一行是表头(标题).</param>
            <param name="isSecondary">是否是次序列.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.CreateChart(Microsoft.Office.Interop.Excel.Worksheet,Microsoft.Office.Interop.Excel.XlChartType,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                简单函数绘制图表，
            </summary>
            <param name="workSheet">The work sheet.</param>
            <param name="chartType">Type of the chart.</param>
            <param name="yColumn">y轴所在数据，从1开始.</param>
            <param name="xColumn">x轴所在数据，从1开始.</param>
            <param name="firstIsHead">第一行是不是标题.</param>
            <param name="x">x坐标 </param>
            <param name="y">y坐标 .</param>
            <param name="width">宽.</param>
            <param name="height">高.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.CreateChart(Microsoft.Office.Interop.Excel.Worksheet,Microsoft.Office.Interop.Excel.XlChartType,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                简单函数绘制图表，会放两组数据进去
            </summary>
            <param name="workSheet">The work sheet.</param>
            <param name="chartType">Type of the chart.</param>
            <param name="yColumn1">第一组y轴数据所在列</param>
            <param name="yColumn2">第二组y轴数据所在列.</param>
            <param name="xColumn">x轴数据所在列.</param>
            <param name="firstIsHead">第一行是不是标题</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.CleanChartSeries(Microsoft.Office.Interop.Excel.Chart)">
            <summary>
                清空图表中的序列.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.WorkSheetRectangleF(Microsoft.Office.Interop.Excel.Worksheet)">
            <summary>
                表单中有效数据在大小
            </summary>
            <param name="workSheet">The work sheet.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.OpenApplication(System.Boolean)">
            <summary>
                创建Excel程序
            </summary>
            <param name="visible">if set to <c>true</c> [visible].</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.SetFont(Microsoft.Office.Interop.Excel.Worksheet,System.String,System.Int32)">
            <summary>
                设置字体
            </summary>
            <param name="booksheet">The booksheet.</param>
            <param name="fontName">Name of the font.</param>
            <param name="fontSize">Size of the font.</param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelHelper.SetFont1(Microsoft.Office.Interop.Excel.Range,System.String,System.Int32)">
            <summary>
                设置字体
            </summary>
            <param name="range">The range.</param>
            <param name="fontName">Name of the font.</param>
            <param name="fontSize">Size of the font.</param>
        </member>
        <member name="T:X.CommLib.Office.Excel.ExcelHelper.SeriesInfo">
            <summary>
                表示图表中的一个序列
            </summary>
        </member>
        <member name="P:X.CommLib.Office.Excel.ExcelHelper.SeriesInfo.Title">
            <summary>
                序列的标题
            </summary>
            <value>
                The title.
            </value>
        </member>
        <member name="P:X.CommLib.Office.Excel.ExcelHelper.SeriesInfo.XValue">
            <summary>
                x轴的值, 有三种表示方法
                1.指定行列  =数据分析1!$D$2:$D$22"
                2.指定值的数组 ={1, 2, 3, 4}
                3.使用Rang对象 workSheet.Range["$C$2","$c$22"]
            </summary>
            <value>
                The x value.
            </value>
        </member>
        <member name="P:X.CommLib.Office.Excel.ExcelHelper.SeriesInfo.YValue">
            <summary>
                y轴的值
            </summary>
            <value>
                The y value.
            </value>
        </member>
        <member name="P:X.CommLib.Office.Excel.ExcelHelper.SeriesInfo.IsSecondary">
            <summary>
                是否是第二数据
            </summary>
            <value>
                <c>true</c> if this instance is secondary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:X.CommLib.Office.Excel.ExcelSqlHelper">
            <summary>
                excel sql 功能帮助，excel 可以使用 access 引擎进行处理
            </summary>
        </member>
        <member name="P:X.CommLib.Office.Excel.ExcelSqlHelper.DefaultAccessProvider">
            <summary>
                推荐使用的access 引擎类型
            </summary>
            <value>
                The default access provider.
            </value>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelSqlHelper.CreateExcelDbConnection(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                创建访问excel 使用的oledb链接
            </summary>
            <param name="filePath">文件路径.</param>
            <param name="excelVer">对应的excel文件版本.</param>
            <param name="provider">数据引擎.</param>
            <param name="header">第一行是否是表头</param>
            <param name="readasTxt">是否将数据以字符格式进行处理</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelSqlHelper.GetExcelConnectionString(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                返回excel 的access 数据读取链接
            </summary>
            <param name="filePath">文件路径.</param>
            <param name="excelVer">对应的excel文件版本.</param>
            <param name="provider">数据引擎.</param>
            <param name="header">第一行是否是表头</param>
            <param name="readasTxt">是否将数据以字符格式进行处理</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">无法定位本机支持的access版本</exception>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelSqlHelper.GetAllAccessProviders">
            <summary>
                返回所有可用的access 引擎类型，如果没有的话返回0 长度字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Office.Excel.ISqlDataReader">
            <summary>
                数据读取器，专门为数据库格式进行优化。加入了DataColumn[] 作为标题属性
                使用在AccessOutputer及SqlExcelOutputer中
            </summary>
        </member>
        <member name="P:X.CommLib.Office.Excel.ISqlDataReader.DataColumnHead">
            <summary>
                数据列的标头
            </summary>
            <value>
                The data column head.
            </value>
        </member>
        <member name="T:X.CommLib.Office.Excel.AccessOutputer">
            <summary>
              access 文件输出器
            暂时写入的数据都是字符串的格式
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Excel.AccessOutputer.Test">
            <summary>
            内部测试
            </summary>
        </member>
        <member name="F:X.CommLib.Office.Excel.AccessOutputer._defaultProvider">
            <summary>
              默认的oledb服务端
            </summary>
        </member>
        <member name="P:X.CommLib.Office.Excel.AccessOutputer.DefaultProvider">
            <summary>
              返回默认的oledb服务商，如果不支持返回null
            </summary>
            <value> The default provider. </value>
        </member>
        <member name="M:X.CommLib.Office.Excel.AccessOutputer.Open">
            <summary>
              打开输出器
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Excel.AccessOutputer.Close">
            <summary>
              关闭输出器
            </summary>
        </member>
        <member name="P:X.CommLib.Office.Excel.AccessOutputer.DefaultExtension">
            <summary>
              返回默认的文件后缀名
            </summary>
            <value> The default extension. </value>
        </member>
        <member name="M:X.CommLib.Office.Excel.AccessOutputer.CreateOutputFile(System.String,System.String)">
            <summary>
              创建输出文件
            </summary>
            <param name="filePath"> The file path. </param>
            <param name="provider"> The provider. </param>
        </member>
        <member name="M:X.CommLib.Office.Excel.AccessOutputer.OutputFile(X.CommLib.Office.Excel.IDataReader,System.String,System.String)">
            <summary>
              输出数据到excel文件实现
            </summary>
            <param name="dataReader"> The data reader. </param>
            <param name="sheetName"> Name of the sheet. </param>
            <param name="filePath"> The file path. </param>
        </member>
        <member name="M:X.CommLib.Office.Excel.AccessOutputer.Dispose">
            <summary>
              关闭占用资源
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Excel.AccessOutputer.IsAceEnagine(System.String)">
            <summary>
              指定的引擎名称是否是ace引擎
            </summary>
            <param name="provider"> The provider. </param>
            <returns> <c>true</c> if [is ace enagine] [the specified provider]; otherwise, <c>false</c> . </returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.AccessOutputer.CreateTable(System.Data.OleDb.OleDbConnection,System.String,X.CommLib.Office.Excel.IDataReader)">
            <summary>
              创建数据表
            </summary>
            <param name="connection"> </param>
            <param name="tableName"> </param>
            <param name="dataReader"> </param>
        </member>
        <member name="M:X.CommLib.Office.Excel.AccessOutputer.GetDefaultColumnNames(System.Int32)">
            <summary>
              返回默认使用的列表名
            </summary>
            <param name="columnLen"> The column len. </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.AccessOutputer.WriteExcelData(System.Data.OleDb.OleDbConnection,System.String,System.Object[],System.String[],System.Boolean)">
            <summary>
            写入excel数据
            </summary>
            <param name="connection">The connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="currentRowData">The current row data.</param>
            <param name="columns">The columns.</param>
            <param name="keepDataType">是否保持数据原来类型，如果不是的话，直接转为string.</param>
        </member>
        <member name="M:X.CommLib.Office.Excel.AccessOutputer.GetConnectionString(System.String,System.String)">
            <summary>
              返回连接名称
            </summary>
            <param name="filePath"> The file path. </param>
            <param name="provider"> The provider. </param>
            <returns> </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:X.CommLib.Office.Excel.IOutputer">
            <summary>
            输出器
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Excel.IOutputer.Open">
            <summary>
            打开输出器
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Excel.IOutputer.Close">
            <summary>
            关闭输出器
            </summary>
        </member>
        <member name="P:X.CommLib.Office.Excel.IOutputer.DefaultExtension">
            <summary>
            返回保存文件时的默认后缀名
            </summary>
            <value>
            The default extension.
            </value>
        </member>
        <member name="M:X.CommLib.Office.Excel.IOutputer.OutputFile(X.CommLib.Office.Excel.IDataReader,System.String,System.String)">
            <summary>
            输出数据到excel文件实现
            </summary>
            <param name="dataReader">需要输出的数据</param>
            <param name="filePath">文件保存路径</param>
            <param name="sheetName"> 表名 </param>
        </member>
        <member name="T:X.CommLib.Office.Excel.ExcelOutputer">
            <summary>
                使用com操作excel 输出文件
                需要先将所有数据读入内存
                excel对象无法退出的说明：http://support.microsoft.com/kb/317109/zh-cn
            </summary>
        </member>
        <member name="P:X.CommLib.Office.Excel.ExcelOutputer.Version">
            <summary>
                返回excel的版本号
            </summary>
        </member>
        <member name="F:X.CommLib.Office.Excel.ExcelOutputer._excel">
            <summary>
                内置的excel对象
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelOutputer.OutputFile(X.CommLib.Office.Excel.IDataReader,System.String,System.String)">
            <summary>
                输出数据到excel文件实现
            </summary>
            <param name="dataReader"> 需要输出的数据 </param>
            <param name="filePath"> 文件保存路径 </param>
            <param name="sheetName"> 表名 </param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelOutputer.Close">
            <summary>
                关闭Excel结束输入
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelOutputer.Open">
            <summary>
                打开Excel以输出数据
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelOutputer.IsInstalled">
            <summary>
                系统是中否安装了Excel 程序
            </summary>
            <returns>
                <c>true</c> if this instance is installed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelOutputer.ConvertExcelDatas(X.CommLib.Office.Excel.IDataReader)">
            <summary>
                将数据转为excel行列格式
            </summary>
            <param name="dataReader"> </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelOutputer.OpenExcel">
            <summary>
                打开Excel文件
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelOutputer.OutputFileCore(X.CommLib.Office.Excel.IDataReader,System.String,System.String)">
            <summary>
                输出数据到excel文件实现
            </summary>
            <param name="dataReader"> 需要输出的数据 </param>
            <param name="filePath"> 文件保存路径 </param>
            <param name="sheetName"> 表名 </param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelOutputer.ReleaseObject(System.Object)">
            <summary>
                显示释放com对象
            </summary>
            <param name="obj"> </param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelOutputer.SaveExcelFile(Microsoft.Office.Interop.Excel.Workbook,System.String)">
            <summary>
                保存excel文件
            </summary>
            <param name="workbook"> </param>
            <param name="filePath"> </param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelOutputer.WriteDatasToSheet(X.CommLib.Office.Excel.IDataReader,Microsoft.Office.Interop.Excel.Worksheet)">
            <summary>
                输出数据到sheet
            </summary>
            <param name="dataReader"> </param>
            <param name="sheet"> </param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelOutputer.FormatCells(Microsoft.Office.Interop.Excel.Worksheet,System.Int32,X.CommLib.Office.Excel.IDataReader)">
            <summary>
                格式化数据
            </summary>
            <param name="sheet"> The sheet. </param>
            <param name="height"> The height. </param>
            <param name="dataReader"> The data reader. </param>
        </member>
        <member name="M:X.CommLib.Office.Excel.ExcelOutputer.Dispose">
            <summary>
                清理数据
            </summary>
        </member>
        <member name="P:X.CommLib.Office.Excel.ExcelOutputer.DefaultExtension">
            <summary>
                返回保存文件时的默认后缀名
            </summary>
            <value> The default extension. </value>
        </member>
        <member name="T:X.CommLib.Office.Excel.IDataReader">
            <summary>
                数据读取接口
            </summary>
        </member>
        <member name="P:X.CommLib.Office.Excel.IDataReader.ColumnLen">
            <summary>
                数据列长度
            </summary>
        </member>
        <member name="P:X.CommLib.Office.Excel.IDataReader.ColumnHead">
            <summary>
                数据列的标头，如果没有返回0长度数据或是null
            </summary>
        </member>
        <member name="P:X.CommLib.Office.Excel.IDataReader.ColumnFormats">
            <summary>
                每一列数据的Excel格式化格式，不需要返回0长度数据或是null
            </summary>
        </member>
        <member name="T:X.CommLib.Office.Excel.SqlExcelOutputer">
            <summary>
              以sql操作excel输出文件
              首行无法去除
              速度慢，在我的机器上1万条数据需要6秒多
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Excel.SqlExcelOutputer.Test">
            <summary>
            数据写入测试
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Excel.SqlExcelOutputer.CreateOutputFile(System.String,System.String)">
            <summary>
            创建输出文件
            </summary>
            <param name="filePath">The file path.</param>
            <param name="provider">The provider.</param>
        </member>
        <member name="P:X.CommLib.Office.Excel.SqlExcelOutputer.DefaultExtension">
            <summary>
              返回默认的文件后缀名
            </summary>
            <value> The default extension. </value>
        </member>
        <member name="M:X.CommLib.Office.Excel.SqlExcelOutputer.GetConnectionString(System.String,System.String)">
            <summary>
            返回连接名称
            </summary>
            <param name="filePath">The file path.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Office.Excel.TestDataReader">
            <summary>
            模拟测试数据读取器
            生成随机数据
            </summary>
        </member>
        <member name="F:X.CommLib.Office.Excel.TestDataReader._curLen">
            <summary>
            当前读取行
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Excel.TestDataReader.#ctor(System.Int32,System.Int32)">
            <summary>
            使用第一行有多少列来进行初始化
            </summary>
            <param name="columnLen">每行几列</param>
            <param name="maxLen">一共测试几行数据 </param>
        </member>
        <member name="P:X.CommLib.Office.Excel.TestDataReader.RowLen">
            <summary>
            数据行长度
            </summary>
        </member>
        <member name="P:X.CommLib.Office.Excel.TestDataReader.ColumnLen">
            <summary>
            数据列长度
            </summary>
        </member>
        <member name="P:X.CommLib.Office.Excel.TestDataReader.ColumnHead">
            <summary>
            数据列的标头，如果不需要返回0长度数据或是null
            </summary>
        </member>
        <member name="P:X.CommLib.Office.Excel.TestDataReader.ColumnFormats">
            <summary>
            每一列数据的Excel格式化格式，不需要返回0长度数据或是null
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Excel.TestDataReader.MoveNext">
            <summary>
            移动到下一行
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.Excel.TestDataReader.Reset">
            <summary>
            准备从头开始读数据
            </summary>
        </member>
        <member name="P:X.CommLib.Office.Excel.TestDataReader.Current">
            <summary>
            返回当前行数据
            </summary>
        </member>
        <member name="P:X.CommLib.Office.Excel.TestDataReader.System#Collections#IEnumerator#Current">
            <summary>
            返回当前行数据
            </summary>
        </member>
        <member name="M:X.CommLib.Office.Excel.TestDataReader.Dispose">
            <summary>
            释放占用资源
            </summary>
        </member>
        <member name="T:X.CommLib.Office.FontHelper">
            <summary>
                字体辅助工具
            </summary>
        </member>
        <member name="M:X.CommLib.Office.FontHelper.FontIsInstalled(System.Drawing.FontFamily)">
            <summary>字体是否已经安装</summary>
            <param name="fontFamily">The font family. </param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.FontHelper.FontIsInstalled(System.String)">
            <summary>指定名称的字体是否已经安装</summary>
            <param name="name">The name. </param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.FontHelper.InstallFontFile(System.String)">
            <summary>添加一个字体，如果安装失败，则直接抛出异常
                不推荐，有时需要系统重启新字体才能生效</summary>
            <param name="filePath">The file path. </param>
        </member>
        <member name="M:X.CommLib.Office.FontHelper.InstallZipFont(System.String)">
            <summary>从一个压缩包中安装字体, 如果其中有失败的话，通过日志返回</summary>
            <param name="zipPath">The zip path. </param>
            <exception cref="T:System.IO.FileNotFoundException">字体目录不存在</exception>
        </member>
        <member name="M:X.CommLib.Office.FontHelper.LoadFontFile(System.String)">
            <summary>载入一个字体文件并转为字体对象</summary>
            <param name="filePath">The file path. </param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.FontHelper.AddFontResource(System.String)">
            <summary>Adds the font resource.</summary>
            <param name="lpszFilename">The LPSZ filename. </param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.FontHelper.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>Sends the message.</summary>
            <param name="hwnd">The h WND. </param>
            <param name="msg">The MSG. </param>
            <param name="wparam">The w param. </param>
            <param name="lparam">The l param. </param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.FontHelper.CopyFontToFontsDirectory(System.String)">
            <summary>复制字体到fonts 目录下</summary>
            <param name="fontPath">The font path. </param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.FontHelper.GetFontDir">
            <summary>
                返回字体目录
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Office.FontHelper.InstallFont(System.String)">
            <summary>安装某个目录下指定的字体</summary>
            <param name="folder">The folder. </param>
        </member>
        <member name="M:X.CommLib.Office.FontHelper.InstallFonts(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            安装一组字体，如果其中有失败的话，通过日志返回
            </summary>
            <param name="fontPaths">The font paths.</param>
        </member>
        <member name="M:X.CommLib.Office.FontHelper.InstallMsFont(System.String)">
            <summary>
            使用微软安装工具安装字体
            </summary>
            <param name="installer">The installer.</param>
        </member>
        <member name="M:X.CommLib.Office.FontHelper.SendFontChangeMessage(System.String)">
            <summary>发送字体更新消息</summary>
            <param name="fontName">Name of the font. </param>
        </member>
        <member name="M:X.CommLib.Office.FontHelper.Test">
            <summary>
                Tests this instance.
            </summary>
        </member>
        <member name="T:X.CommLib.Office.StringExtension">
            <summary>
                字符串扩展函数
            </summary>
        </member>
        <member name="M:X.CommLib.Office.StringExtension.IsNullOrWhiteSpace(System.String)">
            <summary>
                指定的字符是不是空的
            </summary>
            <param name="value">The string.</param>
            <returns><c>true</c> if [is null or white space] [the specified string]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:X.CommLib.Office.StringExtension.GetChinese(System.String)">
            <summary>
                返回字符串中包含的字符
            </summary>
            <param name="line">The line.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.StringExtension.Split(System.String,System.Int32)">
            <summary>
                将字符串按指定的长度进行切分
            </summary>
            <param name="str">The string.</param>
            <param name="chunkSize">Size of the chunk.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.StringExtension.IsNumeric(System.String)">
            <summary>
                指定的字符串是否由数值组成
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.StringExtension.GetHashCodeString(System.String)">
            <summary>
                返回指定字符的 hash 值的字符串表示
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.StringExtension.CompareOrdinalIgnoreCase(System.String,System.String)">
            <summary>两个字符串进行不区分大小写比较</summary>
            <param name="strA">The string aggregate.</param>
            <param name="strB">The string attribute.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.StringExtension.FillerString(System.String,System.Int32,System.Char,System.Boolean)">
            <summary>填充字符串，将字符串设置成指定长度，如果小于指定长度前面使用filledChar进行填充，如果已经大于length则直接返回</summary>
            <param name="str">输入的字符串.</param>
            <param name="length">新字符的总长度.</param>
            <param name="filledChar">填充字符.</param>
            <param name="filledLeft">将填充符填充至左则.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.StringExtension.GenerateStreamFromString(System.String)">
            <summary>使用指定的字符串创建一个流</summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.StringExtension.CreateRandomString(System.Int32,System.Random)">
            <summary>
                返回随机的字符串，含中文及英文
                目前实现为英文及数字
            </summary>
            <param name="length">The length.</param>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.StringExtension.RemoveChars(System.String,System.Char[])">
            <summary>从字符串中移除指定的字符</summary>
            <param name="str">The STR.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:X.CommLib.Office.StringExtension.RemoveStrings(System.String,System.String[])">
            <summary>从字符串中移除指定的字符串</summary>
            <param name="str">The STR.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.StringExtension.Same(System.String,System.String,System.Boolean)">
            <summary>两个字符串是不是一样的。</summary>
            <param name="strA">The string aggregate.</param>
            <param name="strB">The string attribute.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.StringExtension.TrimString(System.String,System.Char[])">
            <summary>对字符串进行trim处理，如果输入字符为null则转为0长度字符串</summary>
            <param name="str">The STR.</param>
            <param name="trimChars">The trim chars.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Office.StringExtension.SplitLines(System.String)">
            <summary>
            将字符串按回车换行拆分成多行
            </summary>
            <param name="input">The input.</param>
            <returns>System.String[].</returns>
        </member>
        <member name="T:X.CommLib.Office.FileCharsetDetector">
            <summary>
                文件字符串探测器
                nuget Install-Package UDE.CSharp
            </summary>
        </member>
        <member name="M:X.CommLib.Office.FileCharsetDetector.GetBytesCharset(System.Byte[],System.Text.Encoding)">
            <summary>
            判断二进制流的字符串编码
            </summary>
            <param name="bytes">
            The bytes.
            </param>
            <param name="defaultEncoding">
            检测失败返回该值
            </param>
            <returns>
            The <see cref="T:System.Text.Encoding"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.Office.FileCharsetDetector.GetStreamCharset(System.IO.Stream,System.Text.Encoding)">
            <summary>
            检测文件流字符串
                如果使用组件判断可能性小于 50%，则使用 defaultEncoding，如果未设置 DefaultEncoding，则使用默认编码
            </summary>
            <param name="reader">
            The reader.
            </param>
            <param name="defaultEncoding">
            检测失败返回该值
            </param>
            <returns>
            The <see cref="T:System.Text.Encoding"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.Office.FileCharsetDetector.GetFileCharset(System.String,System.Text.Encoding)">
            <summary>
            返回文件的文字编码
            </summary>
            <param name="filePath">
            The file path.
            </param>
            <param name="defaultEncoding">
            失败时返回该值
            </param>
            <returns>
            The <see cref="T:System.Text.Encoding"/>.
            </returns>
        </member>
        <member name="T:X.CommLib.Pandocs.File">
            <summary>
                表示一个文件
            </summary>
        </member>
        <member name="P:X.CommLib.Pandocs.File.FileType">
            <summary>
                文件类型
            </summary>
            <value>
                The type of the file.
            </value>
        </member>
        <member name="P:X.CommLib.Pandocs.File.FilePath">
            <summary>
                表示一个文件
            </summary>
            <value>
                The file path.
            </value>
        </member>
        <member name="T:X.CommLib.Pandocs.FileType">
            <summary>
                文件类型
            </summary>
        </member>
        <member name="T:X.CommLib.Pandocs.PandocHelper">
            <summary>
                Pandoc辅助工具
                Pandoc 是一个文档的辅助转换工具
                http://pandoc.org/
                在线手册 http://pandoc.org/README.html
                教程：
                http://zhouyichu.com/misc/Pandoc.html
            </summary>
        </member>
        <member name="T:X.CommLib.PublishTools.AssemblyInfoVersionUpdater">
            <summary>
                程序集版本号升级器
            </summary>
        </member>
        <member name="M:X.CommLib.PublishTools.AssemblyInfoVersionUpdater.UpdateVersion(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            进行版本更新 
            </summary>
            <param name="infoFile">The information file.</param>
            <param name="minorIncrement">The minor increment.</param>
            <param name="buildIncrement">The build increment.</param>
        </member>
        <member name="M:X.CommLib.PublishTools.AssemblyInfoVersionUpdater.Update(System.String,System.String[],System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                增加指定文件中版本类型的版本号
            </summary>
            <param name="infoFile">The information file.</param>
            <param name="versionTypes">版本类型，直接传入 null, 为全部 "AssemblyVersion", "AssemblyFileVersion".</param>
            <param name="minorIncrement">The minor increment.</param>
            <param name="buildIncrement">The build increment.</param>
        </member>
        <member name="M:X.CommLib.PublishTools.AssemblyInfoVersionUpdater.LoadDefaultVersionTypes">
            <summary>
                下载当前支持的版本号类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.PublishTools.AssemblyInfoVersionUpdater.Test">
            <summary>
                Tests this instance.
            </summary>
        </member>
        <member name="M:X.CommLib.PublishTools.AssemblyInfoVersionUpdater.LoadDefaultAssemblyInfoFilePath">
            <summary>
                载入默认的的路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.PublishTools.AssemblyInfoVersionUpdater.UpdateVersion(System.String,System.Int32,System.Int32)">
            <summary>
                更新文件版本
            </summary>
            <param name="version">The value.</param>
            <param name="minor">The minor.</param>
            <param name="build">The build.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.PublishTools.CsScriptHelper">
            <summary>
                csscript 的辅助函数
            </summary>
        </member>
        <member name="M:X.CommLib.PublishTools.CsScriptHelper.UpdateCurrentSlutionShortcut">
            <summary>
                更新当前项目下csscript的快捷方式
            </summary>
        </member>
        <member name="M:X.CommLib.PublishTools.CsScriptHelper.UpdateShortcutFromDirectory(System.String)">
            <summary>
            更新一个目录下的　csscript 快捷方式到
            </summary>
            <param name="directory">
            The directory.
            </param>
        </member>
        <member name="M:X.CommLib.PublishTools.CsScriptHelper.Test">
            <summary>
                Tests this instance.
            </summary>
        </member>
        <member name="T:X.CommLib.PublishTools.SetupBuildCommand">
            <summary>
                安装程序编译命令
            </summary>
        </member>
        <member name="P:X.CommLib.PublishTools.SetupBuildCommand.AdvProject">
            <summary>
                编辑项目路径
            </summary>
            <value>
                The adv project.
            </value>
        </member>
        <member name="P:X.CommLib.PublishTools.SetupBuildCommand.AppSourceDirectory">
            <summary>
                数据源
            </summary>
            <value>
                The application source directory.
            </value>
        </member>
        <member name="P:X.CommLib.PublishTools.SetupBuildCommand.BuildedFunc">
            <summary>
                当编辑完成后调用
            </summary>
            <value>
                The builded function.
            </value>
        </member>
        <member name="P:X.CommLib.PublishTools.SetupBuildCommand.CopyFileToDesktop">
            <summary>
                复制安装包副本到桌面
            </summary>
            <value>
                <c>true</c> if [copy to desktop]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:X.CommLib.PublishTools.SetupBuildCommand.CopyFileWithVersion">
            <summary>
                安装包完成后，复制一个带版本号的名称
            </summary>
            <value>
                <c>true</c> if [copy file with version]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:X.CommLib.PublishTools.SetupBuildCommand.MenuName">
            <summary>
                命令名称
            </summary>
        </member>
        <member name="P:X.CommLib.PublishTools.SetupBuildCommand.SetupFilePaths">
            <summary>
                工作结束后获得安装程序的路径
            </summary>
            <value>
                The setup file paths.
            </value>
        </member>
        <member name="P:X.CommLib.PublishTools.SetupBuildCommand.VerApp">
            <summary>
                获取版本号的应用程序路径或名称
            </summary>
            <value>
                The ver application.
            </value>
        </member>
        <member name="M:X.CommLib.PublishTools.SetupBuildCommand.CopyToDesktop(System.String,System.String[])">
            <summary>
            将指定的文件复制到桌面下的程序发布目录中
            如果是试用版本，则后面带有 Trial 字符
            </summary>
            <param name="appName">
            复制文件时，在文件名前添加的前缀.
            </param>
            <param name="setupFiles">
            需要复制的文件.
            </param>
        </member>
        <member name="M:X.CommLib.PublishTools.SetupBuildCommand.PublishSetup(System.String,System.String,System.String,System.Action{System.String[]},System.Boolean)">
            <summary>
            构造安装程序.
            </summary>
            <param name="advProject">安装包项目的路径，默认为 Install/Install.aip</param>
            <param name="verApp">程序根据该文件获取版本号.</param>
            <param name="appSourceDirectory">如果指定程序文件的源目录，则从源目录中复制到本地的安装目录下，
            如果指定相应路径，则为桌面上的路径.
            目录复制到 advProject 目录下的 Apps 子目录下</param>
            <param name="buildedFunc">编译完成后的回调函数.</param>
            <param name="entryKey">直接结束还是按回车键结束程序.</param>
            <returns>生成的安装程序的文件路径，由 setupFiles 推算得到</returns>
        </member>
        <member name="P:X.CommLib.PublishTools.SetupBuildCommand.EntryKey">
            <summary>
            程序运行结束后要不要回车键结束
            </summary>
            <value>The entry key.</value>
        </member>
        <member name="M:X.CommLib.PublishTools.SetupBuildCommand.Test">
            <summary>
            Tests this instance.
            </summary>
        </member>
        <member name="M:X.CommLib.PublishTools.SetupBuildCommand.RunCommand">
            <summary>
                运行命令
            </summary>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:X.CommLib.PublishTools.SetupBuildCommand.StartDirectory(System.String[])">
            <summary>
            打开文件对应的目录
            </summary>
            <param name="setupFiles">The setup files.</param>
        </member>
        <member name="M:X.CommLib.PublishTools.SetupBuildCommand.UpdateSetupFilesWithVersion(System.String[])">
            <summary>
            将文件按照版本号进行一次升级
                返回原文件及复本文件的路径
                文件的版本号从安装包中获取
            </summary>
            <param name="setupFiles">
            The setup files.
            </param>
            <returns>
            The
                <see>
                    <cref>string[]</cref>
                </see>
                .
            </returns>
        </member>
        <member name="T:X.CommLib.PublishTools.DotNetReactor">
            <summary>
                dotNET_Reactor 工具
            </summary>
        </member>
        <member name="M:X.CommLib.PublishTools.DotNetReactor.Test">
            <summary>
                Tests this instance.
            </summary>
        </member>
        <member name="M:X.CommLib.PublishTools.DotNetReactor.BuildProject(System.String)">
            <summary>
            编译一个项目文件
            来源：http://www.eziriz.com/help/source/command_line.htm
            </summary>
            <param name="projectFilePath">项目文件路径</param>
            <exception cref="T:System.NotSupportedException">启动编译程序失败</exception>
            <exception cref="T:System.ApplicationException">编译失败； + info</exception>
        </member>
        <member name="M:X.CommLib.PublishTools.DotNetReactor.GetAppPath">
            <summary>
            返回程序安装路径
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.ApplicationException">
            无法找到 DotNetReactor 安装路径
            </exception>
            <exception cref="T:System.NotSupportedException">
            无法找到 DotNetReactor 安装路径
            </exception>
        </member>
        <member name="T:X.CommLib.PublishTools.PbulishCommand">
            <summary>
                为了与以前兼容，因为以前发布的类名，拼写错了
            </summary>
        </member>
        <member name="T:X.CommLib.PublishTools.PublishCommand">
            <summary>
                发布工具，内置了编译，混淆，同步，压缩的整个流程
            </summary>
        </member>
        <member name="P:X.CommLib.PublishTools.PublishCommand.AppName">
            <summary>
            </summary>
            <value>
                主程序的名称
            </value>
        </member>
        <member name="P:X.CommLib.PublishTools.PublishCommand.BuildPlatform">
            <summary>
                编译平台
            </summary>
            <value>
                The build platform.
            </value>
        </member>
        <member name="P:X.CommLib.PublishTools.PublishCommand.BuildProjectFile">
            <summary>
                编译项目路径
            </summary>
            <value>
                The build project file.
            </value>
        </member>
        <member name="P:X.CommLib.PublishTools.PublishCommand.MenuName">
            <summary>
                命令名称
            </summary>
        </member>
        <member name="P:X.CommLib.PublishTools.PublishCommand.ObscureProjectFile">
            <summary>
                混淆项目的路径
            </summary>
            <value>
                The obscure project file.
            </value>
        </member>
        <member name="P:X.CommLib.PublishTools.PublishCommand.PublishDirectory">
            <summary>
                发布目录
            </summary>
            <value>
                The publish directory.
            </value>
        </member>
        <member name="P:X.CommLib.PublishTools.PublishCommand.PublishName">
            <summary>
                程序的名称
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:X.CommLib.PublishTools.PublishCommand.SyncProjectFile">
            <summary>
                同步项目的路径
            </summary>
            <value>
                The synchronize project file.
            </value>
        </member>
        <member name="E:X.CommLib.PublishTools.PublishCommand.OnFileBuildedEvent">
            <summary>
                当项目被编译完成时
            </summary>
        </member>
        <member name="E:X.CommLib.PublishTools.PublishCommand.OnFileObsuredEvent">
            <summary>
                当应用被混淆时
            </summary>
        </member>
        <member name="E:X.CommLib.PublishTools.PublishCommand.OnFilePublishedEvent">
            <summary>
                当文件被发布，但还没有被打包的时候
            </summary>
        </member>
        <member name="E:X.CommLib.PublishTools.PublishCommand.OnFileZipedEvent">
            <summary>
                当文件被打包时
            </summary>
        </member>
        <member name="M:X.CommLib.PublishTools.PublishCommand.PublishApp(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            发送应用的包装函数，将一些文件进行了约定
            </summary>
            <param name="publishName">项目的名称，为生成的exe文件的无后缀文件名.</param>
            <param name="platform">编译平台名.</param>
            <param name="dotreactorFileName">混淆项目名.</param>
            <param name="fileSyncFileName">同步项目名.</param>
            <param name="appName">应用程序的名称，主要为了获取版本号使用，如果为null，则为 {publishName}.exe.</param>
        </member>
        <member name="M:X.CommLib.PublishTools.PublishCommand.PublishAppCore(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            发送应用的包装函数，将一些文件进行了约定
            </summary>
            <param name="publishName">项目的名称(生成的 exe 文件的无后缀名部分).</param>
            <param name="projectFileName">编译的项目文件名或文件路径.</param>
            <param name="platform">编译平台配置项.</param>
            <param name="dotreactorFileName">混淆项目名. null，则不使用</param>
            <param name="fileSyncFileName">同步项目名. null，则不使用</param>
            <param name="appName">应用程序的名称，主要为了获取版本号使用，如果为null，则为 {publishName}.exe</param>
        </member>
        <member name="M:X.CommLib.PublishTools.PublishCommand.GetFullFilePath(System.String,System.String[])">
            <summary>
            返回文件的完整路径
            如果文件名为null或完整路径直接返回null或完整路径
            如果文件名非完整路径，则拼接上基础路径
            拼接基础路径时，如果文件存在，则返回存在的那个路径，如果都不存在，返回第一个拼接路径
            </summary>
            <param name="fileName">文件名或路径.</param>
            <param name="baseDirectories">The base directories.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:X.CommLib.PublishTools.PublishCommand.PublishTrialApp(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            发送试用版本，指定正式版本 project，发布时根据正式版本的 project 文件，自动加入试用宏
            </summary>
            <param name="publishName">Name of the publish.</param>
            <param name="platform">The platform.</param>
            <param name="dotreactorFileName">Name of the dotreactor file.</param>
            <param name="fileSyncFileName">Name of the file synchronize file.</param>
            <param name="appName">应用程序的名称，主要为了获取版本号使用，如果为null，则为 {publishName}.exe.</param>
        </member>
        <member name="M:X.CommLib.PublishTools.PublishCommand.RunCommand">
            <summary>
                运行命令
            </summary>
        </member>
        <member name="M:X.CommLib.PublishTools.PublishCommand.BuildProject(System.String,System.String)">
            <summary>
                编译程序
            </summary>
            <param name="projectFile">
                The project file.
            </param>
            <param name="buildPlatform">
                The build platform.
            </param>
        </member>
        <member name="M:X.CommLib.PublishTools.PublishCommand.CleanFiles(System.String)">
            <summary>
                对发布目录下的文件进行清理
            </summary>
            <param name="publishDirectory">
                The publish directory.
            </param>
        </member>
        <member name="M:X.CommLib.PublishTools.PublishCommand.CleanPublishDirctory(System.String)">
            <summary>
                清空发布目录
            </summary>
            <param name="directory">
                The publish directory.
            </param>
            <exception cref="T:System.ApplicationException">
                发布目录未定义
            </exception>
        </member>
        <member name="M:X.CommLib.PublishTools.PublishCommand.ObscureProject(System.String)">
            <summary>
                混淆程序
            </summary>
            <param name="projectFile">
                The project file.
            </param>
        </member>
        <member name="M:X.CommLib.PublishTools.PublishCommand.SendEvent(System.EventHandler{System.EventArgs})">
            <summary>
                发送事件
            </summary>
            <param name="eventHandler">
                The event handler.
            </param>
        </member>
        <member name="M:X.CommLib.PublishTools.PublishCommand.SyncProject(System.String)">
            <summary>
                同步程序
            </summary>
            <param name="projectFile">
                The project file.
            </param>
        </member>
        <member name="M:X.CommLib.PublishTools.PublishCommand.ZipProject(System.String,System.String,System.String,System.String)">
            <summary>
                打包程序
            </summary>
            <param name="publishDirectory">
                程序所在的目录.
            </param>
            <param name="appName">
                主程序的名称（用来提取版本号）.
            </param>
            <param name="publishName">
                压缩文件的名称.
            </param>
            <param name="zipDirectory">
                压缩文件保存的目录.
            </param>
        </member>
        <member name="T:X.CommLib.PublishTools.PublishFileZiper">
            <summary>
                发布文件打包器
            </summary>
        </member>
        <member name="M:X.CommLib.PublishTools.PublishFileZiper.Test">
            <summary>
                Tests this instance.
            </summary>
        </member>
        <member name="M:X.CommLib.PublishTools.PublishFileZiper.Zip(System.String,System.String,System.String,System.String)">
            <summary>
                打包一个程序文件夹
            </summary>
            <param name="appName">主程序名称.</param>
            <param name="appDirectory">程序目录.</param>
            <param name="zipName">打包文件名.</param>
            <param name="zipDirctory">打包目录.</param>
        </member>
        <member name="T:X.CommLib.PublishTools.AdvInsProjectBuilder">
            <summary>
                构造 advanced installer 安装程序项目
            </summary>
        </member>
        <member name="M:X.CommLib.PublishTools.AdvInsProjectBuilder.TestPublishSetup">
            <summary>
                进行安装程序发布测试
            </summary>
        </member>
        <member name="M:X.CommLib.PublishTools.AdvInsProjectBuilder.Build(System.String,System.Boolean)">
            <summary>
                输入配置文件进行编译
                1. 版本号加1
                2. 编译所有项目
                3. 清空缓存目录
            </summary>
            <param name="configPath">
                The config path.
            </param>
            <param name="increaseVersion">
                是否自增版本号.
            </param>
        </member>
        <member name="M:X.CommLib.PublishTools.AdvInsProjectBuilder.PublishSetup(System.String,System.String,System.String)">
            <summary>
            构造安装程序.
            安装程序的源目录为安装配置所在目录下的 Apps 目录下
            有一个假设，所有的程序都编译为单exe文件
            </summary>
            <param name="advProject">安装包项目的路径，默认为 Install/Install.aip</param>
            <param name="verApp">程序根据该文件获取版本号.</param>
            <param name="appSourceDirectory">如果指定程序文件的源目录，则从源目录中复制到本地的安装目录下，
            如果指定相应路径，则为桌面上的路径.源目录,
            源文件将被复制到 advProject 所在目录下的 Apps 子目录中</param>
            <returns>The
            <see><cref>string[]</cref></see>
            .</returns>
            <exception cref="T:System.IO.FileNotFoundException">安装程序的目录不存在</exception>
        </member>
        <member name="M:X.CommLib.PublishTools.AdvInsProjectBuilder.BuildTrialSetupPackage(System.String,System.String,System.Version)">
            <summary>
                创建一个试用版的安装包
            </summary>
            <param name="advProject">The adv project.</param>
            <param name="baseDir">The base dir.</param>
            <param name="appVersion">The application version.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.PublishTools.AdvInsProjectBuilder.GetTrialGuid(System.String)">
            <summary>
                将 guid 值改为试用版的 guid
                （最后四位为abcd）
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.PublishTools.AdvInsProjectBuilder.GetAdvInstProjectFilePath(System.String,System.String@)">
            <summary>
                返回安装项目文件的完整路径
            </summary>
            <param name="advProject">The adv project.</param>
            <param name="baseDir">The base dir.</param>
            <returns></returns>
            <exception cref="T:System.IO.FileNotFoundException">
                编译项目文件不存在
                or
                $解析安装目录失败：{advProject}
            </exception>
        </member>
        <member name="M:X.CommLib.PublishTools.AdvInsProjectBuilder.SetupPackageIsTrialModel(System.String)">
            <summary>
                指定路径的安装文件是不是设置为试用模式
                内部设置 InternalName 是不是带有 TRIAL 字符
            </summary>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.PublishTools.AdvInsProjectBuilder.BuildSetupPackage(System.String,System.String,System.Version)">
            <summary>
            构建一个安装包
            </summary>
            <param name="advProject">The adv project.</param>
            <param name="baseDir">The base dir.</param>
            <param name="appVersion">The application version.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.PublishTools.AdvInsProjectBuilder.GetAppVersion(System.String,System.String)">
            <summary>
                返回应用程序的版本
            </summary>
            <param name="verApp">
                The ver application.
            </param>
            <param name="appDirectory">
                The application direcotry.
            </param>
            <returns>
                The <see cref="T:System.Version" />.
            </returns>
        </member>
        <member name="M:X.CommLib.PublishTools.AdvInsProjectBuilder.AppIsTrialModel(System.String,System.String)">
            <summary>
                指定的文件当前是否是试用模式
            </summary>
            <param name="app">The application.</param>
            <param name="appDirectory">The application directory.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.PublishTools.AdvInsProjectBuilder.GetFullPath(System.String,System.String,System.String)">
            <summary>
                返回完整路径
            </summary>
            <param name="path">
                The path.
            </param>
            <param name="parent">
                如果 path 为相对路径，则使用该父路径.
            </param>
            <param name="defaultPath">
                如果 path = null，则使用该值.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.PublishTools.AdvInsProjectBuilder.TryCopyAppsFromSource(System.String,System.String)">
            <summary>
                尝试从 appSourceDirectory 复制文件到 appDirectory
                如果没有指定 appSourceDirectory 则直接返回
            </summary>
            <param name="appSourceDirectory">
                The application source directory.
            </param>
            <param name="appDirecotry">
                The application direcotry.
            </param>
        </member>
        <member name="T:X.CommLib.PublishTools.ConfigFileCleraner">
            <summary>
                .net 配置文件清理器
            </summary>
        </member>
        <member name="M:X.CommLib.PublishTools.ConfigFileCleraner.Clean(System.String)">
            <summary>
                开始清理文件
            </summary>
            <param name="configPath">The config path.</param>
        </member>
        <member name="T:X.CommLib.PublishTools.FreeFileSyncRuner">
            <summary>
                FreeFileSync 运行器
            </summary>
        </member>
        <member name="P:X.CommLib.PublishTools.FreeFileSyncRuner.FreeFileSyncPath">
            <summary>
                同步程序的路径
            </summary>
            <value>
                The app path.
            </value>
        </member>
        <member name="M:X.CommLib.PublishTools.FreeFileSyncRuner.GetFreeFileSyncPath">
            <summary>
                返回同步程序的路径，如果设置为FreeFileSyncPath则直接返回
                如果FreeFileSyncPath未设置，则从注册表获取
                如果都不存在，则返回null
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.PublishTools.FreeFileSyncRuner.SyncGuiConfig(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                将界面同步配置文件自动转为批处理配置文件并运行
            </summary>
            <param name="configPath">The config path.</param>
            <param name="variables">The variables.</param>
            <exception cref="T:System.IO.FileNotFoundException">@同步配置文件不存在</exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:X.CommLib.PublishTools.FreeFileSyncRuner.Sync(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                使用自动同步配置文件进行同步
            </summary>
            <param name="configPath"></param>
            <param name="variables"></param>
        </member>
        <member name="M:X.CommLib.PublishTools.FreeFileSyncRuner.Sync(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
                使用自动同步配置文件进行同步
            </summary>
            <param name="configPath">The config path.</param>
            <param name="variables">运行时的环境变量</param>
        </member>
        <member name="M:X.CommLib.PublishTools.FreeFileSyncRuner.Sync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                使用默认配置同步文件将源目录中的文件更新至目标目录中
            </summary>
            <param name="sourceDirectory">The source directory.</param>
            <param name="targetDirectory">The target directory.</param>
            <param name="variables">环境变量.</param>
        </member>
        <member name="M:X.CommLib.PublishTools.FreeFileSyncRuner.ReadRightFoldersConfig(System.String)">
            <summary>
                从配置中读出右部路径的设置
            </summary>
            <param name="configPath">The config path.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.PublishTools.FreeFileSyncRuner.FormatPath(System.String)">
            <summary>
                格式化路径
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.PublishTools.FreeFileSyncRuner.ConvertGuiToBatchConfig(System.String)">
            <summary>
                修改界面配置文件到自动批处理配置文件
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:X.CommLib.PublishTools.FreeFileSyncRuner.CreateElement(System.Xml.XmlDocument,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                创建一个xml节点
            </summary>
            <param name="document">The document.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="attribs">The attribs.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.PublishTools.NotepadEditor">
            <summary>
                记事本运行器，当记事本退出才返回函数
            </summary>
        </member>
        <member name="M:X.CommLib.PublishTools.NotepadEditor.ShowAuthSoftInfo(System.String,System.String)">
            <summary>
            打开认证网站，在桌面上保存相关信息，并使用记事本打开
            </summary>
            <param name="title">
            需要保存的文件名.
            </param>
            <param name="message">
            信息内容.
            </param>
        </member>
        <member name="M:X.CommLib.PublishTools.NotepadEditor.Edit(System.String)">
            <summary>
            使用记事本编辑一段文本。并返回编辑后的文本
            </summary>
            <param name="message">
            The message.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:X.CommLib.Securities.EncryptedDJsonataStore">
            <summary>
                加密数据存储器,内部使用 json 方式进行存储
            </summary>
        </member>
        <member name="P:X.CommLib.Securities.EncryptedDJsonataStore.Key">
            <summary>
                加、解密使用的key，如果未设置，则使用默认值
            </summary>
            <value>
                The key.
            </value>
        </member>
        <member name="P:X.CommLib.Securities.EncryptedDJsonataStore.Provider">
            <summary>
                加解密算法、默认使用TripleDESCryptoServiceProvider
            </summary>
            <value>
                The provider.
            </value>
        </member>
        <member name="P:X.CommLib.Securities.EncryptedDJsonataStore.SaveKey">
            <summary>
                是否将key也保存进去
            </summary>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDJsonataStore.Dispose">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDJsonataStore.ReadData``1(System.String)">
            <summary>
                从文件中读取加密数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json">The json.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDJsonataStore.WriteData(System.Object)">
            <summary>
                写入数据到加密文件中
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDJsonataStore.DecodeData``1(X.CommLib.Securities.EncryptedDJsonataStore.DataInfo)">
            <summary>
                解密数据
            </summary>
            <param name="dataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDJsonataStore.GenerateDataInfo(System.Object)">
            <summary>
                生成加密辅助数据
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDJsonataStore.GenerateIv(System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
                生成加密使用的iv
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDJsonataStore.GenerateKey(System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
                生成加密key
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDJsonataStore.GenerateKey(X.CommLib.Securities.EncryptedDJsonataStore.DataInfo)">
            <summary>
                获取解密key
            </summary>
            <param name="dataInfo"></param>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDJsonataStore.GetProvider">
            <summary>
                返回加、解密算法
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDJsonataStore.Test">
            <summary>
                数据测试
            </summary>
        </member>
        <member name="T:X.CommLib.Securities.EncryptedDJsonataStore.DataInfo">
            <summary>
                内部辅助保存信息
            </summary>
        </member>
        <member name="F:X.CommLib.Securities.EncryptedDJsonataStore.DataInfo.Data">
            <summary>
                保存或是读取的对象
            </summary>
        </member>
        <member name="F:X.CommLib.Securities.EncryptedDJsonataStore.DataInfo.Iv">
            <summary>
                加、解密的iv
            </summary>
        </member>
        <member name="F:X.CommLib.Securities.EncryptedDJsonataStore.DataInfo.Key">
            <summary>
                加、解密的key
            </summary>
        </member>
        <member name="T:X.CommLib.Securities.SqlConnectionProtector">
            <summary>
                数据连接保存器，可以加密或是解密exe.config中的数据库连接数据
            </summary>
        </member>
        <member name="T:X.CommLib.Securities.SqlConnectionProtector.ProviderType">
            <summary>
                数据保存的类型
            </summary>
        </member>
        <member name="F:X.CommLib.Securities.SqlConnectionProtector.ProviderType.Rsa">
            <summary>
                The RSA
            </summary>
        </member>
        <member name="F:X.CommLib.Securities.SqlConnectionProtector.ProviderType.Dpapi">
            <summary>
                The dpapi
            </summary>
        </member>
        <member name="M:X.CommLib.Securities.SqlConnectionProtector.Decrypt(System.String,System.String)">
            <summary>解密某个节点</summary>
            <param name="sectionName">The key.</param>
            <param name="configpath">The configpath.</param>
        </member>
        <member name="M:X.CommLib.Securities.SqlConnectionProtector.Encrypt(System.String,X.CommLib.Securities.SqlConnectionProtector.ProviderType,System.String)">
            <summary>进行加密处理</summary>
            <param name="sectionName">The key.</param>
            <param name="type">The type.</param>
            <param name="configpath">The configpath.</param>
            <exception cref="T:System.IO.FileNotFoundException">没有找到对应节点</exception>
            <exception cref="T:System.NotSupportedException">未提供支持的加密类型： + type</exception>
        </member>
        <member name="M:X.CommLib.Securities.SqlConnectionProtector.Test">
            <summary>
                进行测试
            </summary>
        </member>
        <member name="T:X.CommLib.Securities.EncryptedDataStore">
            <summary>
                加密数据存储器， 内部使用二进制形式保存
            需要处理的对象需要标记为可序列化
            </summary>
        </member>
        <member name="P:X.CommLib.Securities.EncryptedDataStore.Key">
            <summary>
            加、解密使用的key，如果未设置，则使用默认值
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:X.CommLib.Securities.EncryptedDataStore.Provider">
            <summary>
                加解密算法、默认使用TripleDESCryptoServiceProvider
            </summary>
            <value>
                The provider.
            </value>
        </member>
        <member name="P:X.CommLib.Securities.EncryptedDataStore.SaveKey">
            <summary>
                是否将key也保存进去
            </summary>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDataStore.ReadData``1(System.String)">
            <summary>
                从文件中读取加密数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDataStore.WriteData(System.String,System.Object)">
            <summary>
                写入数据到加密文件中
            </summary>
            <param name="filePath">The file path.</param>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDataStore.DecodeData``1(X.CommLib.Securities.EncryptedDataStore.DataInfo)">
            <summary>
                解密数据
            </summary>
            <param name="dataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDataStore.GenerateDataInfo(System.Object)">
            <summary>
                生成加密辅助数据
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDataStore.GenerateIv(System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
                生成加密使用的iv
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDataStore.GenerateKey(System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
                生成加密key
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDataStore.GenerateKey(X.CommLib.Securities.EncryptedDataStore.DataInfo)">
            <summary>
                获取解密key
            </summary>
            <param name="dataInfo"></param>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDataStore.GetProvider">
            <summary>
                返回加、解密算法
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.EncryptedDataStore.Test">
            <summary>
                数据测试
            </summary>
        </member>
        <member name="T:X.CommLib.Securities.EncryptedDataStore.DataInfo">
            <summary>
                内部辅助保存信息
            </summary>
        </member>
        <member name="F:X.CommLib.Securities.EncryptedDataStore.DataInfo.Data">
            <summary>
                保存或是读取的对象
            </summary>
        </member>
        <member name="F:X.CommLib.Securities.EncryptedDataStore.DataInfo.Iv">
            <summary>
                加、解密的iv
            </summary>
        </member>
        <member name="F:X.CommLib.Securities.EncryptedDataStore.DataInfo.Key">
            <summary>
                加、解密的key
            </summary>
        </member>
        <member name="T:X.CommLib.Securities.SecurityTools">
            <summary>
                加密、解密辅助类
            </summary>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.OutputBytes(System.Byte[])">
            <summary>
                输出二进制浏览
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.Test">
            <summary>
                内部测试
            </summary>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.EncryptByRSA(System.String,System.String,System.Text.Encoding)">
            <summary>
                对一段字符串进行非对称加密，加密前先字符转为指定的编码，加密后二进制块以base64编码
            </summary>
            <param name="source"></param>
            <param name="key"></param>
            <param name="encoding">加密前转为指定的编码，默认utf-8</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.EncryptByRSA(System.Byte[],System.String)">
            <summary>
                对一段二进制流进行非对称加密
            </summary>
            <param name="source"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.DecrypByRSA(System.String,System.String,System.Text.Encoding)">
            <summary>
                将base64编码的二进制数据解码后进行非对称解密，解密后的得到的二进制数据以指定编码转为字符串
            </summary>
            <param name="source"></param>
            <param name="key"></param>
            <param name="encoding">解码后的字符串编码，默认为utf-8</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.DecrypByRSA(System.Byte[],System.String)">
            <summary>
                对一段二进制流进行非对称解密
            </summary>
            <param name="source"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.CreateChilkatRsa">
            <summary>
                创建chilkat rsa 非对称加密解密对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.CreateRijndaelDecrypStream(System.Byte[],System.Byte[],System.IO.Stream)">
            <summary>
                创建一个读出的解密流
            </summary>
            <param name="key"></param>
            <param name="iv"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.CreateRijndaelEncrypStream(System.Byte[],System.Byte[],System.IO.Stream)">
            <summary>
                创建一个写入的加密流
            </summary>
            <param name="key"></param>
            <param name="iv"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.EncrypByRijndael(System.String,System.Byte[],System.Byte[])">
            <summary>
            对一段字符串进行对称加密，加密前将字符串按指定的字符集进行转换成二进制块再进行加密
            加密后的得到的二进制数据块以Base64编码
            </summary>
            <param name="source">待加密的串</param>
            <param name="key">加密的密码</param>
            <param name="iv">加密的初始量</param>
            <returns>base64编码的经过加密的串</returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.GenerateRijndaelIV">
            <summary>
                创建一个随机的RijndaelIV值
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.GenerateIV">
            <summary>
                创建一个随机iv值
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.GenerateKey">
            <summary>
                创建一个随机key值
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.GenerateRijndaelKey">
            <summary>
                创建一个随机key值
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.EncrypByRijndael(System.Byte[],System.Byte[],System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            对二进制块进行对称加密
            </summary>
            <param name="source">待加密的串</param>
            <param name="key">密码</param>
            <param name="iv">初始量</param>
            <param name="provider">The provider.</param>
            <returns>
            经过加密的串
            </returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.EncrypByRijndael(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            进行二进制加密
            </summary>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.DecrypByRijndael(System.String,System.Byte[],System.Byte[],System.Text.Encoding)">
            <summary>
                对一段base64编码的数据进行对称解密，解密后的数据使用指定的编码转为字符串
            </summary>
            <param name="source">base64编码的待解密的串</param>
            <param name="iv">初始量</param>
            <param name="key">密码</param>
            <param name="encoding">解密后的二进制块转为文字使用的字符集，默认为utf8</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.DecrypByRijndael(System.Byte[],System.Byte[],System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
                对一段加密后的二进制块进行解密
            </summary>
            <param name="source">待解密的串</param>
            <param name="key">密码</param>
            <param name="iv">初始量</param>
            <param name="provider">The provider.</param>
            <returns>
                经过解密的串
            </returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.DecrypByRijndael(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            使用默认解码器解密数据
            </summary>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.EncrypSecurityData(System.Object,System.Byte[],System.Byte[])">
            <summary>
                xml序列化某个类，然后使用对称加密法进行加密
            </summary>
            <param name="obj"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Securities.SecurityTools.DecrypSecurityData``1(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            将一个xml序列化后加密的对象进行解密
            </summary>
            <typeparam name="T"></typeparam>
            <param name="securityData">The security data.</param>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Threader.FunctionHelper">
            <summary>
                函数定义
            </summary>
        </member>
        <member name="T:X.CommLib.Threader.FunctionHelper.Function`1">
            <summary>
            无参数函数定义
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Threader.FunctionHelper.Function`2">
            <summary>
                1个参数的函数定义
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TV">The type of the v.</typeparam>
            <param name="TV">The tv.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Threader.FunctionHelper.Function`3">
            <summary>
            2个参数的函数定义
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TV1">The type of the v1.</typeparam>
            <typeparam name="TV2">The type of the v2.</typeparam>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Threader.FunctionHelper.Function`4">
            <summary>
            3个参数的函数定义
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TV1">The type of the v1.</typeparam>
            <typeparam name="TV2">The type of the v2.</typeparam>
            <typeparam name="TV3">The type of the v3.</typeparam>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Threader.LockHelper">
            <summary>
            同步锁辅助类，支持使用字符串
            </summary>
        </member>
        <member name="F:X.CommLib.Threader.LockHelper.LokcerDictionary">
            <summary>
                更新同步锁
            </summary>
        </member>
        <member name="M:X.CommLib.Threader.LockHelper.GetLockKey(System.String)">
            <summary>
                返回指定名称的同步锁
            </summary>
            <param name="keyName">Name of the locker.</param>
            <returns>
                System.Object.
            </returns>
        </member>
        <member name="M:X.CommLib.Threader.LockHelper.TryLock(System.Object,System.Int32)">
            <summary>
                锁定,成功返回锁，失败返回 null
            </summary>
            <param name="key">The key.</param>
            <param name="timeout">超时时间（毫秒）.</param>
        </member>
        <member name="M:X.CommLib.Threader.LockHelper.TryLock(System.String,System.Int32)">
            <summary>
                锁定,成功返回锁，失败返回 null
            </summary>
            <param name="keyName">Name of the key.</param>
            <param name="timeout">超时时间（毫秒）.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Threader.LockHelper.Lock(System.String)">
            <summary>
            进行锁
            </summary>
            <param name="keyName">Name of the key.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Threader.LockHelper.Lock(System.Object)">
            <summary>
            进行锁
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Threader.LockHelper.Unlock(System.Object)">
            <summary>
                解锁
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:X.CommLib.Threader.LockHelper.Unlock(System.String)">
            <summary>
                解锁
            </summary>
            <param name="keyName">Name of the key.</param>
        </member>
        <member name="T:X.CommLib.Threader.LoggingEventHandler">
            <summary>
                日志事件
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:X.CommLib.Threader.LoggingEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:X.CommLib.Threader.LoggingEventArgs">
            <summary>
                任务日志事件
            </summary>
        </member>
        <member name="M:X.CommLib.Threader.LoggingEventArgs.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Threader.LoggingEventArgs" /> class.
            </summary>
        </member>
        <member name="M:X.CommLib.Threader.LoggingEventArgs.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.Threader.LoggingEventArgs"/> class.</summary>
            <param name="message">对事件的描述</param>
            <param name="error">可能附带的错误信息</param>
        </member>
        <member name="M:X.CommLib.Threader.LoggingEventArgs.#ctor(X.CommLib.Threader.LoggingType,System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.Threader.LoggingEventArgs"/> class. </summary>
            <param name="loggingType">日志的类型</param>
            <param name="message">对事件的描述</param>
            <param name="error">可能附带的错误信息</param>
        </member>
        <member name="P:X.CommLib.Threader.LoggingEventArgs.DateTime">
            <summary>
                日志发生时的时间
            </summary>
            <value>
                The datet time.
            </value>
        </member>
        <member name="P:X.CommLib.Threader.LoggingEventArgs.Error">
            <summary>
                可能附带的错误信息
            </summary>
        </member>
        <member name="P:X.CommLib.Threader.LoggingEventArgs.Message">
            <summary>
                对事件的描述
            </summary>
        </member>
        <member name="P:X.CommLib.Threader.LoggingEventArgs.Sender">
            <summary>
                日志的发送者
            </summary>
            <value>
                The sender.
            </value>
        </member>
        <member name="P:X.CommLib.Threader.LoggingEventArgs.Type">
            <summary>
                日志的类型
            </summary>
        </member>
        <member name="M:X.CommLib.Threader.LoggingEventArgs.ToString">
            <summary>
                返回日志字符表示
            </summary>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Threader.LoggingType">
            <summary>
                日志类型
            </summary>
        </member>
        <member name="F:X.CommLib.Threader.LoggingType.Log">
            <summary>
                普通日志
            </summary>
        </member>
        <member name="F:X.CommLib.Threader.LoggingType.Debug">
            <summary>
                调试日志
            </summary>
        </member>
        <member name="F:X.CommLib.Threader.LoggingType.Error">
            <summary>
                错误日志
            </summary>
        </member>
        <member name="F:X.CommLib.Threader.LoggingType.Warn">
            <summary>
                警告日志
            </summary>
        </member>
        <member name="F:X.CommLib.Threader.LoggingType.Fatal">
            <summary>
                致命错误
            </summary>
        </member>
        <member name="F:X.CommLib.Threader.LoggingType.Display">
            <summary>
                仅仅为了展示使用，使用内容的写函数时不会将该内容写入日志文件
            </summary>
        </member>
        <member name="T:X.CommLib.Threader.SimpleThread">
            <summary>
                简单线程运行器
            </summary>
        </member>
        <member name="T:X.CommLib.Threader.SimpleThread.Function`2">
            <summary>回调函数定义，一个传入参数，一个返回值</summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TParam">The type of the param.</typeparam>
            <param name="param">The param.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Threader.SimpleThread.Function`1">
            <summary>回调函数定义,一个返回值，没有传入参数</summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Threader.SimpleThread.RunFunctionHandle`1">
            <summary>指定时间运行指定的函数，如果运行结束返回 true,</summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Threader.SimpleThread.RunSimpleThreadFunc">
            <summary>
                线程运行回调函数，不带参数，不带返回值
            </summary>
        </member>
        <member name="T:X.CommLib.Threader.SimpleThread.RunSimpleThreadFunc`1">
            <summary>线程运行回调函数，不带参数</summary>
            <typeparam name="TOut"></typeparam>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Threader.SimpleThread.RunSimpleThreadFunc`2">
            <summary>线程运行回调函数，带参数</summary>
            <typeparam name="TOut"></typeparam>
            <typeparam name="TParam"></typeparam>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Threader.SimpleThread.RunFunction(X.CommLib.Threader.SimpleThread.Function{System.Boolean},System.TimeSpan,System.Nullable{System.TimeSpan})">
            <summary>在指定的时间内，  以指定的时间间隔运行回调函数</summary>
            <param name="function">The function.</param>
            <param name="timeOut">The time out.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:X.CommLib.Threader.SimpleThread.RunFunctionWithReturn``1(X.CommLib.Threader.SimpleThread.RunFunctionHandle{``0},``0@,System.TimeSpan,System.Nullable{System.TimeSpan})">
            <summary>在指定的时间内，  以指定的时间间隔运行回调函数
                如果正常结束返回 true
                如果超时返回 false</summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">回调函数，返回 true， 结束回调，返回 false 继续回调， 直到超时.</param>
            <param name="result">The result.</param>
            <param name="timeOut">The time out.</param>
            <param name="span">The span.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Threader.SimpleThread.RunFunctionWithReturn(System.Func{System.Boolean},System.TimeSpan,System.Nullable{System.TimeSpan})">
            <summary>在指定的时间内，  以指定的时间间隔运行回调函数</summary>
            <param name="func">回调函数，返回 true， 结束回调，返回 false 继续回调， 直到超时.</param>
            <param name="timeOut">The time out.</param>
            <param name="span">The span.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Threader.SimpleThread.RunFunction``1(X.CommLib.Threader.SimpleThread.Function{System.Boolean,``0},``0,System.TimeSpan,System.Nullable{System.TimeSpan})">
            <summary>在指定的时间内，  以指定的时间间隔运行回调函数</summary>
            <typeparam name="T"></typeparam>
            <param name="function">回调函数</param>
            <param name="param">回调函数参数</param>
            <param name="timeOut">The time out.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:X.CommLib.Threader.SimpleThread.RunThread``1(X.CommLib.Threader.SimpleThread.RunSimpleThreadFunc{``0})">
            <summary>在线程中运行一段代码，并等待线程结束后返回，如果线程中抛出异常，则在线程结束后抛出异常
                c</summary>
            <typeparam name="TOut"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Threader.SimpleThread.RunThread(X.CommLib.Threader.SimpleThread.RunSimpleThreadFunc)">
            <summary>在线程中运行一段代码，并等待线程结束后返回，如果线程中抛出异常，则在线程结束后抛出异常
                不带输入参数，不带返回值</summary>
            <param name="func"></param>
        </member>
        <member name="M:X.CommLib.Threader.SimpleThread.RunThread``2(X.CommLib.Threader.SimpleThread.RunSimpleThreadFunc{``0,``1},``1)">
            <summary>在线程中运行一段代码，并等待线程结束后返回，如果线程中抛出异常，则在线程结束后抛出异常
                带输入参数，带返回值</summary>
            <param name="func">The func.</param>
            <param name="param">The param.</param>
            <typeparam name="TOut"></typeparam>
            <typeparam name="TParam"></typeparam>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Threader.TaskThreader`1">
            <summary>线程管理器</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:X.CommLib.Threader.TaskThreader`1._maxError">
            <summary>
                每线程最大错误次数
            </summary>
        </member>
        <member name="F:X.CommLib.Threader.TaskThreader`1._threadFunc">
            <summary>
                线程运行函数
            </summary>
        </member>
        <member name="F:X.CommLib.Threader.TaskThreader`1._threaders">
            <summary>
                当前所有的线程
            </summary>
        </member>
        <member name="F:X.CommLib.Threader.TaskThreader`1._workParameter">
            <summary>
                线程运行参数
            </summary>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.#ctor(X.CommLib.Threader.TaskThreader{`0}.TaskThreadFunc,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:X.CommLib.Threader.TaskThreader`1"/> class. </summary>
            <param name="threadFunc">线程回调函数 </param>
            <param name="maxError">最多发生多少次错误时停止该线程，，如果为-1则不会因为异常而退出 </param>
        </member>
        <member name="T:X.CommLib.Threader.TaskThreader`1.TaskThreadFunc">
            <summary>
                内部函数定义
            </summary>
            <param name="parameter"> </param>
        </member>
        <member name="E:X.CommLib.Threader.TaskThreader`1.OnLoggingEvent">
            <summary>
                日志事件
            </summary>
        </member>
        <member name="E:X.CommLib.Threader.TaskThreader`1.OnTaskThreaderStateChangedEvent">
            <summary>
                线程状态改变事件
            </summary>
        </member>
        <member name="P:X.CommLib.Threader.TaskThreader`1.ErrorWaitTime">
            <summary>
                发生错误时的暂停时间
            </summary>
        </member>
        <member name="P:X.CommLib.Threader.TaskThreader`1.IsRunning">
            <summary>
                线程是否正在运行中
            </summary>
        </member>
        <member name="P:X.CommLib.Threader.TaskThreader`1.ThreadName">
            <summary>
                线程的名称
            </summary>
        </member>
        <member name="P:X.CommLib.Threader.TaskThreader`1.ThreadState">
            <summary>
                当前的线程状态
            </summary>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.WaitTime(System.Int32,X.CommLib.Threader.TaskThreaderWorkParameter{`0})">
            <summary>使当前线程等待一个指定时间</summary>
            <param name="waitTime">等待时间的毫秒值 </param>
            <param name="parameter"></param>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.WaitTime(System.TimeSpan,X.CommLib.Threader.TaskThreaderWorkParameter{`0})">
            <summary>使当前线程等待一个指定时间</summary>
            <param name="waitTime">The wait time. </param>
            <param name="parameter">The parameter. </param>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.WaitTime(System.TimeSpan,System.TimeSpan,X.CommLib.Threader.TaskThreaderWorkParameter{`0})">
            <summary>等待一个指定的时间，</summary>
            <param name="minWaitTime">The min wait time. </param>
            <param name="maxWaitTime">The max wait time. </param>
            <param name="parameter">The parameter. </param>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.WaitTime(System.Int32,System.Int32,X.CommLib.Threader.TaskThreaderWorkParameter{`0})">
            <summary>阻塞当前线程指定的时间
                如果minTime及maxTim为0，则直接退出，
                如果minTime与maxTime相等，则阻塞minTime时间，
                如果minTime与maxTime不相同，由阻塞minTime到maxTime之间的随机值</summary>
            <param name="minTime">最小阻塞时间，单位毫秒 </param>
            <param name="maxTime">最大阻塞时间，单位这毫秒 </param>
            <param name="parameter">如果parameter中的NeedStop为True，则直接退出 </param>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.Join">
            <summary>
                阻塞当前线程直到所有线程都已经结束
            </summary>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.SendTaskThreaderStateChangeEvent(X.CommLib.Threader.TaskThreaderState,System.String)">
            <summary>发送线程状态改变事件</summary>
            <param name="state"></param>
            <param name="message"></param>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.StartThreads(`0,System.Int32,System.Nullable{System.Threading.ApartmentState},System.Boolean)">
            <summary>启动线程</summary>
            <param name="parameter"></param>
            <param name="maxThreader">开启多少线程 </param>
            <param name="state">线程模式 </param>
            <param name="isBackground">是否使用后台线程模式 </param>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.StopThreads(System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>停止所有的线程</summary>
            <param name="asynchronous">true:使用异步方式进行处理 </param>
            <param name="waitTime">强制中止前的等待时间. </param>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.ThreadCore(System.Object)">
            <summary>线程运行程序</summary>
            <param name="parameter">The parameter.</param>
            <parameter name="parameter"></parameter>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.GetThreadName(System.Int32)">
            <summary>获取线程的名称</summary>
            <param name="threadId"></param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.SendErrorMessage(System.String,System.Exception,System.TimeSpan,X.CommLib.Threader.TaskThreaderWorkParameter{`0})">
            <summary>对发生错误的线程进行指定时间的等待，如果没有指定，则进行10秒等待</summary>
            <param name="threadName"></param>
            <param name="err"></param>
            <param name="errorWaitTime"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.SendErrorMessage(System.String,System.Exception)">
            <summary>发送发生错误信息</summary>
            <param name="threadname"></param>
            <param name="err"></param>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.SendErrorStopMessage(System.String,System.Exception,System.Int32)">
            <summary>发送因为发生多次错误而中止的消息</summary>
            <param name="threadName"></param>
            <param name="err"></param>
            <param name="errCount"></param>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.SendLoggingEvent(X.CommLib.Threader.LoggingType,System.String,System.Exception)">
            <summary>发送一个日志事件</summary>
            <param name="loggingType"></param>
            <param name="message"></param>
            <param name="error"></param>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.SendLoggingEvent(System.String,System.Exception)">
            <summary>发送一个普通日志事件</summary>
            <param name="message"></param>
            <param name="error"></param>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.SendQuiteMessage(System.String,System.String)">
            <summary>发送某一线程退出消息</summary>
            <param name="threadName"></param>
            <param name="lastMsg">退出原因,可能为空 </param>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.SendThreadAbortMessage(System.String,System.Threading.ThreadAbortException)">
            <summary>发送线程中止请求的事件，并返回错误描述</summary>
            <param name="threadName"></param>
            <param name="err"></param>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.SendThreadStartMessage(System.String)">
            <summary>发送线程启动消息</summary>
            <param name="threadName"></param>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.ThreadIsStoped(System.Threading.Thread)">
            <summary>某一个线程已经结束了</summary>
            <param name="thread"></param>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreader`1.ThreadNeedStop(System.Int32,System.Int32)">
            <summary>是否需要因为错误次数太多而停止工作</summary>
            <param name="errCount">发生错误的次数 </param>
            <param name="maxError">最大错误资料，如果为-1则不会因为发生错误而停止工作 </param>
            <returns>需要停止工作返回true </returns>
        </member>
        <member name="T:X.CommLib.Threader.OnTaskThreaderStateChangedEventHandler">
            <summary>
            任务线程状态改变事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:X.CommLib.Threader.TaskThreaderState">
            <summary>
            线程状态
            </summary>
        </member>
        <member name="F:X.CommLib.Threader.TaskThreaderState.Running">
            <summary>
            线程工作中
            </summary>
        </member>
        <member name="F:X.CommLib.Threader.TaskThreaderState.Stopped">
            <summary>
            线程结束
            </summary>
        </member>
        <member name="T:X.CommLib.Threader.TaskThreaderStateChangedEventArgs">
            <summary>
            任务线程状态改变事件
            </summary>
        </member>
        <member name="P:X.CommLib.Threader.TaskThreaderStateChangedEventArgs.ThreadState">
            <summary>
            线程状态
            </summary>
        </member>
        <member name="P:X.CommLib.Threader.TaskThreaderStateChangedEventArgs.Message">
            <summary>
            描述
            </summary>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreaderStateChangedEventArgs.#ctor(X.CommLib.Threader.TaskThreaderState,System.String)">
            <summary>
            
            </summary>
            <param name="threadState">线程当前状态</param>
            <param name="message">描述</param>
        </member>
        <member name="T:X.CommLib.Threader.TaskThreaderWorkParameter`1">
            <summary>
            线程管理器工作参数
            </summary>
            <typeparam name="T">
            </typeparam>
        </member>
        <member name="P:X.CommLib.Threader.TaskThreaderWorkParameter`1.NeedStop">
            <summary>
                是否需要中止线程
            </summary>
        </member>
        <member name="P:X.CommLib.Threader.TaskThreaderWorkParameter`1.ErrorCount">
            <summary>
                发生错误的次数
            </summary>
            <value>
                The error count.
            </value>
        </member>
        <member name="P:X.CommLib.Threader.TaskThreaderWorkParameter`1.LastError">
            <summary>
                最后一次错误
            </summary>
            <value>
                The last error.
            </value>
        </member>
        <member name="P:X.CommLib.Threader.TaskThreaderWorkParameter`1.Parameter">
            <summary>
                线程参数
            </summary>
        </member>
        <member name="M:X.CommLib.Threader.TaskThreaderWorkParameter`1.AttachException(System.Exception)">
            <summary>
            附加一个错误信息上去
            </summary>
            <param name="error">
            The error.
            </param>
        </member>
        <member name="T:X.CommLib.Threader.TaskWorkHelper">
            <summary>
                任务工作辅助对象
                启动指定数量的 task 进行工作，工作结束后返回结果，如果有一个任务核心发生指定次数的错误，则中止其它任务，并抛出异常
            </summary>
        </member>
        <member name="E:X.CommLib.Threader.TaskWorkHelper.OnProgressChanged">
            <summary>
                进程变化
                UserState 为 double 格式的百分比
            </summary>
        </member>
        <member name="M:X.CommLib.Threader.TaskWorkHelper.TaskRunWrapper(System.Func{System.Threading.CancellationToken,System.Boolean},System.Threading.CancellationToken,System.Int32)">
            <summary>任务运行包装器，运行 func，如果func 返回 true，任务完成</summary>
            <param name="func">内置的调用函数.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="maxError">处理过程中的最大出错次数.</param>
            <exception cref="T:System.AggregateException">出现指定次数的错误</exception>
        </member>
        <member name="M:X.CommLib.Threader.TaskWorkHelper.CreateTaskWorks``2(System.Func{``0,System.Threading.CancellationToken,``1},System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Func{System.Boolean})">
            <summary>运行一批 task 并返回对应的 task，并不会等待 task 工作结束</summary>
            <typeparam name="TInput">运行 task 的输入值类型.</typeparam>
            <typeparam name="TResult">运行 task 的返回值类型.</typeparam>
            <param name="func">运行 task 时的核心函数.</param>
            <param name="sources">需要通过 task 运算的源数据.</param>
            <param name="taskNumber">使用 task 的数量.</param>
            <param name="maxError">当发生多少次错误时停止 task 的运行.</param>
            <param name="needStopFunc">是否需要停止的回调函数.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Threader.TaskWorkHelper.RunTaskWorks``2(System.Func{``0,System.Threading.CancellationToken,``1},System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Func{System.Boolean})">
            <summary>创建一批 task 并执行，然后等待task 工作结束并返回，如果其中有task 发生错误，则自动停止其它 task ，并抛出异常</summary>
            <typeparam name="TInput">输入数据类型.</typeparam>
            <typeparam name="TResult">输出数据类型.</typeparam>
            <param name="func">处理函数.</param>
            <param name="sources">输入函数</param>
            <param name="taskNumber">工作线程数.</param>
            <param name="maxError">允许的最大出错次数，如果某一个线程出错指定义的次数，抛出异常</param>
            <param name="needStopFunc">进行是否停止工作的查询.如果线程全部被取消，不会抛出异常</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">tasknumber</exception>
        </member>
        <member name="M:X.CommLib.Threader.TaskWorkHelper.RunTaskWorks(System.Func{System.Threading.CancellationToken,System.Boolean},System.Int32,System.Int32,System.Func{System.Boolean})">
            <summary>支持一批指定的任务并等待结束</summary>
            <param name="func">The function.</param>
            <param name="taskNumber">The task number.</param>
            <param name="maxError">The maximum error.</param>
            <param name="needStopFunc">The need stop function.</param>
        </member>
        <member name="M:X.CommLib.Threader.TaskWorkHelper.RunTaskWorks(System.Collections.Generic.IEnumerable{System.Func{System.Threading.CancellationToken,System.Boolean}},System.Int32,System.Func{System.Boolean})">
            <summary>支持一批指定的任务并等待结束</summary>
            <param name="funcs">The funcs.</param>
            <param name="maxError">The maximum error.</param>
            <param name="needStopFunc">The need stop function.</param>
        </member>
        <member name="M:X.CommLib.Threader.TaskWorkHelper.WaitTaskFinished(System.Collections.Generic.List{System.Threading.Tasks.Task},System.Threading.CancellationTokenSource)">
            <summary>
                等待任务结束，如果任务在工作过程中出现错误，则抛出异常
                如果有一个任务出现错误中止，则停止所有其它任务 (通过调用tokenSource.Cancel())
                如果任务是通过调用 cancel 停止的，则不抛出异常
            </summary>
            <param name="taskList">The task list.</param>
            <param name="tokenSource">The token source.</param>
        </member>
        <member name="M:X.CommLib.Threader.TaskWorkHelper.ArrangeException(System.Collections.Generic.ICollection{System.Exception})">
            <summary>整理异常，将多个合并的异常进行拆分，然后再</summary>
            <param name="exceptionList">The exception list.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Threader.TaskWorkHelper.CreateTaskWorksCore``2(System.Func{``0,System.Threading.CancellationToken,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationTokenSource,System.Int32,System.Int32,System.Func{System.Boolean})">
            <summary>Creates the task works core.</summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The function.</param>
            <param name="sources">The sources.</param>
            <param name="tokenSource">The token source.</param>
            <param name="taskNumber">The tasknumber.</param>
            <param name="maxError">The maximum error.</param>
            <param name="needStopFunc">The need stop function.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">tasknumber</exception>
        </member>
        <member name="M:X.CommLib.Threader.TaskWorkHelper.ExecutTaskWorkFunc``2(System.Func{``0,System.Threading.CancellationToken,``1},``0,System.Int32,System.Threading.CancellationToken)">
            <summary>运行任务的核心代码</summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The function.</param>
            <param name="input">The input.</param>
            <param name="maxError">The maximum error.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.AggregateException">发生多次错误</exception>
        </member>
        <member name="M:X.CommLib.Threader.TaskWorkHelper.SendProgressChangedEvent(System.Int32,System.Int32)">
            <summary>发送进度变化事件</summary>
            <param name="current">当前.</param>
            <param name="amount">总计.</param>
        </member>
        <member name="M:X.CommLib.Threader.TaskWorkHelper.StartTaskMonitor(System.Func{System.Boolean},System.Collections.Generic.List{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.CancellationTokenSource)">
            <summary>启动后台监视进程</summary>
            <param name="needStopFunc">The need stop function.</param>
            <param name="taskList">The task list.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="tokenSource">The token source.</param>
        </member>
        <member name="M:X.CommLib.Threader.TaskWorkHelper.TaskWorkCore``2(System.Func{``0,System.Threading.CancellationToken,``1},System.Collections.Generic.Queue{``0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
                工作线程工作核心
            </summary>
            <typeparam name="TInput">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the target.</typeparam>
            <param name="func">回调的处理函数.</param>
            <param name="inputSource">输入源.</param>
            <param name="amount">源总计总数.</param>
            <param name="maxError">The maximum error.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Threader.TaskWorkHelper.WaitTaskFinished``1(System.Collections.Generic.List{System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}}},System.Threading.CancellationTokenSource)">
            <summary>等待任务完成</summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="taskList">The task list.</param>
            <param name="tokenSource">The token source.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Threader.TaskWorkProgressChangedEventArgs">
            <summary>
                工作进度事件参数
            </summary>
        </member>
        <member name="M:X.CommLib.Threader.TaskWorkProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Threader.TaskWorkProgressChangedEventArgs" /> class.
            </summary>
            <param name="progressPercentage">已完成的异步任务的百分比。</param>
            <param name="userState">唯一的用户状态。</param>
        </member>
        <member name="P:X.CommLib.Threader.TaskWorkProgressChangedEventArgs.Percentage">
            <summary>
                当前进度的百度分
            </summary>
            <value>
                The percentage.
            </value>
        </member>
        <member name="P:X.CommLib.Threader.TaskWorkProgressChangedEventArgs.Current">
            <summary>
                已经处理
            </summary>
            <value>
                The current.
            </value>
        </member>
        <member name="P:X.CommLib.Threader.TaskWorkProgressChangedEventArgs.Amount">
            <summary>
                需要处理总进度
            </summary>
            <value>
                The amount.
            </value>
        </member>
        <member name="T:X.CommLib.Threader.ThreadHelper">
            <summary>
                线程辅助函数
            </summary>
        </member>
        <member name="M:X.CommLib.Threader.ThreadHelper.IsAlive(System.Threading.Thread)">
            <summary>
            指定的线程是否还在运行
            </summary>
            <param name="thread">
            The thread.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:X.CommLib.Logs.IWorkLoggingInterface">
            <summary>
                实现了工作日志发送接口
            </summary>
        </member>
        <member name="E:X.CommLib.Logs.IWorkLoggingInterface.OnLogginEvent">
            <summary>
                日志事件
            </summary>
        </member>
        <member name="T:X.CommLib.Logs.Log">
            <summary>
              一个日志， 从日志文件中解析出来表示一行对象
            </summary>
        </member>
        <member name="T:X.CommLib.Logs.Log.LogType">
            <summary>
              日志类型
            </summary>
        </member>
        <member name="F:X.CommLib.Logs.Log.LogType.Info">
            <summary>
              一般日志
            </summary>
        </member>
        <member name="F:X.CommLib.Logs.Log.LogType.Error">
            <summary>
              错误日志
            </summary>
        </member>
        <member name="F:X.CommLib.Logs.Log.LogType.Debug">
            <summary>
              调试日志
            </summary>
        </member>
        <member name="F:X.CommLib.Logs.Log.LogType.Warn">
            <summary>
              警告日志
            </summary>
        </member>
        <member name="F:X.CommLib.Logs.Log.LogType.Fatal">
            <summary>
              致命错误
            </summary>
        </member>
        <member name="P:X.CommLib.Logs.Log.Date">
            <summary>
              日志日期
            </summary>
            <value> The date. </value>
        </member>
        <member name="P:X.CommLib.Logs.Log.Message">
            <summary>
              日志内容
            </summary>
            <value> The message. </value>
        </member>
        <member name="P:X.CommLib.Logs.Log.Thread">
            <summary>
              线程id值
            </summary>
            <value> The thread. </value>
        </member>
        <member name="P:X.CommLib.Logs.Log.Type">
            <summary>
              日志类型
            </summary>
        </member>
        <member name="P:X.CommLib.Logs.Log.Writer">
            <summary>
              日志写入器
            </summary>
            <value> The writer. </value>
        </member>
        <member name="M:X.CommLib.Logs.Log.ParseLogType(System.String)">
            <summary>
              解析日志类型
            </summary>
            <param name="value"> The value. </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Logs.Log.AttachMessage(System.String)">
            <summary>
              附加消息内容
            </summary>
            <param name="msg"> The MSG. </param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:X.CommLib.Logs.Log.ToString">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns> A <see cref="T:System.String" /> that represents this instance. </returns>
        </member>
        <member name="T:X.CommLib.Logs.LogHelper">
            <summary>
                日志管理器
            </summary>
        </member>
        <member name="T:X.CommLib.Logs.LogHelper.ProcessUnknowErrorFuncHandler">
            <summary>
                处理未知异常的函数定义
            </summary>
            <param name="title"> 异常的标题 </param>
            <param name="sender"> 异常的发送者 </param>
            <param name="msg"> 异常的描述 </param>
            <param name="error"> 可能包括的异常信息 </param>
        </member>
        <member name="T:X.CommLib.Logs.LogHelper.LogWriteFunc">
            <summary>
                写入日志回调函数
            </summary>
            <param name="message"> The message. </param>
            <param name="error"> The error. </param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.ConfigureDefaultLog4Net(System.String,System.String,System.Func{System.String,System.String})">
            <summary>
            使用默认的log4net配置进行工作
            配置中的日志路径由参数决定
            </summary>
            <param name="logDirctory">日志的目录.</param>
            <param name="logFile">日志的文件名（不带后缀）.</param>
            <param name="func">自定义更新日志功能.</param>
            <returns>
            返回配置
            </returns>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.ConfigureLog4Net(System.String)">
            <summary>
                使 log4net 基于新的配置文件进行工作
            </summary>
            <param name="config">
                The configuration.
            </param>
            <returns>
                The <see cref="T:System.Collections.ICollection" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.ConfigureLog4Net(System.Type,System.String)">
            <summary>
                使 log4net 基于程序集内嵌资源中的配置进行工作
            </summary>
            <param name="type">
                内嵌的配置文件的同路径类型.
            </param>
            <param name="fileName">
                内嵌入的配置文件的名称.
            </param>
            <returns>
                ICollection.
            </returns>
            <exception cref="T:System.IO.FileNotFoundException">
                找不到配置文件
            </exception>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.DeleteLogFiles(System.String,System.Int32)">
            <summary>
                删除指定目录下的日志文件
                日志文件按日期排序，保存最新的 n个日志文件
            </summary>
            <param name="directory">
                The directory.
            </param>
            <param name="keepFileNumber">
                保留多少条日志文件.
            </param>
            <returns>
                删除了多少日志文件
            </returns>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.GetLogFormatString(System.Object,System.String,System.Exception)">
            <summary>
                返回一个格式化过的错误内容描述
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.GetRollingFileAppenderFilePath">
            <summary>
                返回当前Log4Net中配置为log4net.Appender.RollingFileAppender的日志文件的路径
            </summary>
            <returns> 如果没有找到返回null </returns>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.OutputLog(System.Object,System.String,System.Exception)">
            <summary>
                在控制台输出日志信息
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.OutputLog(System.Object,X.CommLib.Threader.LoggingEventArgs)">
            <summary>
                在控制台输出日志信息
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:X.CommLib.Threader.LoggingEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.ParseLogDateTime(System.String)">
            <summary>
                解析出日志的日志，如果失败返回 null
            </summary>
            <param name="logPath">
                The log path.
            </param>
            <returns>
                System.Nullable&lt;DateTime&gt;.
            </returns>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.ProcessUnknowError(log4net.ILog)">
            <summary>
                绑定记录当前域中的未处理异常 当发生错误时，将Error记录到指定ILog中，如果 ILog为空，则自动创建一个进行保存
            </summary>
            <param name="log">
                The log.
            </param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.ProcessUnknowError(X.CommLib.Logs.LogHelper.ProcessUnknowErrorFuncHandler)">
            <summary>
                绑定记录当前域中的未处理异常
            </summary>
            <param name="func">
                The func.
            </param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.RecodeAppInfo(log4net.ILog)">
            <summary>
                记录当前程序的信息
            </summary>
            <param name="log">
                The log.
            </param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.RecodeSystemInfo(log4net.ILog)">
            <summary>
                将系统信息写入到日志系统中
            </summary>
            <param name="log">
                The log.
            </param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.RecodeUnknowError(log4net.ILog)">
            <summary>
                ProcessUnknowError(ILog log = null) 的同名函数
            </summary>
            <param name="log">
                The log.
            </param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.RecodeUnknowError(System.String,System.Object,System.String,System.Exception,log4net.ILog)">
            <summary>
                记录未处理的异常
            </summary>
            <param name="title">
                异常的标题
            </param>
            <param name="sender">
                异常的发送者
            </param>
            <param name="msg">
                异常的描述
            </param>
            <param name="error">
                异常的内容
            </param>
            <param name="log">
                日志写入器，如果为空，则自动创建一个
            </param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.SetLogPath(System.String,System.String)">
            <summary>
                设置Log4Net日志的路径 使用指定的字符替代日志路径中的指定部分
                并且启动日志记录功能
            </summary>
            <param name="logFilePart">
                The log file part.
            </param>
            <param name="pathPropertiyName">
                Name of the path propertiy.
            </param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.StartLogSystem(System.String,System.String,System.Type,System.Boolean)">
            <summary>
                启动日志系统
                启用后记录未处理异常，系统及应用的信息
            </summary>
            <param name="logPath">日志的目录.</param>
            <param name="logFile">日志的文件名.</param>
            <param name="logWriterType">启动记录系统及应用信息的记录器的类型(生成 ilog 用的).</param>
            <param name="enableConsoleLog">是否启动控制台控制.</param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.StartLogSystemCore(System.String,System.String,System.Type,System.Func{System.String,System.String})">
            <summary>
            启动日志系统
            </summary>
            <param name="logPath">日志保存的路径.</param>
            <param name="logFile">日志的文件名.</param>
            <param name="logWriterType">默认的日志写入器类型.</param>
            <param name="func">修改日志配置的回调函数.</param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.StartDebugViewLogSystem(System.Type)">
            <summary>
                是否启动仅debug 输出日志
            </summary>
            <param name="logWriteLog">The log write log.</param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.OnlyKeepDebugStringConfigs(System.String)">
            <summary>
            仅保存debugstring 输出设置
            </summary>
            <param name="logConfig">The log configuration.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.WriteLog(System.Object,System.String,System.Exception)">
            <summary>
                写入日志
            </summary>
            <param name="sender">
                日志发送者，使用该发送者身份写入日志，如果为 null，则为LogHelper.
            </param>
            <param name="message">
                The message.
            </param>
            <param name="exception">
                The exception.
            </param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.WriteLog(log4net.ILog,System.String,System.Exception)">
            <summary>
                写入日志
            </summary>
            <param name="logWriter">
                The log writer.
            </param>
            <param name="message">
                The message.
            </param>
            <param name="exception">
                The exception.
            </param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.WriteLog(System.Object,X.CommLib.Threader.LoggingEventArgs[])">
            <summary>
                写入一段日志
            </summary>
            <param name="logWriter">
                The log writer.
            </param>
            <param name="logs">
                The logs.
            </param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.WriteLog(log4net.ILog,X.CommLib.Threader.LoggingEventArgs[])">
            <summary>
                写入日志
            </summary>
            <param name="logWriter">
                日志写入器.
            </param>
            <param name="logs">
                需要写入的日志内容.
            </param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.TestMultiLanguage">
            <summary>
                多语言测试
            </summary>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.GetDefaultLogWriter">
            <summary>
                返回一个默认的日志写入器
            </summary>
            <returns>
                The <see cref="T:log4net.ILog" />.
            </returns>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.GetWriterName(System.Object)">
            <summary>
                返回 writer type .号的最后一段字符表示.如果不存在，返回null
            </summary>
            <param name="writer">The sender.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.ProcessUnknowError(System.String,System.Object,System.Object,X.CommLib.Logs.LogHelper.ProcessUnknowErrorFuncHandler)">
            <summary>
                记录未处理的异常
            </summary>
            <param name="title">
                异常的标题
            </param>
            <param name="sender">
                异常的发送者
            </param>
            <param name="error">
                异常的内容
            </param>
            <param name="func">
                当异常信息格式化完成后的处理函数定义
            </param>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.RemoveConsoleConfig(System.String)">
            <summary>
                去掉控制台相关的配置
            </summary>
            <param name="logConfig">The log configuration.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:X.CommLib.Logs.LogHelper.RemoveAppenders(System.String,System.String[])">
            <summary>
            移除一批节点
            </summary>
            <param name="logConfig">The log configuration.</param>
            <param name="appenders">The appenders.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.Logs.LogParser">
            <summary>
              日志解析器，这是我常用的log4net日志解析器
            </summary>
        </member>
        <member name="F:X.CommLib.Logs.LogParser.LogRegexObj">
            <summary>
              日志解析器
            </summary>
        </member>
        <member name="F:X.CommLib.Logs.LogParser._lines">
            <summary>
              日志内容
            </summary>
        </member>
        <member name="F:X.CommLib.Logs.LogParser._linePostion">
            <summary>
              当前的读取器
            </summary>
        </member>
        <member name="M:X.CommLib.Logs.LogParser.#ctor(System.String,System.Text.Encoding)">
            <summary>
              Initializes a new instance of the <see cref="T:X.CommLib.Logs.LogParser" /> class.
              使用指定的日志文件进行初始化
            </summary>
            <param name="logPath"> The log path. </param>
            <param name="encoding"> The encoding. </param>
        </member>
        <member name="M:X.CommLib.Logs.LogParser.GetEnumerator">
            <summary>
              Gets the enumerator.
            </summary>
            <returns> </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:X.CommLib.Logs.LogParser.Dispose">
            <summary>
              可以被客户直接调用
            </summary>
        </member>
        <member name="M:X.CommLib.Logs.LogParser.MoveNext">
            <summary>
              返回下一行数据
            </summary>
            <returns> </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:X.CommLib.Logs.LogParser.Reset">
            <summary>
              Resets this instance.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:X.CommLib.Logs.LogParser.Current">
            <summary>
              返回当前行数据
            </summary>
            <value> The current. </value>
        </member>
        <member name="P:X.CommLib.Logs.LogParser.System#Collections#IEnumerator#Current">
            <summary>
              Gets the current.
            </summary>
            <value> The current. </value>
        </member>
        <member name="M:X.CommLib.Logs.LogParser.Test">
            <summary>
              内部测试
            </summary>
        </member>
        <member name="M:X.CommLib.Logs.LogParser.ReadAllLogs(System.String,System.Text.Encoding)">
            <summary>
              读取一个日志文件中的所有日志内容
            </summary>
            <param name="logPath"> 日志文件的路径 </param>
            <param name="encoding"> 日志文件的编码 </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Logs.LogParser.ReadNextLog">
            <summary>
              解析下一行日志，如果没有日志只可以被解析，则返回null
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Logs.LogParser.ReadLine">
            <summary>
              读取一行数据，如果没有数据可读返回null;
            </summary>
            <returns> </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:X.CommLib.Logs.LogParser.CreateLog(System.String)">
            <summary>
              创建日志对象
            </summary>
            <param name="line"> The line. </param>
            <returns> </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:X.CommLib.Logs.LogParser.ReadMoreMessage">
            <summary>
              从文件中读取消息内容，如果无返回null
            </summary>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Logs.LogParser.IsLogLine(System.String)">
            <summary>
              检测该行是否是日志
            </summary>
            <param name="line"> The line. </param>
            <returns> <c>true</c> if the specified line is log; otherwise, <c>false</c> . </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:X.CommLib.Logs.LogParser.GetFileEncoding(System.String,System.Text.Encoding)">
            <summary>
              返回文件对应的编码
            </summary>
            <param name="logPath"> 如果默认编码为null，则使用该文件所使用的编码 </param>
            <param name="encoding"> 文件默认编码，如果不为null直接返回该编码， </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Logs.LogParser.Finalize">
            <summary>
              析构函数自动生成 Finalize 方法和对基类的 Finalize 方法的调用.默认情况下,一个类是没有析构函数的,也就是说,对象被垃圾回收时不会被调用Finalize方法
            </summary>
        </member>
        <member name="M:X.CommLib.Logs.LogParser.Close">
            <summary>
              Dispose 的另一种表达
            </summary>
        </member>
        <member name="M:X.CommLib.Logs.LogParser.Dispose(System.Boolean)">
            <summary>
              无法被客户直接调用 
              如果 disposing 是 true, 那么这个方法是被客户直接调用的,那么托管的,和非托管的资源都可以释放 
              如果 disposing 是 false, 那么函数是从垃圾回收器在调用Finalize时调用的,此时不应当引用其他托管对象所以,只能释放非托管资源
            </summary>
            <param name="disposing"> </param>
        </member>
        <member name="T:X.CommLib.Logs.NormalLogginger">
            <summary>
              一个通用的日志信息发送辅助类
            </summary>
        </member>
        <member name="M:X.CommLib.Logs.NormalLogginger.PostLoggingMessage(X.CommLib.Threader.LoggingEventHandler,System.Object,X.CommLib.Threader.LoggingType,System.String,System.Exception)">
            <summary>
              发送日志辅助方法
            </summary>
            <param name="eventHandler"> </param>
            <param name="sender"> </param>
            <param name="loggingType"> </param>
            <param name="msg"> </param>
            <param name="error"> </param>
        </member>
        <member name="M:X.CommLib.Logs.NormalLogginger.PostLoggingMessage(X.CommLib.Threader.LoggingEventHandler,System.Object,System.String,System.Exception)">
            <summary>
              发送日志辅助方法
            </summary>
            <param name="eventHandler"> </param>
            <param name="sender"> </param>
            <param name="msg"> </param>
            <param name="error"> </param>
        </member>
        <member name="M:X.CommLib.Logs.NormalLogginger.PostLoggingMessage(X.CommLib.Threader.LoggingEventHandler,System.Object,X.CommLib.Threader.LoggingEventArgs)">
            <summary>
              发送日志辅助方法
            </summary>
            <param name="eventHandler"> </param>
            <param name="sender"> </param>
            <param name="e"> </param>
        </member>
        <member name="T:X.CommLib.Logs.NormalLogginger.PostLoggingMessageFunc">
            <summary>
            日志记录器函数对象
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:X.CommLib.Threader.LoggingEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:X.CommLib.Logs.NormalLogginger.LoggingMessaegCallBack">
            <summary>
            日志记录回调函数
            </summary>
            <param name="message">The message.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:X.CommLib.Logs.NormalLogginger.ForwardLoggingMessaegCallBackEvent(System.String,System.Exception)">
            <summary>
            转发日志记录回调函数中的日志责任制
            </summary>
            <param name="message">The message.</param>
            <param name="error">The error.</param>
        </member>
        <member name="E:X.CommLib.Logs.NormalLogginger.OnLogginEvent">
            <summary>
              日志发送组件
            </summary>
        </member>
        <member name="M:X.CommLib.Logs.NormalLogginger.PostLoggingMessage(System.Object,X.CommLib.Threader.LoggingEventArgs)">
            <summary>
              使用其它发送者身份发送日志消息
            </summary>
            <param name="sender"> 发送者 </param>
            <param name="e"> </param>
        </member>
        <member name="M:X.CommLib.Logs.NormalLogginger.PostLoggingMessage(X.CommLib.Threader.LoggingEventArgs)">
            <summary>
              发送日志消息
            </summary>
            <param name="e"> </param>
        </member>
        <member name="M:X.CommLib.Logs.NormalLogginger.PostLoggingMessage(System.String,System.Exception)">
            <summary>
              发送日志消息
            </summary>
            <param name="message"> </param>
            <param name="error"> </param>
        </member>
        <member name="M:X.CommLib.Logs.NormalLogginger.PostLoggingMessage(X.CommLib.Threader.LoggingType,System.String,System.Exception)">
            <summary>
              发送日志事件
            </summary>
            <param name="loggingType"> </param>
            <param name="message"> </param>
            <param name="error"> </param>
        </member>
        <member name="T:X.CommLib.AppConfigs.IAppConfig">
            <summary>
                配置参数读取器
            </summary>
        </member>
        <member name="P:X.CommLib.AppConfigs.IAppConfig.AllKeys">
            <summary>
                返回配置中所有的key值
            </summary>
            <value>
                All keys.
            </value>
        </member>
        <member name="P:X.CommLib.AppConfigs.IAppConfig.AppSettings">
            <summary>
                当前的配置集合
            </summary>
        </member>
        <member name="M:X.CommLib.AppConfigs.IAppConfig.DeleteValue(System.String)">
            <summary>移除指定设置</summary>
            <param name="keyName">Name of the key.</param>
        </member>
        <member name="M:X.CommLib.AppConfigs.IAppConfig.GetAppBool(System.String,System.Boolean)">
            <summary>从App.Conifg中取出bool值</summary>
            <param name="keyName">Name of the key.</param>
            <param name="defValue">if set to <c>true</c> [definition value].</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AppConfigs.IAppConfig.GetAppDouble(System.String,System.Double)">
            <summary>
            从app设置中取出指定的数值
            </summary>
            <param name="keyName">Name of the key.</param>
            <param name="defValue">The definition value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AppConfigs.IAppConfig.GetAppInt(System.String,System.Int32)">
            <summary>从app设置中取出指定的数值</summary>
            <param name="keyName">Name of the key.</param>
            <param name="defValue">The definition value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AppConfigs.IAppConfig.GetAppString(System.String,System.String)">
            <summary>从appsetting中取出值</summary>
            <param name="keyName">Name of the key.</param>
            <param name="defValue">The definition value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AppConfigs.IAppConfig.GetAppTimSpan(System.String,System.TimeSpan)">
            <summary>从app设置中取出指定的时间值，定义的数值以秒为单位</summary>
            <param name="keyName">Name of the key.</param>
            <param name="defValue">The definition value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AppConfigs.IAppConfig.GetAppUint(System.String,System.UInt32)">
            <summary>从app设置中取出指定的数值</summary>
            <param name="keyName">Name of the key.</param>
            <param name="defValue">The definition value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AppConfigs.IAppConfig.GetAppValue``1(System.String,System.Converter{System.String,``0},``0)">
            <summary>从app设置中取出指定的值</summary>
            <typeparam name="T">返回数据的类型</typeparam>
            <param name="keyName">Name of the key.</param>
            <param name="converter">The converter.</param>
            <param name="defValue">The definition value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.AppConfigs.IAppConfig.RemoveKey(System.String)">
            <summary>移除某个定义</summary>
            <param name="keyName">Name of the key. </param>
        </member>
        <member name="M:X.CommLib.AppConfigs.IAppConfig.Save">
            <summary>
                保存设置
            </summary>
        </member>
        <member name="M:X.CommLib.AppConfigs.IAppConfig.SetAppValue(System.String,System.Object)">
            <summary>设置设置值</summary>
            <param name="keyName">Name of the key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:X.CommLib.AppConfigs.IAppConfig.SetAppValue(System.String,System.String)">
            <summary>设置设置值</summary>
            <param name="keyName">Name of the key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:X.CommLib.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AccountStorage_NoSetConfigFilePath">
            <summary>
              查找类似 没有定义配置文件的路径 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_AddFileDoesntExist">
            <summary>
              查找类似 待添加文件不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_AddFiles">
            <summary>
              查找类似 添加文件 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_AdvInstBuilder_DontSetValidBuilderName">
            <summary>
              查找类似 没有设置有效的构建名称 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_BuildFailed">
            <summary>
              查找类似 编译失败 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_CannotFindNode">
            <summary>
              查找类似 无法找到对应节点 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_CannotFindShortcut">
            <summary>
              查找类似 无法找到对应快捷方式 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_CantFindAdvInstallerAppPath">
            <summary>
              查找类似 无法找到adv installer 安装路径 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_CantFindAdvInstallerBuildAppPath">
            <summary>
              查找类似 构建程序不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_CantFindUrlInNode">
            <summary>
              查找类似 指定节点没有设置 url 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_ChangeApplicationFolder">
            <summary>
              查找类似 修改程序安装目录 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_ChangeApplicationShortcutFolder">
            <summary>
              查找类似 修改程序快捷方式目录 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_ChangeOutDirctory">
            <summary>
              查找类似 修改输出目录 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_ChangeOutFile">
            <summary>
              查找类似 修改输出文件名 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_ComponentDoesNotExists">
            <summary>
              查找类似 组件不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_ConfigFileAlreadyExists">
            <summary>
              查找类似 配置文件已经存在，无法再次创建 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_ConfigFileCreateionFailed">
            <summary>
              查找类似 配置文件未创建 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_CreateConfigFile">
            <summary>
              查找类似 创建项目 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_DidntFindBinaryRsourceNode">
            <summary>
              查找类似 没有找到指定的二进制资源节点 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_DonotSetVaildOutputFile">
            <summary>
              查找类似 没有设置有效的输出文件名称 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_DontSetValidFolderName">
            <summary>
              查找类似 没有设置有效的文件夹名称 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_ErrorOccurredOperation">
            <summary>
              查找类似 {0}操作发生错误 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_InvalidComponentName">
            <summary>
              查找类似 无效的组件名称 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_NodeAlreadyExists">
            <summary>
              查找类似 节点&apos;{0}&apos;已经存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_NodeCantBeNull">
            <summary>
              查找类似 需要保存的节点不能为null 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_NodeCantModify">
            <summary>
              查找类似 当前节点不支持修改属性 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_NodeCantNull">
            <summary>
              查找类似 节点不能为null 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_NodeDoesNotBelongToAnyDocument">
            <summary>
              查找类似 节点不属于任何文档 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_NodeNotSetInTheDocument">
            <summary>
              查找类似 有节点未设置入文档 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_OperationParameters">
            <summary>
              查找类似 运行参数：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_SaveProject">
            <summary>
              查找类似 保存项目 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_SetVersion">
            <summary>
              查找类似 设置版本 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_UpdateProductProperty">
            <summary>
              查找类似 设置属性 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AdvInstBuilder_WithoutCompilingResults">
            <summary>
              查找类似 编译失败, 没有获得编译结果 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AppConfigReader_GetCallPropertyName_AllowGetOrSetPropertyOnly">
            <summary>
              查找类似 不支持的类型 ‘{0}’。只能接受 get 及 set。 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AppConfigReader_GetCallPropertyName_AllowGetPropertyOnly">
            <summary>
              查找类似 目前只返回 get 属性的设置：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AppConfigReader_GetCallPropertyName_AllowSetPropertyOnly">
            <summary>
              查找类似 目前只接受 set 属性的设置：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AppConfigReader_LoadConfiguration_ExtensionMostBeConfig">
            <summary>
              查找类似 配置文件的后缀必须是.config 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AppConfigReader_LoadConfiguration_MustWantSameFileWithName">
            <summary>
              查找类似 必须要有与配置文件同名的文件 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AppConfigReader_LoadConfiguration_PleaseEnterValidFileName">
            <summary>
              查找类似 请输入有效的配置文件名 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AppPathBase_InvalidComparisonPath">
            <summary>
              查找类似 无效的比较路径 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.AppPathBase_UnsupportedType">
            <summary>
              查找类似 不支持的类型:{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.BatchRunTemplate">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.Console">
            <summary>
              查找类似于 (Icon) 的 System.Drawing.Icon 类型的本地化资源。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.Console16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.Console48">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleCommand_GetEntryString_Title">
            <summary>
              查找类似 {0}，默认&apos;{1}&apos;： 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleCommand_Helper_NoRelevantHelpInformation">
            <summary>
              查找类似 无相关帮助信息 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleCommand_ProcessMethodInvoker_NeedCallbackFunction">
            <summary>
              查找类似 没有指定需要处理的回调函数 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleCommand_ShowErrorMessage_CopyExceptionInfo">
            <summary>
              查找类似 按钮C复制异常并返回，其它键直接返回 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleCommand_ShowErrorMessage_DisplayDetailedInformation">
            <summary>
              查找类似 是否显示详细信息 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleCommand_TypeNotSupported">
            <summary>
              查找类似 不支持的类型：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleCommand_WaiteAnyKey_PressAnyKeyToExit">
            <summary>
              查找类似 按任意键退出 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleCommand_WaitForTime">
            <summary>
              查找类似 ，等待{0}秒后退出 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleCommand_WaitSelectOption_Exit">
            <summary>
              查找类似 退出 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleCommand_WaitSelectOption_SelectOptionTitle">
            <summary>
              查找类似 请选择一个选项： 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleCommand_WaitTimeLeave_StopWaiting">
            <summary>
              查找类似 停止等待 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleCommand_WasErrorWhenRunning">
            <summary>
              查找类似 运行 {0} 时发生错误：{1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleMenuCommand_BuildCommandMenu_MenuItemOvertop">
            <summary>
              查找类似 菜单项最多只支持{0}项，当前已经设置为{1}项 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleMenuCommand_Helper_InputSelectOption">
            <summary>
              查找类似 输入菜单前的数字或字母进入该菜单 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleMenuCommand_ShowCommandsHelper_HelpOutputFinished">
            <summary>
              查找类似 显示结束 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleMenuCommand_WaitingSelectMenu_ExitMenu">
            <summary>
              查找类似 {0}. 退出 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleMenuCommand_WaitingSelectMenu_HelpMenu">
            <summary>
              查找类似 {0}. 帮助 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleMenuCommand_WaitingSelectMenu_InputCommand">
            <summary>
              查找类似 请输入需要运行的命令: 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleNotifyIcon_GetNotifyiconMenu_Exit">
            <summary>
              查找类似 退出 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleNotifyIcon_GetNotifyiconMenu_ShowOrHideConsole">
            <summary>
              查找类似 显示/隐藏控制台程序 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleNotifyIcon_NotifyIconOnMouseMove_ConsoleAppTitle">
            <summary>
              查找类似 控制台程序 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ConsoleNotifyIcon_NotifyIconOnMouseMove_DoubleClickShowOrHideConsole">
            <summary>
              查找类似 {0}{1}双击显示或是隐藏程序 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.DbHelper_CleanTable_UsersTableNotExist">
            <summary>
              查找类似 用户表&apos;{0}&apos;不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.DbHelper_CreateConnectionFromConfig_UnableCreateConnection">
            <summary>
              查找类似 无法从{0}创建数据连接 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.DbHelper_CreateDbHelperFromProviderName_DatabaseTypeNotSupported">
            <summary>
              查找类似 不支持在数据库类型：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.DbHelper_GenerateCreateAutoIncrementColumnSql_NotSetToAddColumn">
            <summary>
              查找类似 类型{0}不能用作自增列 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.DbHelper_GetConnectionString_ConnectionConfigureDoesNotExist">
            <summary>
              查找类似 数据连接配置不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.DbHelper_GetSqlDataTypeString_NotSupportedDataType">
            <summary>
              查找类似 不支持的数据格式:{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.DbHelper_InitInsertCommand_NeedSpecifiedValue">
            <summary>
              查找类似 没有指定需要插入的数值 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.EnumExtensions_EnumExtensions_SupportedEnumerationTypeOnly">
            <summary>
              查找类似 当前仅支持枚举类型操作 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.EnumExtensions_EnumExtensions_SupportedFlagsPropertyOnly">
            <summary>
              查找类似 仅支持使用Flags属性枚举值 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ExcelDbTool_CreateConnection_DoesNotDefineDataFile">
            <summary>
              查找类似 没有定义数据文件路径 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ExcelDbTool_GetConnectionString_DoesNotFindExcelVersion">
            <summary>
              查找类似 无法确定与数据库操作引擎{0}相对应的excel版本 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ExcelDbTool_GetConnectionString_UnableFindDatabaseEngine">
            <summary>
              查找类似 未能找到与程序对应的数据库操作引擎 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.exit16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.FontHelper_CopyFontToFontsDirectory_UnableGetFontName">
            <summary>
              查找类似 无法获取字体名称 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.FontHelper_GetFontDir_CannotLocateWindowsDirectory">
            <summary>
              查找类似 无法定位 windows 目录 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.FontHelper_GetFontDir_UnableToLocateFontDirectory">
            <summary>
              查找类似 无法定位字体目录 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.FontHelper_InstallFonts_FailedInstallFonts">
            <summary>
              查找类似 安装字体失败：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.FontHelper_InstallZipFont_FontDirectoryDoesNotExist">
            <summary>
              查找类似 字体目录不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.GetSystemInfo_GetMachineCode_UnableGetMachineCode">
            <summary>
              查找类似 无法获取机器码 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.GetSystemInfo_GetParentProcessId_ProcessIdCantNull">
            <summary>
              查找类似 当前进程Id号不能为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.JsonDatas_Initialize_InvalidConfigurationFilePath">
            <summary>
              查找类似 无效的配置文件路径 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.JsonDatas_Save_NoSetSaveFilePath">
            <summary>
              查找类似 没有指定需要保存的文件路径 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LoggingEventArgs_ToString_LogDate">
            <summary>
              查找类似 时间：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LoggingEventArgs_ToString_LogDetail">
            <summary>
              查找类似 详细错误信息： 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LoggingEventArgs_ToString_LogSender">
            <summary>
              查找类似 发送者：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LoggingEventArgs_ToString_LogType">
            <summary>
              查找类似 类型：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LogHelper_ConfigureLog4Net__NotFoundResourceFile">
            <summary>
              查找类似 {0}附近没有找到资源文件 {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LogHelper_ProcessUnknowError_InfoContent">
            <summary>
              查找类似 错误内容：{0}{1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LogHelper_ProcessUnknowError_InfoSender">
            <summary>
              查找类似 错误发送者：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LogHelper_ProcessUnknowError_InfoSenderType">
            <summary>
              查找类似 错误发送者类型：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LogHelper_ProcessUnknowError_InfoType">
            <summary>
              查找类似 错误类型：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LogHelper_ProcessUnknowError_UnhandledExceptionOccursInAppDomain">
            <summary>
              查找类似 域中发生未处理的异常 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LogHelper_ProcessUnknowError_UnhandledExceptionOccursInThread">
            <summary>
              查找类似 线程中发生未处理的异常 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LogHelper_RecodeAppInfo_AppTitle">
            <summary>
              查找类似 标题： 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LogHelper_RecodeAppInfo_AppVersion">
            <summary>
              查找类似 版本： 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LogHelper_RecodeSystemInfo_BaseDirecotry">
            <summary>
              查找类似 程序基路径： 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LogHelper_RecodeSystemInfo_CurrentDirectory">
            <summary>
              查找类似 当前路径： 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LogHelper_RecodeSystemInfo_DotnetVersion">
            <summary>
              查找类似 平台版本： 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LogHelper_RecodeSystemInfo_InternetExplorerVersion">
            <summary>
              查找类似 浏览器版本： 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LogHelper_RecodeSystemInfo_IsAdministrator">
            <summary>
              查找类似 管理员身份： 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LogHelper_RecodeSystemInfo_OperatingSystemVersion">
            <summary>
              查找类似 操作系统： 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LogHelper_RecodeSystemInfo_X64OperatingSystem">
            <summary>
              查找类似 64位操作系统： 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.LogHelper_TestMultiLanguage_MultiLanguageString">
            <summary>
              查找类似 这是多语言测试字符串 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.MysqlDbTool_CreateDbFile_DoesNotSupportThisOperation">
            <summary>
              查找类似 不支持该操作 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.MysqlDbTool_GenerateCreateColumnsSql_SetThePrimaryKey">
            <summary>
              查找类似 请将自增列{0}设置为主键 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.MysqlDbTool_GetSqlDataTypeString_UnsupportedDataType">
            <summary>
              查找类似 不支持的数据类型：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ObjectDetailOutput_CopyValueTo_ObjectCantBeNull">
            <summary>
              查找类似 不能使用空对象接收属性值 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ObjectDetailOutput_CopyValueTo_SourceAndTargetTypeDoesNotMatch">
            <summary>
              查找类似 源对象类型与复制类型不匹配 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ObjectDetailOutput_CopyValueTo_TargetAndSourceTypeDoesNotMatch">
            <summary>
              查找类似 目标对象类型与复制类型不匹配 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.OleDbTool_CreateConnection_DatafileDoesNotExist">
            <summary>
              查找类似 数据文件不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.OleDbTool_CreateConnection_DoesNotDefineDataFilePath">
            <summary>
              查找类似 没有定义数据文件路径 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.OleDbTool_CreateDbFile_DatabaseFileAlreadyExists">
            <summary>
              查找类似 数据库文件已经存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.OleDbTool_CreateDbFile_FailedToCreateAccessdatabase">
            <summary>
              查找类似 创建access数据库文件失败 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.OleDbTool_GetConnectionString_UnableToGetDatabaseEngine">
            <summary>
              查找类似 无法获取当前数据库引擎 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.OleDbTool_GetSqlDataTypeString_UnsupportedDataType">
            <summary>
              查找类似 不支持的数据类型：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ProcessCtrl_ProcessCtrl_PressEntryKeyStop">
            <summary>
              查找类似 {0}，按回车键中止： 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ProcessCtrl_SetStep_ProgressValueCannotBeMegative">
            <summary>
              查找类似 进度值不能设置为负数({0})。 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ProcessCtrl_SetStep_ProgressValuesIsNotGreaterThan">
            <summary>
              查找类似 进度值不能大于 {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ProcessCtrl_SetStep_UsersToSuspend">
            <summary>
              查找类似 用户中止 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.SqliteDbTool_CreateDbFile_DatabaseAlreadyExists">
            <summary>
              查找类似 数据库文件已经存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.TaskWorkHelper_RunTaskWorks_NoSpecifiedWorkFunction">
            <summary>
              查找类似 没有指定需要工作的函数 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.TaskWorkHelper_RunTaskWorks_WrongTaskNumber">
            <summary>
              查找类似 指定了错误的工作线程数：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.ValuesCore_SetProperty_PropertyNotExist">
            <summary>
              查找类似 属性{0}不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:X.CommLib.Properties.Resources.XMLValuesCore_Save_ProfilePathNotDefined">
            <summary>
              查找类似 配置文件路径没有定义 的本地化字符串。
            </summary>
        </member>
        <member name="T:X.CommLib.Servers.ServiceInstaller">
            <summary>
            服务注册操作
            </summary>
        </member>
        <member name="P:X.CommLib.Servers.ServiceInstaller.InstallUtilPath">
            <summary>
            InstallUitl的路径
            </summary>
        </member>
        <member name="P:X.CommLib.Servers.ServiceInstaller.FrameworkPath">
            <summary>
            Framework的路径
            </summary>
        </member>
        <member name="M:X.CommLib.Servers.ServiceInstaller.InstallService(System.String)">
            <summary>
            安装一个服务
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:X.CommLib.Servers.ServiceInstaller.Regsvr32Dll(System.String)">
            <summary>
            注册一个com
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:X.CommLib.Servers.ServiceInstaller.UnInstallService(System.String)">
            <summary>
            删除一个服务
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:X.CommLib.VisualStudioTools.BuildFaildException">
            <summary>
                编译失败
            </summary>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.BuildFaildException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.VisualStudioTools.BuildFaildException" /> class.
            </summary>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.BuildFaildException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.VisualStudioTools.BuildFaildException" /> class.
            </summary>
            <param name="message">描述错误的消息。</param>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.BuildFaildException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.VisualStudioTools.BuildFaildException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.BuildFaildException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.VisualStudioTools.BuildFaildException" /> class.
            </summary>
            <param name="info">
                <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它存有有关所引发异常的序列化的对象数据。
            </param>
            <param name="context">
                <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含有关源或目标的上下文信息。
            </param>
        </member>
        <member name="P:X.CommLib.VisualStudioTools.BuildFaildException.BuildResult">
            <summary>
                构造的
            </summary>
            <value>
                The build result.
            </value>
        </member>
        <member name="T:X.CommLib.VisualStudioTools.BuildParams">
            <summary>
                构造参数
            </summary>
        </member>
        <member name="F:X.CommLib.VisualStudioTools.BuildParams._properties">
            <summary>
                构造属性
            </summary>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.BuildParams.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.VisualStudioTools.BuildParams" /> class.
            </summary>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.BuildParams.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.VisualStudioTools.BuildParams" /> class.
            </summary>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.BuildParams.ConvertParamDictionary(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            将字典的参数转为字符串数组
            </summary>
            <param name="param">The param.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.BuildParams.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.BuildParams.GetLogger">
            <summary>
                返回日志参数的字符串表示
            </summary>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.VisualStudioTools.BuildParams.LogLevel">
            <summary>
                日志记录水平
            </summary>
        </member>
        <member name="F:X.CommLib.VisualStudioTools.BuildParams.LogLevel.Quiet">
            <summary>
                安静
            </summary>
        </member>
        <member name="F:X.CommLib.VisualStudioTools.BuildParams.LogLevel.Minimal">
            <summary>
                最小
            </summary>
        </member>
        <member name="F:X.CommLib.VisualStudioTools.BuildParams.LogLevel.Normal">
            <summary>
                普通
            </summary>
        </member>
        <member name="F:X.CommLib.VisualStudioTools.BuildParams.LogLevel.Detailed">
            <summary>
                详细
            </summary>
        </member>
        <member name="F:X.CommLib.VisualStudioTools.BuildParams.LogLevel.Diagnostic">
            <summary>
                诊断
            </summary>
        </member>
        <member name="P:X.CommLib.VisualStudioTools.BuildParams.Verbosity">
            <summary>
                日志记录
            </summary>
            <value>
                The log level.
            </value>
        </member>
        <member name="P:X.CommLib.VisualStudioTools.BuildParams.LogFile">
            <summary>
                日志文件的路径
            </summary>
            <value>
                The log file.
            </value>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.BuildParams.GetLogLevelString(X.CommLib.VisualStudioTools.BuildParams.LogLevel)">
            <summary>
                返回日志使用的字符串表示
            </summary>
            <param name="logLevel">The log level.</param>
            <returns></returns>
        </member>
        <member name="P:X.CommLib.VisualStudioTools.BuildParams.Configuration">
            <summary>
                返回构造时使用的配置，比如Debug,Relase之类的
            </summary>
            <value>
                The configuration.
            </value>
        </member>
        <member name="P:X.CommLib.VisualStudioTools.BuildParams.Platform">
            <summary>
                程序运行平台，比如AnyCPU
            </summary>
            <value>
                The platform.
            </value>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.BuildParams.AddProperty(System.String,System.String)">
            <summary>
                添加一个构造属性
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.BuildParams.GetProperties">
            <summary>
                返回属性参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.BuildParams.GetProperty(System.String,System.String)">
            <summary>
                返回属性值
            </summary>
            <param name="key">The key.</param>
            <param name="defaultVal">The default val.</param>
            <returns></returns>
        </member>
        <member name="T:X.CommLib.VisualStudioTools.MsBuilder">
            <summary>
                ms构建器工具
            </summary>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.MsBuilder.BuildProject(System.String,System.String,System.String)">
            <summary>
            快速编辑程序，会在桌面创建日志，
                如果成功则删除日志，
                如果失败，则保留日志，并抛出相应的异常
            </summary>
            <param name="projectFile">
            The project file.
            </param>
            <param name="buildPlatform">
            The build platform.
            </param>
            <param name="configuration">
            The configuration.
            </param>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.MsBuilder.Test">
            <summary>
                测试
            </summary>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.MsBuilder.TestSln">
            <summary>
                进行sln 文件编辑测试
            </summary>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.MsBuilder.Build(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            构建项目
            </summary>
            <param name="projectPath">
            The project path.
            </param>
            <param name="properties">
            The properties.
            </param>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.MsBuilder.Build(System.String,X.CommLib.VisualStudioTools.BuildParams)">
            <summary>
            构建项目
            </summary>
            <param name="projectPath">
            项目文件路径.
            </param>
            <param name="buildParams">
            The build params.
            </param>
            <exception cref="T:System.IO.FileNotFoundException">
            编译程序不存在
            </exception>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.MsBuilder.GetMsBuildFilePath">
            <summary>
            返回构建程序路径
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.MsBuilder.GetMsBuildFilePathFromRegist">
            <summary>
            从注册表中获取 msbuild 的路径
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.MsBuilder.GetMsBuildFilePathFromDirectory(System.String)">
            <summary>
            在指定的目录下查找msbuild.exe
            </summary>
            <param name="frameworkDirectory">
            The framework directory.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.MsBuilder.VerDirectoryComparison(System.String,System.String)">
            <summary>
            比较带版本的文件目录.
            </summary>
            <param name="path1">
            The path1.
            </param>
            <param name="path2">
            The path2.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.MsBuilder.ParsePathVersion(System.String)">
            <summary>
            解析目录中的版本
            </summary>
            <param name="path">
            The path.
            </param>
            <returns>
            The <see cref="T:System.Version"/>.
            </returns>
        </member>
        <member name="T:X.CommLib.VisualStudioTools.ProjectFileUpdater">
            <summary>
                项目文件更新器
            </summary>
        </member>
        <member name="F:X.CommLib.VisualStudioTools.ProjectFileUpdater.innerXmlDocument">
            <summary>
                内部的 xml 文件
            </summary>
        </member>
        <member name="F:X.CommLib.VisualStudioTools.ProjectFileUpdater.projectFile">
            <summary>
                项目文件的路径
            </summary>
        </member>
        <member name="P:X.CommLib.VisualStudioTools.ProjectFileUpdater.ProjectFile">
            <summary>
                项目文件的路径
            </summary>
            <value>
                The prouect file.
            </value>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.ProjectFileUpdater.AddDefineConstants(System.String,System.String[])">
            <summary>
            加入加入一批编译标记
            </summary>
            <param name="projectFile">
            The build project file.
            </param>
            <param name="constants">
            The constants.
            </param>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.ProjectFileUpdater.ContainsDefineConstant(System.String,System.String)">
            <summary>
            指定的 project 项目文件中有没有指定的编译宏定义
            </summary>
            <param name="projectFile">
            The project file.
            </param>
            <param name="constant">
            The constant.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.ProjectFileUpdater.ContainsDefineConstant(System.String)">
            <summary>
            编译宏中是否包括指定的定义，不区分大小写
            </summary>
            <param name="constant">
            The constant.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.ProjectFileUpdater.Test">
            <summary>
                测试
            </summary>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.ProjectFileUpdater.AddDefineConstants(System.String[])">
            <summary>
            加入编辑定义
            </summary>
            <param name="constants">
            The constants.
            </param>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.ProjectFileUpdater.FindXmlElement(System.String,System.String)">
            <summary>
            查找指定 xpath 的节点
            </summary>
            <param name="xpath">
            The xpath.
            </param>
            <param name="defaultNamespace">
            The default namespace.
            </param>
            <returns>
            The <see cref="!:XmlElement[]"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.ProjectFileUpdater.FindXmlNodes(System.String,System.String)">
            <summary>
            使用 xpath 查找指定的节点
            </summary>
            <param name="xpath">
            The xpath.
            </param>
            <param name="defaultNamespace">
            The default namespace.
            </param>
            <returns>
            The <see cref="!:XmlNode[]"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.ProjectFileUpdater.GetDefineConstantsElement">
            <summary>
                返回当前编译宏节点
            </summary>
            <returns>
                The <see cref="!:XmlElement[]" />.
            </returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.ProjectFileUpdater.GetDefineConstantsValue(System.Xml.XmlNode)">
            <summary>
            返回编译宏节点中的宏值
            </summary>
            <param name="element">
            The element.
            </param>
            <returns>
            The <see cref="!:string[]"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.ProjectFileUpdater.GetInnerDocument">
            <summary>
                返回当前的文档的 xml 格式
            </summary>
            <returns>
                The <see cref="T:System.Xml.XmlDocument" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                @当前没有打开的配置文件
            </exception>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.ProjectFileUpdater.Open(System.String)">
            <summary>
            打开一个项目文件
            </summary>
            <param name="filePath">
            The file path.
            </param>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.ProjectFileUpdater.Save">
            <summary>
                Saves this instance.
            </summary>
        </member>
        <member name="T:X.CommLib.VisualStudioTools.SolutionFileHelper">
            <summary>
                项目文件辅助类
            </summary>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.SolutionFileHelper.GetOwnerSolutionDirectory(System.String)">
            <summary>
            从一个目录或是文件开始向上查找，直到找到一个vs 项目文件，并返回该项目文件所在的目录
                就是查找当前 .sln 文件所在目录
                找不到，抛出异常
            </summary>
            <param name="directoryOrFile">
            The directory or file.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.SolutionFileHelper.GetCurrentSolutionDirectory">
            <summary>
                返回当前所在目录所属的项目所在目录
                如果不存在抛出异常
            </summary>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.SolutionFileHelper.GetOwnerProjectDirectory(System.String)">
            <summary>
            返回当前所在项目的目录
                目前为查找到.csproj文件,如果没有找到抛出异常
            </summary>
            <param name="directoryOrFile">
            The directory or file.
            </param>
            <returns>
            System.String.
            </returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.SolutionFileHelper.GetCurrentProjectDirectory">
            <summary>
                返回当前所属的项目目录
                如果不存在，抛出异常
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.SolutionFileHelper.TryGetOwnerSolutionDirectory(System.String)">
            <summary>
            从一个目录或是文件开始向上查找，直到找到一个vs 项目文件，并返回该项目文件所在的目录
                就是查找当前 .sln 文件所在目录
                找不到，返回 null
            </summary>
            <param name="directoryOrFile">
            The directory or file.
            </param>
            <returns>
            System.String.
            </returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.SolutionFileHelper.TryGetOwnerProjectDirectory(System.String)">
            <summary>
            返回指定目录或文件所属的项目目录
            </summary>
            <param name="directoryOrFile">
            The directory or file.
            </param>
            <returns>
            System.String.
            </returns>
        </member>
        <member name="M:X.CommLib.VisualStudioTools.SolutionFileHelper.TryGetDirectory(System.String,System.String[])">
            <summary>
            从下向上查找目录，如果目录中存在指定搜索的文件，则返回目录，
                如果目录不存在，则直接返回 null
            </summary>
            <param name="directoryOrFile">
            The directory or file.
            </param>
            <param name="searchPatterns">
            搜索规则.
            </param>
            <returns>
            System.String.
            </returns>
        </member>
        <member name="T:X.CommLib.Xml.XmlValueReader">
            <summary>
                xml 读取器
            </summary>
        </member>
        <member name="F:X.CommLib.Xml.XmlValueReader._navigator">
            <summary>
                xml读取器
            </summary>
        </member>
        <member name="M:X.CommLib.Xml.XmlValueReader.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Xml.XmlValueReader" /> class.
                使用xml文件进行初始化
            </summary>
            <param name="path"> The path. </param>
            <param name="rootXPath"> The root X path. </param>
        </member>
        <member name="M:X.CommLib.Xml.XmlValueReader.#ctor(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Xml.XmlValueReader" /> class.
                使用 xml 读取器进行初始化
            </summary>
            <param name="navigator"> The navigator. </param>
            <param name="rootXPath"> 读取数据时的根xpath </param>
        </member>
        <member name="M:X.CommLib.Xml.XmlValueReader.#ctor(System.Xml.XmlDocument,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:X.CommLib.Xml.XmlValueReader" /> class.
                使用 xml 文档进行初始化
            </summary>
            <param name="document"> The document. </param>
            <param name="rootXPath"> The root X path. </param>
        </member>
        <member name="M:X.CommLib.Xml.XmlValueReader.ReadNodeString(System.String,System.String)">
            <summary>
                读取 string 节点
            </summary>
            <param name="xpath"> The xpath. </param>
            <param name="defValue"> The def value. </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Xml.XmlValueReader.ReadAttributeValue``1(System.String,System.String,``0)">
            <summary>
                读取指定值
            </summary>
            <typeparam name="T"> </typeparam>
            <param name="node"> The node. </param>
            <param name="attr"> The attr. </param>
            <param name="defaultValue"> The default value. </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Xml.XmlValueReader.ReadNodeValue``1(System.String,``0)">
            <summary>
                读取节点值
            </summary>
            <typeparam name="T"> </typeparam>
            <param name="xpath"> The xpath. </param>
            <param name="defaultValue"> The default value. </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Xml.XmlValueReader.LoadXmlDocument(System.String)">
            <summary>
                载入xml文件
            </summary>
            <param name="path"> The path. </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Xml.XmlValueReader.Convert``1(System.Object)">
            <summary>
                转换数据类型
            </summary>
            <typeparam name="T"> </typeparam>
            <param name="obj"> The obj. </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Xml.XmlValueReader.ReadNodeString(System.Xml.XPath.XPathNavigator,System.String,System.String)">
            <summary>
                根据xpath读取一个值
            </summary>
            <param name="navigator"> The navigator. </param>
            <param name="xpath"> Name of the local. </param>
            <param name="defValue"> The def value. </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Xml.XmlValueReader.ReadAttributeValue``1(System.Xml.XPath.XPathNavigator,System.String,System.String,``0)">
            <summary>
                读取指定属性的值
            </summary>
            <typeparam name="T"> </typeparam>
            <param name="navigator"> The navigator. </param>
            <param name="nodeXpath"> 属性所有地节点的xpath. </param>
            <param name="attr"> 属性名称. </param>
            <param name="defaultValue"> 如果属性值不存在，返回值. </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Xml.XmlValueReader.ReadAttributeValue``1(System.Xml.XPath.XPathNavigator,System.String,``0)">
            <summary>
                读取指定节点的属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="navigator">The navigator.</param>
            <param name="attr">The attr.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Xml.XmlValueReader.ReadNodeValue``1(System.Xml.XPath.XPathNavigator,System.String,``0)">
            <summary>
                读取指定节点的值
            </summary>
            <typeparam name="T"> </typeparam>
            <param name="navigator"> The navigator. </param>
            <param name="xPath"> Name of the local. </param>
            <param name="defaultValue"> The def val. </param>
            <returns> </returns>
        </member>
        <member name="M:X.CommLib.Xml.XmlValueReader.ReadNode(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
                读取节点，如果失败返回null
            </summary>
            <param name="navigator">The navigator.</param>
            <param name="xPath">The x path.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Xml.XmlValueReader.ReadNodes(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
                读取节点
            </summary>
            <param name="navigator">The navigator.</param>
            <param name="xPath">The x path.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Xml.XmlValueReader.Exists(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
                指定的节点是否存在
            </summary>
            <param name="navigator">The navigator.</param>
            <param name="xPath">The x path.</param>
            <returns></returns>
        </member>
        <member name="M:X.CommLib.Xml.XmlValueReader.HasChildren(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
                指定的节点是否有子代
            </summary>
            <param name="navigator">The navigator.</param>
            <param name="xPath">The x path.</param>
            <returns></returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <summary>
                有参数中表示调用者
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <summary>
                在参数中表示调用文件
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <summary>
                在参数中表示调用行
            </summary>
        </member>
        <member name="T:TenantSystem.SecurityLib.DataCertificate">
            <summary>
            证书工具类
            </summary>
        </member>
        <member name="M:TenantSystem.SecurityLib.DataCertificate.CreateCertWithPrivateKey(System.String,System.String)">
            <summary>  
            根据指定的证书名和makecert全路径生成证书（包含公钥和私钥，并保存在MY存储区）  
            </summary>  
            <param name="subjectName">证书名</param>  
            <param name="makecertPath">证书的保存路径</param>  
            <returns></returns>  
        </member>
        <member name="M:TenantSystem.SecurityLib.DataCertificate.ExportToPfxFile(System.String,System.String,System.String,System.Boolean)">
            <summary>  
            从WINDOWS证书存储区的个人MY区找到主题为subjectName的证书，  
            并导出为pfx文件，同时为其指定一个密码  
            并将证书从个人区删除(如果isDelFromstor为true)  
            </summary>  
            <param name="subjectName">证书主题，不包含CN=</param>  
            <param name="pfxFileName">pfx文件名</param>  
            <param name="password">pfx文件密码</param>  
            <param name="isDelFromStore">是否从存储区删除</param>  
            <returns></returns>  
        </member>
        <member name="M:TenantSystem.SecurityLib.DataCertificate.DeleteX509Certificate2(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            删除指定名称的证书
            </summary>
            <param name="x509Certificate2"></param>
            <returns></returns>
        </member>
        <member name="M:TenantSystem.SecurityLib.DataCertificate.FindX509Certificate2(System.String)">
            <summary>
            从WINDOWS证书存储区的个人MY区找到主题为subjectName的证书，如果不存在返回null
            </summary>
            <param name="subjectName"></param>
            <returns></returns>
        </member>
        <member name="M:TenantSystem.SecurityLib.DataCertificate.ExportToCerFile(System.String,System.String)">
            <summary>  
            从WINDOWS证书存储区的个人MY区找到主题为subjectName的证书，  
            并导出为CER文件（即，只含公钥的）  
            </summary>  
            <param name="subjectName">证书名</param>  
            <param name="cerFileName">保存路径</param>  
            <returns></returns>  
        </member>
        <member name="M:TenantSystem.SecurityLib.DataCertificate.GetCertificateFromPfxFile(System.String,System.String)">
            <summary>  
            根据私钥证书得到证书实体，得到实体后可以根据其公钥和私钥进行加解密  
            加解密函数使用DEncrypt的RSACryption类  
            </summary>  
            <param name="pfxFileName"></param>  
            <param name="password"></param>  
            <returns></returns>  
        </member>
        <member name="M:TenantSystem.SecurityLib.DataCertificate.GetCertificateFromStore(System.String)">
            <summary>  
            到存储区获取证书  
            </summary>  
            <param name="subjectName"></param>  
            <returns></returns>  
        </member>
        <member name="M:TenantSystem.SecurityLib.DataCertificate.GetCertFromCerFile(System.String)">
            <summary>  
            根据公钥证书，返回证书实体  
            </summary>  
            <param name="cerPath"></param>  
        </member>
        <member name="M:TenantSystem.SecurityLib.DataCertificate.Test">
            <summary>
            内部测试
            </summary>
        </member>
    </members>
</doc>
